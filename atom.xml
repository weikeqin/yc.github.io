<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>沧海一粟</title>
  
  <subtitle>天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://weikeqin.com/"/>
  <updated>2020-06-30T23:43:59.076Z</updated>
  <id>http://weikeqin.com/</id>
  
  <author>
    <name>WKQ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java-virtual-machine-structure</title>
    <link href="http://weikeqin.com/2020/07/01/java-virtual-machine-structure/"/>
    <id>http://weikeqin.com/2020/07/01/java-virtual-machine-structure/</id>
    <published>2020-06-30T23:43:14.000Z</published>
    <updated>2020-06-30T23:43:59.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html" target="_blank" rel="noopener">Chapter 2. The Structure of the Java Virtual Machine</a><br>[2] <a href="https://docs.oracle.com/javase/specs/jvms/se14/html/jvms-2.html" target="_blank" rel="noopener">Chapter 2. The Structure of the Java Virtual Machine</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;p&gt;[1] &lt;a href=&quot;https://docs.oracle.com/j
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mysql-log</title>
    <link href="http://weikeqin.com/2020/06/24/mysql-log/"/>
    <id>http://weikeqin.com/2020/06/24/mysql-log/</id>
    <published>2020-06-24T01:25:22.000Z</published>
    <updated>2020-06-24T03:38:18.412Z</updated>
    
    <content type="html"><![CDATA[<p>  redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；<br>  binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。</p><p>  Redo log不是记录数据页“更新之后的状态”，而是记录这个页 “做了什么改动”。<br>  Binlog有两种模式，statement 格式的话是记sql语句， row格式会记录行的内容，记两条，更新前和更新后都有。(row格式会导致日志变大)</p><p>  binlog是可以关的，你如果有权限，可以set sql_log_bin=0关掉本线程的binlog日志。 所以只依赖binlog来恢复就靠不住。</p><p>  innodb B+树主键索引的叶子节点存的是什么，存的是页<br>  B+树的叶子节点是page （页），一个页里面可以存多个行 </p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://time.geekbang.org/column/article/68633" target="_blank" rel="noopener">02 | 日志系统：一条SQL更新语句是如何执行的？</a><br>[2] <a href="https://www.cnblogs.com/f-ck-need-u/p/9010872.html" target="_blank" rel="noopener">详细分析MySQL事务日志(redo log和undo log)</a><br>[3] <a href="https://www.cnblogs.com/f-ck-need-u/p/9001061.html" target="_blank" rel="noopener">详细分析MySQL的日志(一)</a><br>[4] <a href="https://dev.mysql.com/doc/refman/5.7/en/server-logs.html" target="_blank" rel="noopener">dev.mysql.com/doc/refman/5.7/en/server-logs.html</a><br>[5] <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-redo-log.html" target="_blank" rel="noopener">dev.mysql.com/doc/refman/5.7/en/innodb-redo-log.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；&lt;br&gt;  binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。&lt;/p&gt;
&lt;p&gt;  Redo log不是记录数据页“更新之后的状态”，而是记录这个页
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>全局唯一ID 分布式ID</title>
    <link href="http://weikeqin.com/2020/06/22/unique-id/"/>
    <id>http://weikeqin.com/2020/06/22/unique-id/</id>
    <published>2020-06-22T09:14:18.000Z</published>
    <updated>2020-06-22T09:35:02.002Z</updated>
    
    <content type="html"><![CDATA[<p><strong>什么是分布式ID</strong></p><blockquote><p> 在我们系统数据量不大的时候，单库单表完全可以支撑现有系统，数据再大一点搞个MySQL主从同步读写分离也能对付。<br>但随着数据日渐增长，主从同步也扛不住了，就需要对数据库进行分库分表，但分库分表后需要有一个唯一ID来标识一条数据，数据库的自增ID显然不能满足需求；特别一点的如订单、优惠券也都需要有唯一ID做标识。此时一个能够生成全局唯一ID的系统是非常必要的。那么这个全局唯一ID就叫分布式ID。</p></blockquote><p><strong>分布式ID需要满足那些条件</strong><br>全局唯一：必须保证ID是全局性唯一的，基本要求<br>高性能：高可用低延时，ID生成响应要块，否则反倒会成为瓶颈<br>高可用：100%的可用性是骗人的，但是也要无限接近于100%的可用性<br>好接入：要秉着拿来即用的设计原则，在系统设计和实现上要尽可能的简单<br>趋势递增：最好趋势递增，这个要求就得看具体场景了，一般不严格要求</p><p><strong>有哪些生成方式</strong></p><p>程序自增ID<br>关系型数据库自增ID<br>Redis</p><p>UUID</p><p>数据库多主模式<br>号段模式</p><p>雪花算法（SnowFlake）<br>滴滴出品（TinyID）<br>百度 （Uidgenerator）<br>美团（Leaf）</p><a id="more"></a><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://mp.weixin.qq.com/s?__biz=MzAxNTM4NzAyNg%3D%3D&amp;mid=2247483785&amp;idx=1&amp;sn=8b828a8ae1701b810fe3969be536cb14&amp;scene=45#wechat_redirect" target="_blank" rel="noopener">一口气说出 9种 分布式ID生成方式，面试官有点懵了</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;什么是分布式ID&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 在我们系统数据量不大的时候，单库单表完全可以支撑现有系统，数据再大一点搞个MySQL主从同步读写分离也能对付。&lt;br&gt;但随着数据日渐增长，主从同步也扛不住了，就需要对数据库进行分库分表，但分库分表后需要有一个唯一ID来标识一条数据，数据库的自增ID显然不能满足需求；特别一点的如订单、优惠券也都需要有唯一ID做标识。此时一个能够生成全局唯一ID的系统是非常必要的。那么这个全局唯一ID就叫分布式ID。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;分布式ID需要满足那些条件&lt;/strong&gt;&lt;br&gt;全局唯一：必须保证ID是全局性唯一的，基本要求&lt;br&gt;高性能：高可用低延时，ID生成响应要块，否则反倒会成为瓶颈&lt;br&gt;高可用：100%的可用性是骗人的，但是也要无限接近于100%的可用性&lt;br&gt;好接入：要秉着拿来即用的设计原则，在系统设计和实现上要尽可能的简单&lt;br&gt;趋势递增：最好趋势递增，这个要求就得看具体场景了，一般不严格要求&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有哪些生成方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;程序自增ID&lt;br&gt;关系型数据库自增ID&lt;br&gt;Redis&lt;/p&gt;
&lt;p&gt;UUID&lt;/p&gt;
&lt;p&gt;数据库多主模式&lt;br&gt;号段模式&lt;/p&gt;
&lt;p&gt;雪花算法（SnowFlake）&lt;br&gt;滴滴出品（TinyID）&lt;br&gt;百度 （Uidgenerator）&lt;br&gt;美团（Leaf）&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jvm-notes</title>
    <link href="http://weikeqin.com/2020/06/21/jvm-notes/"/>
    <id>http://weikeqin.com/2020/06/21/jvm-notes/</id>
    <published>2020-06-21T03:25:34.000Z</published>
    <updated>2020-06-29T07:20:54.748Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> Java虚拟机是Java平台的基石。它是技术的组成部分，负责硬件和操作系统的独立性，编译代码的小巧大小以及保护用户免受恶意程序侵害的能力。</p></blockquote><blockquote><p> Java虚拟机是抽象的计算机。像真正的计算机一样，它具有指令集，并在运行时操作各种内存区域。使用虚拟机实现编程语言是相当普遍的。最知名的虚拟机可能是UCSD Pascal的P代码计算机。</p></blockquote><blockquote><p> Java虚拟机对Java编程语言一无所知，仅对特定的二进制格式（class文件格式）一无所知。一个class文件包含的Java虚拟机指令（或字节码）和符号表，以及其它辅助信息。</p></blockquote><blockquote><p> 为了安全起见，Java虚拟机对class文件中的代码施加了严格的语法和结构约束。但是，classJava虚拟机可以托管任何可以用有效文件表示的功能的语言。受通用的，独立于机器的平台的吸引，其他语言的实现者可以将Java虚拟机用作其语言的交付工具。</p></blockquote><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>  <a href="https://docs.oracle.com/javase/specs/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/index.html</a><br>  <a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/jvms/se8/html/index.html</a><br>  <a href="https://github.com/deephacks/awesome-jvm" target="_blank" rel="noopener">https://github.com/deephacks/awesome-jvm</a><br>  <a href="https://github.com/graalvm/graal-jvmci-8" target="_blank" rel="noopener">https://github.com/graalvm/graal-jvmci-8</a><br>  <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javap.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javap.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; Java虚拟机是Java平台的基石。它是技术的组成部分，负责硬件和操作系统的独立性，编译代码的小巧大小以及保护用户免受恶意程序侵害的能力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Java虚拟机是抽象的计算机。像真正
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>io-model</title>
    <link href="http://weikeqin.com/2020/06/17/io-model/"/>
    <id>http://weikeqin.com/2020/06/17/io-model/</id>
    <published>2020-06-17T15:46:45.000Z</published>
    <updated>2020-06-22T09:10:58.172Z</updated>
    
    <content type="html"><![CDATA[<p>网络通信中，最底层的就是内核中的网络 I/O 模型了。</p><blockquote><p> 随着技术的发展，操作系统内核的网络模型衍生出了五种 I/O 模型，《UNIX 网络编程》一书将这五种 I/O 模型分为 <code>阻塞式 I/O</code>、<code>非阻塞式 I/O</code>、<code>I/O 复用</code>、<code>信号驱动式 I/O</code> 和 <code>异步 I/O</code>。每一种 I/O 模型的出现，都是基于前一种 I/O 模型的优化升级。</p></blockquote><a id="more"></a><p>同步：调用端会一直等待服务端响应，直到返回结果。<br>异步：调用端发起调用之后不会立刻返回，不会等待服务端响应。服务端通过通知机制或者回调函数来通知客户端。<br>阻塞：服务端返回结果之前，客户端线程会被挂起，此时线程不可被CPU调度，线程暂停运行。<br>非阻塞：在服务端返回前，函数不会阻塞调用端线程，而会立刻返回。</p><p><strong>核心态(Kernel model)和用户态(User model)</strong><br>核心态(Kernel model)和用户态(User model)，CPU会在两个model之间切换。</p><p>核心态代码拥有完全的底层资源控制权限，可以执行任何CPU指令，访问任何内存地址，其占有的处理机是不允许被抢占的。内核态的指令包括：启动I/O，内存清零，修改程序状态字，设置时钟，允许/终止中断和停机。内核态的程序崩溃会导致PC停机。<br>用户态是用户程序能够使用的指令，不能直接访问底层硬件和内存地址。用户态运行的程序必须委托系统调用来访问硬件和内存。用户态的指令包括：控制转移，算数运算，取数指令，访管指令（使用户程序从用户态陷入内核态）。</p><p><strong>进程切换</strong></p><blockquote><p>为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：</p><blockquote><ol><li>保存处理机上下文，包括程序计数器和其他寄存器。</li><li>更新PCB信息。</li><li>把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列。</li><li>选择另一个进程执行，并更新其PCB。</li><li>更新内存管理的数据结构。</li><li>恢复处理机上下文。</li></ol></blockquote></blockquote><p><strong>进程阻塞</strong></p><blockquote><p> 正在执行的进程由于一些事情发生，如请求资源失败、等待某种操作完成、新数据尚未达到或者没有新工作做等，由系统自动执行阻塞原语，使进程状态变为阻塞状态。因此，进程阻塞是进程自身的一种主动行为，只有处于运行中的进程才可以将自身转化为阻塞状态。当进程被阻塞，它是不占用CPU资源的。</p></blockquote><p><strong>文件描述符(fd, File Descriptor)</strong></p><blockquote><p> FD用于描述指向文件的引用的抽象化概念。文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。</p></blockquote><h1 id="1-阻塞式-I-O-blocking-IO"><a href="#1-阻塞式-I-O-blocking-IO" class="headerlink" title="(1) 阻塞式 I/O ( blocking IO )"></a>(1) 阻塞式 I/O ( blocking IO )</h1><blockquote><p> 在每一个连接创建时，都需要一个用户线程来处理，并且在 I/O 操作没有就绪或结束时，线程会被挂起，进入阻塞等待状态。<br> 在整个 socket 通信工作流程中，socket 的默认状态是阻塞的。也就是说，当发出一个不能立即完成的套接字调用时，其进程将被阻塞，被系统挂起，进入睡眠状态，一直等待相应的操作响应。<br> 阻塞式 I/O 就成为了导致性能瓶颈的根本原因。</p></blockquote><p><strong>connect 阻塞</strong></p><blockquote><p> connect 阻塞： 当客户端发起 TCP 连接请求，通过系统调用 connect 函数，TCP 连接的建立需要完成三次握手过程，客户端需要等待服务端发送回来的 ACK 以及 SYN 信号，同样服务端也需要阻塞等待客户端确认连接的 ACK 信号，这就意味着 TCP 的每个 connect 都会阻塞等待，直到确认连接。</p></blockquote><p><strong>accept 阻塞</strong></p><blockquote><p> accept 阻塞 : 一个阻塞的 socket 通信的服务端接收外来连接，会调用 accept 函数，如果没有新的连接到达，调用进程将被挂起，进入阻塞状态。</p></blockquote><p><strong>read、write 阻塞</strong></p><blockquote><p> read、write 阻塞 : 当一个 socket 连接创建成功之后，服务端用 fork 函数创建一个子进程， 调用 read 函数等待客户端的数据写入，如果没有数据写入，调用子进程将被挂起，进入阻塞状态。</p></blockquote><h1 id="2-非阻塞式-I-O-non-blocking-IO"><a href="#2-非阻塞式-I-O-non-blocking-IO" class="headerlink" title="(2) 非阻塞式 I/O ( non-blocking IO )"></a>(2) 非阻塞式 I/O ( non-blocking IO )</h1><blockquote><p> 非阻塞式I/O 解决了阻塞的问题。</p></blockquote><blockquote><p> 内核在没有准备好数据的时候会返回错误码，而调用程序不会休眠，而是不断轮询询问内核数据是否准备好。数据准备好时，函数成功返回。</p></blockquote><p>  使用用户线程轮询查看一个 I/O 操作的状态，在大量请求的情况下，非阻塞式IO的轮询会耗费大量cpu。</p><h1 id="3-I-O-复用"><a href="#3-I-O-复用" class="headerlink" title="(3) I/O 复用"></a>(3) I/O 复用</h1><blockquote><p> 类似与非阻塞，只不过轮询不是由用户线程去执行，而是由内核去轮询，内核监听程序监听到数据准备好后，调用内核函数复制数据到用户态。</p></blockquote><blockquote><p> Linux 提供了 I/O 复用函数 select/poll/epoll，进程将一个或多个读操作通过系统调用函数，阻塞在函数操作上。这样，系统内核就可以帮我们侦测多个读操作是否处于就绪状态。</p></blockquote><p>  Linux 提供了 I/O 复用函数 select/poll/epoll，进程将一个或多个读操作通过系统调用函数，阻塞在函数操作上。这样，系统内核就可以帮我们侦测多个读操作是否处于就绪状态。</p><h1 id="4-信号驱动式I-O（-signal-driven-IO-）"><a href="#4-信号驱动式I-O（-signal-driven-IO-）" class="headerlink" title="(4) 信号驱动式I/O（ signal-driven IO ）"></a>(4) 信号驱动式I/O（ signal-driven IO ）</h1><blockquote><p> 首先我们允许Socket进行信号驱动IO，并安装一个信号处理函数，进程继续运行并不阻塞。当数据准备好时，进程会收到一个SIGIO信号，可以在信号处理函数中调用I/O操作函数处理数据。</p></blockquote><h1 id="5-异步非阻塞-I-O（-asynchronous-IO-）"><a href="#5-异步非阻塞-I-O（-asynchronous-IO-）" class="headerlink" title="(5) 异步非阻塞 I/O（ asynchronous IO ）"></a>(5) 异步非阻塞 I/O（ asynchronous IO ）</h1><blockquote><p> 相对于同步IO，异步IO不是顺序执行。用户进程进行aio_read系统调用之后，无论内核数据是否准备好，都会直接返回给用户进程，然后用户态进程可以去做别的事情。等到socket数据准备好了，内核直接复制数据给进程，然后从内核向进程发送通知。IO两个阶段，进程都是非阻塞的。</p></blockquote><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://time.geekbang.org/column/article/100861" target="_blank" rel="noopener">答疑课堂：深入了解NIO的优化实现原理</a><br>[2] <a href="https://www.jianshu.com/p/486b0965c296" target="_blank" rel="noopener">聊聊Linux 五种IO模型</a><br>[3] <a href="https://juejin.im/post/5c725dbe51882575e37ef9ed" target="_blank" rel="noopener">linux五种IO模型</a><br>[4] 《Unix网络编程》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网络通信中，最底层的就是内核中的网络 I/O 模型了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 随着技术的发展，操作系统内核的网络模型衍生出了五种 I/O 模型，《UNIX 网络编程》一书将这五种 I/O 模型分为 &lt;code&gt;阻塞式 I/O&lt;/code&gt;、&lt;code&gt;非阻塞式 I/O&lt;/code&gt;、&lt;code&gt;I/O 复用&lt;/code&gt;、&lt;code&gt;信号驱动式 I/O&lt;/code&gt; 和 &lt;code&gt;异步 I/O&lt;/code&gt;。每一种 I/O 模型的出现，都是基于前一种 I/O 模型的优化升级。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="io" scheme="http://weikeqin.com/categories/io/"/>
    
    
      <category term="io" scheme="http://weikeqin.com/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>java jmh 使用</title>
    <link href="http://weikeqin.com/2020/06/14/java-jmh-notes/"/>
    <id>http://weikeqin.com/2020/06/14/java-jmh-notes/</id>
    <published>2020-06-14T08:52:52.000Z</published>
    <updated>2020-06-14T14:26:12.529Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 代码工具：jmh  JMH是一个Java工具，用于构建、运行和分析nano/micro/mili/macro基准，这些基准是用Java和其他针对JVM的语言编写的。<br> Code Tools: jmh  JMH is a Java harness for building, running, and analysing nano/micro/milli/macro benchmarks written in Java and other languages targetting the JVM.</p></blockquote><h1 id="JMH解决了什么问题"><a href="#JMH解决了什么问题" class="headerlink" title="JMH解决了什么问题"></a>JMH解决了什么问题</h1><h1 id="JMH怎么用"><a href="#JMH怎么用" class="headerlink" title="JMH怎么用"></a>JMH怎么用</h1><ol><li>添加对应jar包</li><li>根据实际情况配置参数</li><li>编写代码运行</li></ol><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h2><p>@BenchmarkMode<br>用来配置 Mode 选项，可用于类或者方法上，这个注解的 value 是一个数组，可以把几种 Mode 集合在一起执行，如：@BenchmarkMode({Mode.SampleTime, Mode.AverageTime})，还可以设置为 Mode.All，即全部执行一遍。</p><p>Throughput：整体吞吐量，每秒执行了多少次调用，单位为 ops/time<br>AverageTime：用的平均时间，每次操作的平均时间，单位为 time/op<br>SampleTime：随机取样，最后输出取样结果的分布<br>SingleShotTime：只运行一次，往往同时把 Warmup 次数设为 0，用于测试冷启动时的性能<br>All：上面的所有模式都执行一次<br>@State<br>通过 State 可以指定一个对象的作用范围，JMH 根据 scope 来进行实例化和共享操作。@State 可以被继承使用，如果父类定义了该注解，子类则无需定义。由于 JMH 允许多线程同时执行测试，不同的选项含义如下：</p><p>Scope.Benchmark：所有测试线程共享一个实例，测试有状态实例在多线程共享下的性能<br>Scope.Group：同一个线程在同一个 group 里共享实例<br>Scope.Thread：默认的 State，每个测试线程分配一个实例<br>@OutputTimeUnit<br>为统计结果的时间单位，可用于类或者方法注解</p><p>@Warmup<br>预热所需要配置的一些基本测试参数，可用于类或者方法上。一般前几次进行程序测试的时候都会比较慢，所以要让程序进行几轮预热，保证测试的准确性。参数如下所示：</p><p>iterations：预热的次数<br>time：每次预热的时间<br>timeUnit：时间的单位，默认秒<br>batchSize：批处理大小，每次操作调用几次方法<br>为什么需要预热？</p><p>因为 JVM 的 JIT 机制的存在，如果某个函数被调用多次之后，JVM 会尝试将其编译为机器码，从而提高执行速度，所以为了让 benchmark 的结果更加接近真实情况就需要进行预热。</p><p>@Measurement<br>实际调用方法所需要配置的一些基本测试参数，可用于类或者方法上，参数和 @Warmup 相同。</p><p>@Threads<br>每个进程中的测试线程，可用于类或者方法上。</p><p>@Fork<br>进行 fork 的次数，可用于类或者方法上。如果 fork 数是 2 的话，则 JMH 会 fork 出两个进程来进行测试。</p><p>@Param<br>指定某项参数的多种情况，特别适合用来测试一个函数在不同的参数输入的情况下的性能，只能作用在字段上，使用该注解必须定义 @State 注解。</p><h2 id="编写代码运行"><a href="#编写代码运行" class="headerlink" title="编写代码运行"></a>编写代码运行</h2><blockquote><p> 建议 代码里不要打日志</p></blockquote><h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.wkq.java.string.StringInternTest;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.results.format.ResultFormatType;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.Runner;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.RunnerException;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.options.Options;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.options.OptionsBuilder;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     JMH使用样例</span></span><br><span class="line"><span class="comment"> *         http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> weikeqin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-06-14 17:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmtTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> Logger log = LoggerFactory.getLogger(StringInternTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">"hello JMH"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"开始执行。"</span>);</span><br><span class="line"></span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(JmtTest.class.getSimpleName())</span><br><span class="line">                .forks(<span class="number">1</span>)</span><br><span class="line">                .result(<span class="string">"jmh_result.json"</span>)</span><br><span class="line">                .resultFormat(ResultFormatType.JSON)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"执行完成。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">WARNING: An illegal reflective access operation has occurred</span><br><span class="line">WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/Users/weikeqin1/.m2/repository/org/openjdk/jmh/jmh-core/1.23/jmh-core-1.23.jar) to field java.io.PrintStream.charOut</span><br><span class="line">WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils</span><br><span class="line">WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations</span><br><span class="line">WARNING: All illegal access operations will be denied in a future release</span><br><span class="line"># JMH version: 1.23</span><br><span class="line"># VM version: JDK 14.0.1, Java HotSpot(TM) 64-Bit Server VM, 14.0.1+7</span><br><span class="line"># VM invoker: /Library/Java/JavaVirtualMachines/jdk-14.0.1.jdk/Contents/Home/bin/java</span><br><span class="line"># VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=57492:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8</span><br><span class="line"># Warmup: 5 iterations, 10 s each</span><br><span class="line"># Measurement: 5 iterations, 10 s each</span><br><span class="line"># Timeout: 10 min per iteration</span><br><span class="line"># Threads: 1 thread, will synchronize iterations</span><br><span class="line"># Benchmark mode: Throughput, ops/time</span><br><span class="line"># Benchmark: cn.wkq.java.jmh.JmtTest.print</span><br><span class="line"></span><br><span class="line"># Run progress: 0.00% complete, ETA 00:01:40</span><br><span class="line"># Fork: 1 of 1</span><br><span class="line"># Warmup Iteration   1: 660097134.157 ops/s</span><br><span class="line"># Warmup Iteration   2: 650765740.996 ops/s</span><br><span class="line"># Warmup Iteration   3: 661961002.718 ops/s</span><br><span class="line"># Warmup Iteration   4: 672329475.200 ops/s</span><br><span class="line"># Warmup Iteration   5: 611127628.164 ops/s</span><br><span class="line">Iteration   1: 615120987.535 ops/s</span><br><span class="line">Iteration   2: 645989044.177 ops/s</span><br><span class="line">Iteration   3: 642876939.314 ops/s</span><br><span class="line">Iteration   4: 640265656.368 ops/s</span><br><span class="line">Iteration   5: 673185386.638 ops/s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Result &quot;cn.wkq.java.jmh.JmtTest.print&quot;:</span><br><span class="line">  643487602.806 ±(99.9%) 79467866.034 ops/s [Average]</span><br><span class="line">  (min, avg, max) = (615120987.535, 643487602.806, 673185386.638), stdev = 20637552.448</span><br><span class="line">  CI (99.9%): [564019736.772, 722955468.841] (assumes normal distribution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Run complete. Total time: 00:01:42</span><br><span class="line"></span><br><span class="line">REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on</span><br><span class="line">why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial</span><br><span class="line">experiments, perform baseline and negative tests that provide experimental control, make sure</span><br><span class="line">the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.</span><br><span class="line">Do not assume the numbers tell you what you want them to tell.</span><br><span class="line"></span><br><span class="line">Benchmark       Mode  Cnt          Score          Error  Units</span><br><span class="line">JmtTest.print  thrpt    5  643487602.806 ± 79467866.034  ops/s</span><br><span class="line"></span><br><span class="line">Benchmark result is saved to jmh_result.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"jmhVersion"</span> : <span class="string">"1.23"</span>,</span><br><span class="line">        <span class="attr">"benchmark"</span> : <span class="string">"cn.wkq.java.jmh.JmtTest.print"</span>,</span><br><span class="line">        <span class="attr">"mode"</span> : <span class="string">"thrpt"</span>,</span><br><span class="line">        <span class="attr">"threads"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"forks"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"jvm"</span> : <span class="string">"/Library/Java/JavaVirtualMachines/jdk-14.0.1.jdk/Contents/Home/bin/java"</span>,</span><br><span class="line">        <span class="attr">"jvmArgs"</span> : [</span><br><span class="line">            <span class="string">"-javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=57492:/Applications/IntelliJ IDEA.app/Contents/bin"</span>,</span><br><span class="line">            <span class="string">"-Dfile.encoding=UTF-8"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"jdkVersion"</span> : <span class="string">"14.0.1"</span>,</span><br><span class="line">        <span class="attr">"vmName"</span> : <span class="string">"Java HotSpot(TM) 64-Bit Server VM"</span>,</span><br><span class="line">        <span class="attr">"vmVersion"</span> : <span class="string">"14.0.1+7"</span>,</span><br><span class="line">        <span class="attr">"warmupIterations"</span> : <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"warmupTime"</span> : <span class="string">"10 s"</span>,</span><br><span class="line">        <span class="attr">"warmupBatchSize"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"measurementIterations"</span> : <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"measurementTime"</span> : <span class="string">"10 s"</span>,</span><br><span class="line">        <span class="attr">"measurementBatchSize"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"primaryMetric"</span> : &#123;</span><br><span class="line">            <span class="attr">"score"</span> : <span class="number">6.434876028063821E8</span>,</span><br><span class="line">            <span class="attr">"scoreError"</span> : <span class="number">7.946786603420861E7</span>,</span><br><span class="line">            <span class="attr">"scoreConfidence"</span> : [</span><br><span class="line">                <span class="number">5.640197367721734E8</span>,</span><br><span class="line">                <span class="number">7.229554688405907E8</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"scorePercentiles"</span> : &#123;</span><br><span class="line">                <span class="attr">"0.0"</span> : <span class="number">6.151209875347286E8</span>,</span><br><span class="line">                <span class="attr">"50.0"</span> : <span class="number">6.428769393141737E8</span>,</span><br><span class="line">                <span class="attr">"90.0"</span> : <span class="number">6.731853866384177E8</span>,</span><br><span class="line">                <span class="attr">"95.0"</span> : <span class="number">6.731853866384177E8</span>,</span><br><span class="line">                <span class="attr">"99.0"</span> : <span class="number">6.731853866384177E8</span>,</span><br><span class="line">                <span class="attr">"99.9"</span> : <span class="number">6.731853866384177E8</span>,</span><br><span class="line">                <span class="attr">"99.99"</span> : <span class="number">6.731853866384177E8</span>,</span><br><span class="line">                <span class="attr">"99.999"</span> : <span class="number">6.731853866384177E8</span>,</span><br><span class="line">                <span class="attr">"99.9999"</span> : <span class="number">6.731853866384177E8</span>,</span><br><span class="line">                <span class="attr">"100.0"</span> : <span class="number">6.731853866384177E8</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"scoreUnit"</span> : <span class="string">"ops/s"</span>,</span><br><span class="line">            <span class="attr">"rawData"</span> : [</span><br><span class="line">                [</span><br><span class="line">                    <span class="number">6.151209875347286E8</span>,</span><br><span class="line">                    <span class="number">6.459890441766258E8</span>,</span><br><span class="line">                    <span class="number">6.428769393141737E8</span>,</span><br><span class="line">                    <span class="number">6.402656563679644E8</span>,</span><br><span class="line">                    <span class="number">6.731853866384177E8</span></span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"secondaryMetrics"</span> : &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.results.format.ResultFormatType;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.Runner;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.RunnerException;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.options.Options;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.options.OptionsBuilder;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     JMH使用样例</span></span><br><span class="line"><span class="comment"> *         http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> weikeqin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-06-14 16:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@BenchmarkMode</span>(Mode.AverageTime)</span><br><span class="line"><span class="meta">@Warmup</span>(iterations = <span class="number">3</span>, time = <span class="number">1</span>)</span><br><span class="line"><span class="meta">@Measurement</span>(iterations = <span class="number">5</span>, time = <span class="number">5</span>)</span><br><span class="line"><span class="meta">@Threads</span>(<span class="number">4</span>)</span><br><span class="line"><span class="meta">@Fork</span>(<span class="number">1</span>)</span><br><span class="line"><span class="meta">@State</span>(value = Scope.Benchmark)</span><br><span class="line"><span class="meta">@OutputTimeUnit</span>(TimeUnit.NANOSECONDS)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringInternTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> Logger log = LoggerFactory.getLogger(StringInternTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Param</span>(value = &#123;<span class="string">"10000"</span>, <span class="string">"100000"</span>, <span class="string">"1000000"</span>&#125;)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stringTestWithIntern</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> fm1 = Runtime.getRuntime().freeMemory();</span><br><span class="line"></span><br><span class="line">        List&lt;SharedLocation&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(count);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            String country = <span class="string">"中国"</span>;</span><br><span class="line">            String province = <span class="string">"山西"</span>;</span><br><span class="line">            String city = <span class="string">"运城"</span>;</span><br><span class="line">            SharedLocation sharedLocation = <span class="keyword">new</span> SharedLocation();</span><br><span class="line">            sharedLocation.setCountry(country.intern());</span><br><span class="line">            sharedLocation.setProvince(province.intern());</span><br><span class="line">            sharedLocation.setCity(city.intern());</span><br><span class="line"></span><br><span class="line">            list.add(sharedLocation);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"个数：&#123;&#125;"</span>, list.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> fm2 = Runtime.getRuntime().freeMemory();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"&#123;&#125;  &#123;&#125;    use &#123;&#125; bytes"</span>, fm1, fm2, fm1 - fm2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stringTestWithOutIntern</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> fm1 = Runtime.getRuntime().freeMemory();</span><br><span class="line"></span><br><span class="line">        List&lt;SharedLocation&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(count);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            String country = <span class="string">"中国"</span>;</span><br><span class="line">            String province = <span class="string">"山西"</span>;</span><br><span class="line">            String city = <span class="string">"运城"</span>;</span><br><span class="line">            SharedLocation sharedLocation = <span class="keyword">new</span> SharedLocation();</span><br><span class="line">            sharedLocation.setCountry(country);</span><br><span class="line">            sharedLocation.setProvince(province);</span><br><span class="line">            sharedLocation.setCity(city);</span><br><span class="line"></span><br><span class="line">            list.add(sharedLocation);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"个数：&#123;&#125;"</span>, list.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> fm2 = Runtime.getRuntime().freeMemory();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"&#123;&#125;  &#123;&#125;    use &#123;&#125; bytes"</span>, fm1, fm2, fm1 - fm2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"开始执行。"</span>);</span><br><span class="line"></span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(StringInternTest.class.getSimpleName())</span><br><span class="line">                .result(<span class="string">"result.json"</span>)</span><br><span class="line">                .resultFormat(ResultFormatType.JSON).build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RunnerException e) &#123;</span><br><span class="line">            log.error(<span class="string">""</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"执行完成。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharedLocation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 市</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 省</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 国家</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProvince</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvince</span><span class="params">(String province)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.province = province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCountry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> country;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCountry</span><span class="params">(String country)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.country = country;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">900761252.400 ±(99.9%) 836615744.826 ns/op</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Result &quot;cn.wkq.java.string.StringInternTest.stringTestWithOutIntern&quot;:</span><br><span class="line">  763138737.923 ±(99.9%) 930573867.253 ns/op [Average]</span><br><span class="line">  (min, avg, max) = (439268202.215, 763138737.923, 1017594855.563), stdev = 241667078.162</span><br><span class="line">  CI (99.9%): [≈ 0, 1693712605.176] (assumes normal distribution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Run complete. Total time: 00:03:34</span><br><span class="line"></span><br><span class="line">REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on</span><br><span class="line">why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial</span><br><span class="line">experiments, perform baseline and negative tests that provide experimental control, make sure</span><br><span class="line">the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.</span><br><span class="line">Do not assume the numbers tell you what you want them to tell.</span><br><span class="line"></span><br><span class="line">Benchmark                                 (count)  Mode  Cnt           Score           Error  Units</span><br><span class="line">StringInternTest.stringTestWithIntern       10000  avgt    5    13128831.111 ±   1999580.768  ns/op</span><br><span class="line">StringInternTest.stringTestWithIntern      100000  avgt    5   157188187.749 ±  99748905.878  ns/op</span><br><span class="line">StringInternTest.stringTestWithIntern     1000000  avgt    5  1813072765.600 ± 619163864.504  ns/op</span><br><span class="line">StringInternTest.stringTestWithOutIntern    10000  avgt    5     1511080.000 ±    872905.808  ns/op</span><br><span class="line">StringInternTest.stringTestWithOutIntern   100000  avgt    5     8238751.953 ±   1401387.637  ns/op</span><br><span class="line">StringInternTest.stringTestWithOutIntern  1000000  avgt    5   763138737.923 ± 930573867.253  ns/op</span><br><span class="line"></span><br><span class="line">Benchmark result is saved to result.json</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://mp.weixin.qq.com/s/_LHV1PNbbCV9_d9aWzKOyg" target="_blank" rel="noopener">性能调优必备利器之JMH</a><br>[2] <a href="http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/" target="_blank" rel="noopener">openjdk/jmh/samples/</a><br>[3] <a href="https://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="noopener">code-tools/jmh</a><br>[4] <a href="https://javadoc.io/doc/org.openjdk.jmh/jmh-core/latest/index.html" target="_blank" rel="noopener">jmh-core api</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 代码工具：jmh  JMH是一个Java工具，用于构建、运行和分析nano/micro/mili/macro基准，这些基准是用Java和其他针对JVM的语言编写的。&lt;br&gt; Code Tools: jmh  JMH is a Java harness for building, running, and analysing nano/micro/milli/macro benchmarks written in Java and other languages targetting the JVM.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;JMH解决了什么问题&quot;&gt;&lt;a href=&quot;#JMH解决了什么问题&quot; class=&quot;headerlink&quot; title=&quot;JMH解决了什么问题&quot;&gt;&lt;/a&gt;JMH解决了什么问题&lt;/h1&gt;&lt;h1 id=&quot;JMH怎么用&quot;&gt;&lt;a href=&quot;#JMH怎么用&quot; class=&quot;headerlink&quot; title=&quot;JMH怎么用&quot;&gt;&lt;/a&gt;JMH怎么用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;添加对应jar包&lt;/li&gt;
&lt;li&gt;根据实际情况配置参数&lt;/li&gt;
&lt;li&gt;编写代码运行&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h2&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.openjdk.jmh&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jmh-core&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.23&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.openjdk.jmh&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jmh-generator-annprocess&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.23&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://weikeqin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://weikeqin.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java-performance-tuning</title>
    <link href="http://weikeqin.com/2020/06/14/java-performance-tuning/"/>
    <id>http://weikeqin.com/2020/06/14/java-performance-tuning/</id>
    <published>2020-06-14T07:04:39.000Z</published>
    <updated>2020-06-14T14:25:51.889Z</updated>
    
    <content type="html"><![CDATA[<p>  Java 性能调优不像是学一门编程语言，无法通过直线式的思维来掌握和应用，它对于工程师的技术广度和深度都有着较高的要求。<br>  互联网时代，一个简单的系统就囊括了应用程序、数据库、容器、操作系统、网络等技术，线上一旦出现性能问题，就可能要你协调多方面组件去进行优化，这就是技术广度；而很多性能问题呢，又隐藏得很深，可能因为一个小小的代码，也可能因为线程池的类型选择错误…可归根结底考验的还是我们对这项技术的了解程度，这就是技术深度。</p><p>  我们调优的对象不是单一的应用服务，而是错综复杂的系统。应用服务的性能可能与操作系统、网络、数据库等组件相关，所以我们需要储备计算机组成原理、操作系统、网络协议以及数据库等基础知识。具体的性能问题往往还与传输、计算、存储数据等相关，那我们还需要储备数据结构、算法以及数学等基础知识。</p><p>  如果你们公司做的是 12306 网站，不做系统性能优化就上线，试试看会是什么情况。</p><p>  一款线上产品如果没有经过性能测试，那它就好比是一颗定时炸弹，你不知道它什么时候会出现问题，你也不清楚它能承受的极限在哪儿。</p><p>  好的系统性能调优不仅仅可以提高系统的性能，还能为公司节省资源</p><a id="more"></a><p>  有哪些参考因素可以体现系统的性能？上面我们讲到了在项目研发的各个阶段性能调优是如何介入的，其中多次讲到了性能指标，那么性能指标到底有哪些呢？在我们了解性能指标之前，我们先来了解下哪些计算机资源会成为系统的性能瓶颈。CPU：有的应用需要大量计算，他们会长时间、不间断地占用 CPU 资源，导致其他资源无法争夺到 CPU 而响应缓慢，从而带来系统性能问题。例如，代码递归导致的无限循环，正则表达式引起的回溯，JVM 频繁的 FULL GC，以及多线程编程造成的大量上下文切换等，这些都有可能导致 CPU 资源繁忙。内存：Java 程序一般通过 JVM 对内存进行分配管理，主要是用 JVM 中的堆内存来存储 Java 创建的对象。系统堆内存的读写速度非常快，所以基本不存在读写性能瓶颈。但是由于内存成本要比磁盘高，相比磁盘，内存的存储空间又非常有限。所以当内存空间被占满，对象无法回收时，就会导致内存溢出、内存泄露等问题。磁盘 I/O：磁盘相比内存来说，存储空间要大很多，但磁盘 I/O 读写的速度要比内存慢，虽然目前引入的 SSD 固态硬盘已经有所优化，但仍然无法与内存的读写速度相提并论。网络：网络对于系统性能来说，也起着至关重要的作用。如果你购买过云服务，一定经历过，选择网络带宽大小这一环节。带宽过低的话，对于传输数据比较大，或者是并发量比较大的系统，网络就很容易成为性能瓶颈。异常：Java 应用中，抛出异常需要构建异常栈，对异常进行捕获和处理，这个过程非常消耗系统性能。如果在高并发的情况下引发异常，持续地进行异常处理，那么系统的性能就会明显地受到影响。数据库：大部分系统都会用到数据库，而数据库的操作往往是涉及到磁盘 I/O 的读写。大量的数据库读写操作，会导致磁盘 I/O 性能瓶颈，进而导致数据库操作的延迟性。对于有大量数据库读写操作的系统来说，数据库的性能优化是整个系统的核心。锁竞争：在并发编程中，我们经常会需要多个线程，共享读写操作同一个资源，这个时候为了保持数据的原子性（即保证这个共享资源在一个线程写的时候，不被另一个线程修改），我们就会用到锁。锁的使用可能会带来上下文切换，从而给系统带来性能开销。JDK1.6 之后，Java 为了降低锁竞争带来的上下文切换，对 JVM 内部锁已经做了多次优化，例如，新增了偏向锁、自旋锁、轻量级锁、锁粗化、锁消除等。而如何合理地使用锁资源</p><p>  数据库响应时间：数据库操作所消耗的时间，往往是整个请求链中最耗时的；<br>  服务端响应时间：服务端包括 Nginx 分发的请求所消耗的时间以及服务端程序执行所消耗的时间；<br>  网络响应时间：这是网络传输时，网络硬件需要对传输的请求进行解析等操作所消耗的时间；<br>  客户端响应时间：对于普通的 Web、App 客户端来说，消耗时间是可以忽略不计的，但如果你的客户端嵌入了大量的逻辑处理，消耗的时间就有可能变长，从而成为系统的瓶颈。</p><p>  网络吞吐量不仅仅跟带宽有关系，还跟 CPU 的处理能力、网卡、防火墙、外部接口以及 I/O 等紧密关联。</p><p>  当系统压力上升时，你可以观察，系统响应时间的上升曲线是否平缓。这项指标能直观地反馈给你，系统所能承受的负载压力极限。</p><p>  QPS特指的一次查询请求，TPS是指每次处理事务请求，TPS包括了QPS，例如一个事务处理可能包括多个查询请求。</p><p>  当我们做性能测试时，我们的系统会运行得越来越快，后面的访问速度要比我们第一次访问的速度快上几倍。这是怎么回事呢？<br>  在 Java 编程语言和环境中，.java 文件编译成为 .class 文件后，机器还是无法直接运行 .class 文件中的字节码，需要通过解释器将字节码转换成本地机器码才能运行。<br>  为了节约内存和执行效率，代码最初被执行时，解释器会率先解释执行这段代码。<br>  随着代码被执行的次数增多，当虚拟机发现某个方法或代码块运行得特别频繁时，就会把这些代码认定为热点代码（Hot Spot Code）。<br>  为了提高热点代码的执行效率，在运行时，虚拟机将会通过即时编译器（JIT compiler，just-in-time compiler）把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，然后存储在内存中，之后每次运行代码时，直接从内存中获取即可。</p><p>  在完成性能测试之后，需要输出一份性能测试报告，帮我们分析系统性能测试的情况。<br>  其中测试结果需要包含测试接口的平均、最大和最小吞吐量，响应时间，服务器的 CPU、内存、I/O、网络 IO 使用率，JVM 的 GC 频率等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SharedLocation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String city;</span><br><span class="line">  <span class="keyword">private</span> String region;</span><br><span class="line">  <span class="keyword">private</span> String countryCode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Location</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> SharedLocation sharedLocation;</span><br><span class="line">  <span class="keyword">double</span> longitude;</span><br><span class="line">  <span class="keyword">double</span> latitude;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SharedLocation sharedLocation = new SharedLocation();</span><br><span class="line"></span><br><span class="line">sharedLocation.setCity(messageInfo.getCity().intern());    </span><br><span class="line">sharedLocation.setCountryCode(messageInfo.getRegion().intern());</span><br><span class="line">sharedLocation.setRegion(messageInfo.getCountryCode().intern());</span><br><span class="line"></span><br><span class="line">Location location = new Location();</span><br><span class="line">location.set(sharedLocation);</span><br><span class="line">location.set(messageInfo.getLongitude());</span><br><span class="line">location.set(messageInfo.getLatitude());</span><br></pre></td></tr></table></figure><p>严格来说，是静态常量池和运行时常量池，静态常量池是存放字符串字面量、符号引用以及类和方法的信息，而运行时常量池存放的是运行时一些直接引用。</p><p>运行时常量池是在类加载完成之后，将静态常量池中的符号引用值转存到运行时常量池中，类在解析之后，将符号引用替换成直接引用。</p><p>这两个常量池在JDK1.7版本之后，就移到堆内存中了，这里指的是物理空间，而逻辑上还是属于方法区（方法区是逻辑分区）。</p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式引擎<br>  DFA 自动机（Deterministic Final Automaton 确定有限状态自动机）<br>  NFA 自动机（Non deterministic Finite Automaton 非确定有限状态自动机）</p><p>构造 DFA 自动机的代价远大于 NFA 自动机，但 DFA 自动机的执行效率高于 NFA 自动机</p><p>  贪婪模式（Greedy）  顾名思义，就是在数量匹配中，如果单独使用 +、 ? 、* 或{min,max} 等量词，正则表达式会匹配尽可能多的内容。<br>    text=“abbc” regex=“ab{1,3}c”<br>  懒惰模式（Reluctant）在该模式下，正则表达式会尽可能少地重复匹配字符。如果匹配成功，它会继续匹配剩余的字符串。<br>    text=“abbc” regex=“ab{1,3}?c”<br>  独占模式（Possessive）同贪婪模式一样，独占模式一样会最大限度地匹配更多内容；不同的是，在独占模式下，匹配失败就会结束匹配，不会发生回溯问题。<br>    text=“abbc” regex=“ab{1,3}+bc”</p><blockquote><p> 在很多情况下使用懒惰模式和独占模式可以减少回溯的发生。</p></blockquote><blockquote><ol><li>少用贪婪模式，多用独占模式</li><li>减少分支选择   分支选择类型“(X|Y|Z)”的正则表达式会降低性能</li><li>减少捕获嵌套     一般一个 () 就是一个捕获组，捕获组可以进行嵌套。</li></ol></blockquote><p>  for(:)循环[这里指的不是for(;;)]是一个语法糖，这里会被解释为迭代器，在使用迭代器遍历时，ArrayList内部创建了一个内部迭代器iterator，在使用next()方法来取下一个元素时，会使用ArrayList里保存的一个用来记录List修改次数的变量modCount，与iterator保存了一个expectedModCount来表示期望的修改次数进行比较，如果不相等则会抛出异常；</p><p>  而在在foreach循环中调用list中的remove()方法，会走到fastRemove()方法，该方法不是iterator中的方法，而是ArrayList中的方法，在该方法只做了modCount++，而没有同步到expectedModCount。</p><p>  当再次遍历时，会先调用内部类iteator中的hasNext(),再调用next(),在调用next()方法时，会对modCount和expectedModCount进行比较，此时两者不一致，就抛出了ConcurrentModificationException异常。</p><p>  所以关键是用ArrayList的remove还是iterator中的remove。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  Java 性能调优不像是学一门编程语言，无法通过直线式的思维来掌握和应用，它对于工程师的技术广度和深度都有着较高的要求。&lt;br&gt;  互联网时代，一个简单的系统就囊括了应用程序、数据库、容器、操作系统、网络等技术，线上一旦出现性能问题，就可能要你协调多方面组件去进行优化，这就是技术广度；而很多性能问题呢，又隐藏得很深，可能因为一个小小的代码，也可能因为线程池的类型选择错误…可归根结底考验的还是我们对这项技术的了解程度，这就是技术深度。&lt;/p&gt;
&lt;p&gt;  我们调优的对象不是单一的应用服务，而是错综复杂的系统。应用服务的性能可能与操作系统、网络、数据库等组件相关，所以我们需要储备计算机组成原理、操作系统、网络协议以及数据库等基础知识。具体的性能问题往往还与传输、计算、存储数据等相关，那我们还需要储备数据结构、算法以及数学等基础知识。&lt;/p&gt;
&lt;p&gt;  如果你们公司做的是 12306 网站，不做系统性能优化就上线，试试看会是什么情况。&lt;/p&gt;
&lt;p&gt;  一款线上产品如果没有经过性能测试，那它就好比是一颗定时炸弹，你不知道它什么时候会出现问题，你也不清楚它能承受的极限在哪儿。&lt;/p&gt;
&lt;p&gt;  好的系统性能调优不仅仅可以提高系统的性能，还能为公司节省资源&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://weikeqin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://weikeqin.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>并发模型</title>
    <link href="http://weikeqin.com/2020/06/13/concurrent-model/"/>
    <id>http://weikeqin.com/2020/06/13/concurrent-model/</id>
    <published>2020-06-13T15:17:59.000Z</published>
    <updated>2020-06-14T03:54:36.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Actor"><a href="#1-Actor" class="headerlink" title="(1) Actor"></a>(1) Actor</h1><blockquote><p> Actor模型：面向对象原生的并发模型</p></blockquote><blockquote><p> Actor模型是高性能网络中处理并行任务的一种方法，解决并发问题的利器</p></blockquote><blockquote><p> Actor模型本质上是一种计算模型，基本的计算单元称为 Actor，在 Actor 模型里，一切都是 Actor，所有的计算都是在 Actor 中执行的，并且 Actor 之间是完全隔离的，不会共享任何变量。  </p></blockquote><blockquote><p> Actor模型解决了 传统编程假设与现代多线程、多CPU架构的现实之间的不匹配问题。</p><ol><li>消息传递的使用避免了锁和阻塞。  </li><li>Actor能够优化地处理错误情况。 </li></ol></blockquote><blockquote><p> Java 语言本身并不支持 Actor 模型，所以如果你想在 Java 语言里使用 Actor 模型，就需要借助第三方类库，目前能完备地支持 Actor 模型而且比较成熟的类库就是 Akka。</p></blockquote><a id="more"></a><h1 id="2-STM"><a href="#2-STM" class="headerlink" title="(2) STM"></a>(2) STM</h1><p>  软件事务内存（Software Transactional Memory，简称 STM）</p><blockquote><p> 传统的数据库事务，支持 4 个特性：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability），也就是大家常说的 ACID<br> STM 由于不涉及到持久化，所以只支持 ACI。 </p></blockquote><p>  <a href="https://github.com/pveentjer/Multiverse" target="_blank" rel="noopener">Multiverse</a><br>  <a href="http://www.codecommit.com/blog/scala/software-transactional-memory-in-scala" target="_blank" rel="noopener">software-transactional-memory-in-scala</a><br>  <a href="https://github.com/epam-mooc/stm-java" target="_blank" rel="noopener">stm-java</a></p><p><br></p><h1 id="3-协程"><a href="#3-协程" class="headerlink" title="(3) 协程"></a>(3) 协程</h1><blockquote><p> 我们可以把协程简单地理解为一种轻量级的线程。从操作系统的角度来看，线程是在内核态中调度的，而协程是在用户态调度的，所以相对于线程来说，协程切换的成本更低。协程虽然也有自己的栈，但是相比线程栈要小得多，典型的线程栈大小差不多有 1M，而协程栈的大小往往只有几 K 或者几十 K。所以，无论是从时间维度还是空间维度来看，协程都比线程轻量得多。</p></blockquote><blockquote><p> 支持协程的语言还是挺多的，例如 Golang、Python、Lua、Kotlin 等都支持协程。</p></blockquote><h2 id="3-1-golang中的协程"><a href="#3-1-golang中的协程" class="headerlink" title="(3.1) golang中的协程"></a>(3.1) golang中的协程</h2><blockquote><p> 在 Golang 中创建协程非常简单，在下面的示例代码中，要让 hello() 方法在一个新的协程中执行，只需要go hello(“World”) 这一行代码就搞定了。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"Hello "</span> + msg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//在新的协程中执行hello方法</span></span><br><span class="line">  <span class="keyword">go</span> hello(<span class="string">"World"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Run in main"</span>)</span><br><span class="line">    <span class="comment">//等待100毫秒让协程执行结束</span></span><br><span class="line">  time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="4-CSP模型"><a href="#4-CSP模型" class="headerlink" title="(4) CSP模型"></a>(4) CSP模型</h1><p>  CSP（Communicating Sequential Processes）</p><blockquote><p> 打印从 1 累加到 100 亿的结果，如果使用单个协程来计算，大概需要 4 秒多的时间。单个协程，只能用到 CPU 中的一个核，为了提高计算性能，我们可以用多个协程来并行计算，这样就能发挥多核的优势了。<br> 用了 4 个子协程来并行执行，这 4 个子协程分别计算[1, 25 亿]、(25 亿, 50 亿]、(50 亿, 75 亿]、(75 亿, 100 亿]，最后再在主协程中汇总 4 个子协程的计算结果。主协程要汇总 4 个子协程的计算结果，势必要和 4 个子协程之间通信，Golang 中协程之间通信推荐的是使用 channel，channel 你可以形象地理解为现实世界里的管道。</p></blockquote><pre><code class="go"><span class="keyword">import</span> (  <span class="string">"fmt"</span>  <span class="string">"time"</span>)<span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {    <span class="comment">// 变量声明</span>  <span class="keyword">var</span> result, i <span class="keyword">uint64</span>    <span class="comment">// 单个协程执行累加操作</span>  start := time.Now()  <span class="keyword">for</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000000000</span>; i++ {    result += i  }  <span class="comment">// 统计计算耗时</span>  elapsed := time.Since(start)  fmt.Printf(<span class="string">"执行消耗的时间为:"</span>, elapsed)  fmt.Println(<span class="string">", result:"</span>, result)    <span class="comment">// 4个协程共同执行累加操作</span>  start = time.Now()  ch1 := calc(<span class="number">1</span>, <span class="number">2500000000</span>)  ch2 := calc(<span class="number">2500000001</span>, <span class="number">5000000000</span>)  ch3 := calc(<span class="number">5000000001</span>, <span class="number">7500000000</span>)  ch4 := calc(<span class="number">7500000001</span>, <span class="number">10000000000</span>)    <span class="comment">// 汇总4个协程的累加结果</span>  result = &lt;-ch1 + &lt;-ch2 + &lt;-ch3 + &lt;-ch4  <span class="comment">// 统计计算耗时</span>  elapsed = time.Since(start)  fmt.Printf(<span class="string">"执行消耗的时间为:"</span>, elapsed)  fmt.Println(<span class="string">", result:"</span>, result)}<span class="comment">// 在协程中异步执行累加操作，累加结果通过channel传递</span><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(from <span class="keyword">uint64</span>, to <span class="keyword">uint64</span>)</span> &lt;-<span class="title">chan</span> <span class="title">uint64</span></span> {    <span class="comment">// channel用于协程间的通信</span>  ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">uint64</span>)    <span class="comment">// 在协程中执行累加操作</span>  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {    result := from    <span class="keyword">for</span> i := from + <span class="number">1</span>; i &lt;= to; i++ {      result += i    }        <span class="comment">// 将结果写入channel</span>    ch &lt;- result  }()    <span class="comment">// 返回结果是用于通信的channel</span>  <span class="keyword">return</span> ch}</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://time.geekbang.org/column/article/98903" target="_blank" rel="noopener">42 | Actor模型：面向对象原生的并发模型</a><br>[2] <a href="https://time.geekbang.org/column/article/99251" target="_blank" rel="noopener">43 | 软件事务内存：借鉴数据库的并发经验</a><br>[3] <a href="https://time.geekbang.org/column/article/99787" target="_blank" rel="noopener">44 | 协程：更轻量级的线程</a><br>[4] <a href="https://time.geekbang.org/column/article/100098" target="_blank" rel="noopener">45 | CSP模型：Golang的主力队员</a><br>[5] <a href="https://doc.akka.io/docs/akka/2.2/AkkaJava.pdf" target="_blank" rel="noopener">doc.akka.io/docs/akka/2.2/AkkaJava.pdf</a><br>[6] <a href="https://developer.lightbend.com/guides/akka-quickstart-java/" target="_blank" rel="noopener">guides/akka-quickstart-java</a><br>[7] <a href="https://developer.lightbend.com/start/?group=akka&amp;project=akka-quickstart-java" target="_blank" rel="noopener">akka-quickstart-java</a><br>[8] <a href="https://doc.akka.io/docs/akka/current/index.html" target="_blank" rel="noopener">doc.akka.io/docs/akka/current</a><br>[9] <a href="https://github.com/guobinhit/akka-guide" target="_blank" rel="noopener">akka-guide</a><br>[10] <a href="https://github.com/epam-mooc/stm-java" target="_blank" rel="noopener">stm-java</a><br>[11] <a href="http://www.codecommit.com/blog/scala/software-transactional-memory-in-scala" target="_blank" rel="noopener">software-transactional-memory-in-scala</a><br>[12] <a href="https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/" target="_blank" rel="noopener">notes-on-structured-concurrency-or-go-statement-considered-harmful</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Actor&quot;&gt;&lt;a href=&quot;#1-Actor&quot; class=&quot;headerlink&quot; title=&quot;(1) Actor&quot;&gt;&lt;/a&gt;(1) Actor&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; Actor模型：面向对象原生的并发模型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Actor模型是高性能网络中处理并行任务的一种方法，解决并发问题的利器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Actor模型本质上是一种计算模型，基本的计算单元称为 Actor，在 Actor 模型里，一切都是 Actor，所有的计算都是在 Actor 中执行的，并且 Actor 之间是完全隔离的，不会共享任何变量。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Actor模型解决了 传统编程假设与现代多线程、多CPU架构的现实之间的不匹配问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;消息传递的使用避免了锁和阻塞。  &lt;/li&gt;
&lt;li&gt;Actor能够优化地处理错误情况。 &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Java 语言本身并不支持 Actor 模型，所以如果你想在 Java 语言里使用 Actor 模型，就需要借助第三方类库，目前能完备地支持 Actor 模型而且比较成熟的类库就是 Akka。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="concurrent" scheme="http://weikeqin.com/categories/concurrent/"/>
    
    
      <category term="concurrent" scheme="http://weikeqin.com/tags/concurrent/"/>
    
      <category term="model" scheme="http://weikeqin.com/tags/model/"/>
    
  </entry>
  
  <entry>
    <title>akka笔记</title>
    <link href="http://weikeqin.com/2020/06/13/akka-notes/"/>
    <id>http://weikeqin.com/2020/06/13/akka-notes/</id>
    <published>2020-06-13T14:26:44.000Z</published>
    <updated>2020-06-14T03:57:03.276Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> Akka is a toolkit and runtime for building highly concurrent, distributed, and fault-tolerant event-driven applications on the JVM. Akka can be used with both Java and Scala. This guide introduces Akka by describing the Java version of the Hello World example. If you prefer to use Akka with Scala, switch to the Akka Quickstart with Scala guide.</p></blockquote><blockquote><p> Actors are the unit of execution in Akka. The Actor model is an abstraction that makes it easier to write correct concurrent, parallel and distributed systems. The Hello World example illustrates Akka basics. Within 30 minutes, you should be able to download and run the example and use this guide to understand how the example is constructed. This will get your feet wet, and hopefully inspire you to dive deeper into the wonderful sea of Akka!</p></blockquote><h1 id="解决了什么问题"><a href="#解决了什么问题" class="headerlink" title="解决了什么问题"></a>解决了什么问题</h1><blockquote><p> Akka是Actor模型的一种实现<br> Actor模型解决了 传统编程假设与现代多线程、多CPU架构的现实之间的不匹配问题。</p><ol><li>消息传递的使用避免了锁和阻塞。  </li><li>Actor能够优化地处理错误情况。 </li></ol></blockquote><blockquote><p> Usage of message passing avoids locking and blocking.<br> Actors handle error situations gracefully</p></blockquote><p><strong> OOP在构建苛刻需求的分布式系统会遇到的问题 </strong></p><blockquote><ol><li>并发情况下封装导致效率问题和死锁问题。</li><li>并发时共享内存失效(CPU缓存失效导致)导致效率低的问题。</li><li>调用栈导致的后台线程在异常时的通信问题以及后续问题。</li></ol></blockquote><blockquote><ol><li>The challenge of encapsulation</li><li>The illusion of shared memory on modern computer architectures</li><li>The illusion of a call stack</li></ol></blockquote><a id="more"></a><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><blockquote><p> After trying this example the comprehensive Getting Started Guide is a good next step to continue learning more about Akka.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">bogon:akka-quickstart-java weikeqin1$</span><br><span class="line">bogon:akka-quickstart-java weikeqin1$ mvn compile exec:exec</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/plugins/maven-compiler-plugin/3.5.1/maven-compiler-plugin-3.5.1.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/plugins/maven-compiler-plugin/3.5.1/maven-compiler-plugin-3.5.1.pom (10 kB at 15 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/plugins/maven-compiler-plugin/3.5.1/maven-compiler-plugin-3.5.1.jar</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/plugins/maven-compiler-plugin/3.5.1/maven-compiler-plugin-3.5.1.jar (50 kB at 138 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/mojo/exec-maven-plugin/1.6.0/exec-maven-plugin-1.6.0.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/mojo/exec-maven-plugin/1.6.0/exec-maven-plugin-1.6.0.pom (13 kB at 65 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/mojo/exec-maven-plugin/1.6.0/exec-maven-plugin-1.6.0.jar</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/mojo/exec-maven-plugin/1.6.0/exec-maven-plugin-1.6.0.jar (58 kB at 179 kB/s)</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ------------------------&lt; hello-akka-java:app &gt;-------------------------</span><br><span class="line">[INFO] Building app 1.0</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-actor-typed_2.13/2.6.6/akka-actor-typed_2.13-2.6.6.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-actor-typed_2.13/2.6.6/akka-actor-typed_2.13-2.6.6.pom (2.6 kB at 11 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-slf4j_2.13/2.6.6/akka-slf4j_2.13-2.6.6.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-slf4j_2.13/2.6.6/akka-slf4j_2.13-2.6.6.pom (2.9 kB at 7.9 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-actor-testkit-typed_2.13/2.6.6/akka-actor-testkit-typed_2.13-2.6.6.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-actor-testkit-typed_2.13/2.6.6/akka-actor-testkit-typed_2.13-2.6.6.pom (3.6 kB at 12 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-testkit_2.13/2.6.6/akka-testkit_2.13-2.6.6.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-testkit_2.13/2.6.6/akka-testkit_2.13-2.6.6.pom (3.5 kB at 10 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-actor-typed_2.13/2.6.6/akka-actor-typed_2.13-2.6.6.jar</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-testkit_2.13/2.6.6/akka-testkit_2.13-2.6.6.jar</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-actor-testkit-typed_2.13/2.6.6/akka-actor-testkit-typed_2.13-2.6.6.jar</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-slf4j_2.13/2.6.6/akka-slf4j_2.13-2.6.6.jar</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-slf4j_2.13/2.6.6/akka-slf4j_2.13-2.6.6.jar (17 kB at 38 kB/s)</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-testkit_2.13/2.6.6/akka-testkit_2.13-2.6.6.jar (261 kB at 328 kB/s)</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-actor-testkit-typed_2.13/2.6.6/akka-actor-testkit-typed_2.13-2.6.6.jar (315 kB at 382 kB/s)</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-actor-typed_2.13/2.6.6/akka-actor-typed_2.13-2.6.6.jar (1.2 MB at 1.1 MB/s)</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ app ---</span><br><span class="line">[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!</span><br><span class="line">[INFO] Copying 1 resource</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ app ---</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-api/2.7/plexus-compiler-api-2.7.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-api/2.7/plexus-compiler-api-2.7.pom (891 B at 3.2 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler/2.7/plexus-compiler-2.7.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler/2.7/plexus-compiler-2.7.pom (4.9 kB at 34 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-manager/2.7/plexus-compiler-manager-2.7.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-manager/2.7/plexus-compiler-manager-2.7.pom (711 B at 3.0 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-javac/2.7/plexus-compiler-javac-2.7.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-javac/2.7/plexus-compiler-javac-2.7.pom (792 B at 5.3 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compilers/2.7/plexus-compilers-2.7.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compilers/2.7/plexus-compilers-2.7.pom (1.4 kB at 3.1 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-api/2.7/plexus-compiler-api-2.7.jar</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-manager/2.7/plexus-compiler-manager-2.7.jar</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-javac/2.7/plexus-compiler-javac-2.7.jar</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-manager/2.7/plexus-compiler-manager-2.7.jar (4.7 kB at 30 kB/s)</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-javac/2.7/plexus-compiler-javac-2.7.jar (19 kB at 113 kB/s)</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-api/2.7/plexus-compiler-api-2.7.jar (26 kB at 90 kB/s)</span><br><span class="line">[INFO] Changes detected - recompiling the module!</span><br><span class="line">[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!</span><br><span class="line">[INFO] Compiling 4 source files to /Users/weikeqin1/Downloads/akka-quickstart-java/target/classes</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- exec-maven-plugin:1.6.0:exec (default-cli) @ app ---</span><br><span class="line">SLF4J: A number (1) of logging calls during the initialization phase have been intercepted and are</span><br><span class="line">SLF4J: now being replayed. These are subject to the filtering rules of the underlying logging system.</span><br><span class="line">SLF4J: See also http://www.slf4j.org/codes.html#replay</span><br><span class="line">[2020-06-13 22:44:03,567] [INFO] [akka.event.slf4j.Slf4jLogger] [helloakka-akka.actor.default-dispatcher-3] [] - Slf4jLogger started</span><br><span class="line">&gt;&gt;&gt; Press ENTER to exit &lt;&lt;&lt;</span><br><span class="line">[2020-06-13 22:44:03,660] [INFO] [com.example.Greeter] [helloakka-akka.actor.default-dispatcher-5] [akka://helloakka/user/greeter] - Hello Charles!</span><br><span class="line">[2020-06-13 22:44:03,663] [INFO] [com.example.GreeterBot] [helloakka-akka.actor.default-dispatcher-3] [akka://helloakka/user/Charles] - Greeting 1 for Charles</span><br><span class="line">[2020-06-13 22:44:03,663] [INFO] [com.example.Greeter] [helloakka-akka.actor.default-dispatcher-5] [akka://helloakka/user/greeter] - Hello Charles!</span><br><span class="line">[2020-06-13 22:44:03,663] [INFO] [com.example.GreeterBot] [helloakka-akka.actor.default-dispatcher-3] [akka://helloakka/user/Charles] - Greeting 2 for Charles</span><br><span class="line">[2020-06-13 22:44:03,663] [INFO] [com.example.Greeter] [helloakka-akka.actor.default-dispatcher-5] [akka://helloakka/user/greeter] - Hello Charles!</span><br><span class="line">[2020-06-13 22:44:03,664] [INFO] [com.example.GreeterBot] [helloakka-akka.actor.default-dispatcher-5] [akka://helloakka/user/Charles] - Greeting 3 for Charles</span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  23.459 s</span><br><span class="line">[INFO] Finished at: 2020-06-13T22:44:16+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">bogon:akka-quickstart-java weikeqin1$</span><br><span class="line">bogon:akka-quickstart-java weikeqin1$</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.ActorSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AkkaQuickstart</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//#actor-system</span></span><br><span class="line">    <span class="keyword">final</span> ActorSystem&lt;GreeterMain.SayHello&gt; greeterMain = ActorSystem.create(GreeterMain.create(), <span class="string">"helloakka"</span>);</span><br><span class="line">    <span class="comment">//#actor-system</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//#main-send-messages</span></span><br><span class="line">    greeterMain.tell(<span class="keyword">new</span> GreeterMain.SayHello(<span class="string">"Charles"</span>));</span><br><span class="line">    <span class="comment">//#main-send-messages</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">"&gt;&gt;&gt; Press ENTER to exit &lt;&lt;&lt;"</span>);</span><br><span class="line">      System.in.read();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      greeterMain.terminate();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.ActorRef;</span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.Behavior;</span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.javadsl.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #greeter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">AbstractBehavior</span>&lt;<span class="title">Greeter</span>.<span class="title">Greet</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Greet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String whom;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ActorRef&lt;Greeted&gt; replyTo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Greet</span><span class="params">(String whom, ActorRef&lt;Greeted&gt; replyTo)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.whom = whom;</span><br><span class="line">      <span class="keyword">this</span>.replyTo = replyTo;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Greeted</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String whom;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ActorRef&lt;Greet&gt; from;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Greeted</span><span class="params">(String whom, ActorRef&lt;Greet&gt; from)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.whom = whom;</span><br><span class="line">      <span class="keyword">this</span>.from = from;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #greeter</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      Greeted greeted = (Greeted) o;</span><br><span class="line">      <span class="keyword">return</span> Objects.equals(whom, greeted.whom) &amp;&amp;</span><br><span class="line">              Objects.equals(from, greeted.from);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Objects.hash(whom, from);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Greeted&#123;"</span> +</span><br><span class="line">              <span class="string">"whom='"</span> + whom + <span class="string">'\''</span> +</span><br><span class="line">              <span class="string">", from="</span> + from +</span><br><span class="line">              <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// #greeter</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Behavior&lt;Greet&gt; <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Behaviors.setup(Greeter::<span class="keyword">new</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Greeter</span><span class="params">(ActorContext&lt;Greet&gt; context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Receive&lt;Greet&gt; <span class="title">createReceive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> newReceiveBuilder().onMessage(Greet.class, <span class="keyword">this</span>::onGreet).build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Behavior&lt;Greet&gt; <span class="title">onGreet</span><span class="params">(Greet command)</span> </span>&#123;</span><br><span class="line">    getContext().getLog().info(<span class="string">"Hello &#123;&#125;!"</span>, command.whom);</span><br><span class="line">    <span class="comment">//#greeter-send-message</span></span><br><span class="line">    command.replyTo.tell(<span class="keyword">new</span> Greeted(command.whom, getContext().getSelf()));</span><br><span class="line">    <span class="comment">//#greeter-send-message</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #greeter</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.Behavior;</span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.javadsl.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreeterBot</span> <span class="keyword">extends</span> <span class="title">AbstractBehavior</span>&lt;<span class="title">Greeter</span>.<span class="title">Greeted</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Behavior&lt;Greeter.Greeted&gt; create(<span class="keyword">int</span> max) &#123;</span><br><span class="line">        <span class="keyword">return</span> Behaviors.setup(context -&gt; <span class="keyword">new</span> GreeterBot(context, max));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> max;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> greetingCounter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GreeterBot</span><span class="params">(ActorContext&lt;Greeter.Greeted&gt; context, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        <span class="keyword">this</span>.max = max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Receive&lt;Greeter.Greeted&gt; createReceive() &#123;</span><br><span class="line">        <span class="keyword">return</span> newReceiveBuilder().onMessage(Greeter.Greeted.class, <span class="keyword">this</span>::onGreeted).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Behavior&lt;Greeter.Greeted&gt; onGreeted(Greeter.Greeted message) &#123;</span><br><span class="line">        greetingCounter++;</span><br><span class="line">        getContext().getLog().info(<span class="string">"Greeting &#123;&#125; for &#123;&#125;"</span>, greetingCounter, message.whom);</span><br><span class="line">        <span class="keyword">if</span> (greetingCounter == max) &#123;</span><br><span class="line">            <span class="keyword">return</span> Behaviors.stopped();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            message.from.tell(<span class="keyword">new</span> Greeter.Greet(message.whom, getContext().getSelf()));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.ActorRef;</span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.Behavior;</span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.javadsl.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreeterMain</span> <span class="keyword">extends</span> <span class="title">AbstractBehavior</span>&lt;<span class="title">GreeterMain</span>.<span class="title">SayHello</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SayHello</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ActorRef&lt;Greeter.Greet&gt; greeter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Behavior&lt;SayHello&gt; <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Behaviors.setup(GreeterMain::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GreeterMain</span><span class="params">(ActorContext&lt;SayHello&gt; context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        <span class="comment">//#create-actors</span></span><br><span class="line">        greeter = context.spawn(Greeter.create(), <span class="string">"greeter"</span>);</span><br><span class="line">        <span class="comment">//#create-actors</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Receive&lt;SayHello&gt; <span class="title">createReceive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newReceiveBuilder().onMessage(SayHello.class, <span class="keyword">this</span>::onSayHello).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Behavior&lt;SayHello&gt; <span class="title">onSayHello</span><span class="params">(SayHello command)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//#create-actors</span></span><br><span class="line">        ActorRef&lt;Greeter.Greeted&gt; replyTo =</span><br><span class="line">                getContext().spawn(GreeterBot.create(<span class="number">3</span>), command.name);</span><br><span class="line">        greeter.tell(<span class="keyword">new</span> Greeter.Greet(command.name, replyTo));</span><br><span class="line">        <span class="comment">//#create-actors</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Actor class [cn.wkq.java.akka.AkkaDemo$HelloActor] must be subClass of akka.actor.Actor or akka.actor.IndirectActorProducer.</span><br><span class="line">at akka.actor.AbstractProps.validate(AbstractProps.scala:31)</span><br></pre></td></tr></table></figure><h1 id="Rferences"><a href="#Rferences" class="headerlink" title="Rferences"></a>Rferences</h1><p>[1] <a href="https://time.geekbang.org/column/article/98903" target="_blank" rel="noopener">42 | Actor模型：面向对象原生的并发模型</a><br>[2] <a href="https://doc.akka.io/docs/akka/current/index.html" target="_blank" rel="noopener">doc.akka.io/docs/akka/current</a><br>[3] <a href="https://github.com/guobinhit/akka-guide" target="_blank" rel="noopener">akka-guide</a><br>[4] <a href="https://doc.akka.io/docs/akka/current/typed/guide/actors-motivation.html" target="_blank" rel="noopener">Why modern systems need a new programming model</a><br>[5] <a href="https://doc.akka.io/docs/akka/current/typed/guide/actors-intro.html" target="_blank" rel="noopener">How the Actor Model Meets the Needs of Modern, Distributed Systems</a><br>[6] <a href="https://doc.akka.io/docs/akka/2.2/AkkaJava.pdf" target="_blank" rel="noopener">doc.akka.io/docs/akka/2.2/AkkaJava.pdf</a><br>[7] <a href="https://developer.lightbend.com/guides/akka-quickstart-java/" target="_blank" rel="noopener">guides/akka-quickstart-java</a><br>[8] <a href="https://developer.lightbend.com/start/?group=akka&amp;project=akka-quickstart-java" target="_blank" rel="noopener">akka-quickstart-java</a><br>[9] <a href="https://github.com/mpeltonen/sbt-idea" target="_blank" rel="noopener">sbt-idea</a><br>[10] <a href="https://blog.csdn.net/qq_35246620/article/details/79050895" target="_blank" rel="noopener">快速入门 Akka Java 指南</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; Akka is a toolkit and runtime for building highly concurrent, distributed, and fault-tolerant event-driven applications on the JVM. Akka can be used with both Java and Scala. This guide introduces Akka by describing the Java version of the Hello World example. If you prefer to use Akka with Scala, switch to the Akka Quickstart with Scala guide.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Actors are the unit of execution in Akka. The Actor model is an abstraction that makes it easier to write correct concurrent, parallel and distributed systems. The Hello World example illustrates Akka basics. Within 30 minutes, you should be able to download and run the example and use this guide to understand how the example is constructed. This will get your feet wet, and hopefully inspire you to dive deeper into the wonderful sea of Akka!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;解决了什么问题&quot;&gt;&lt;a href=&quot;#解决了什么问题&quot; class=&quot;headerlink&quot; title=&quot;解决了什么问题&quot;&gt;&lt;/a&gt;解决了什么问题&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; Akka是Actor模型的一种实现&lt;br&gt; Actor模型解决了 传统编程假设与现代多线程、多CPU架构的现实之间的不匹配问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;消息传递的使用避免了锁和阻塞。  &lt;/li&gt;
&lt;li&gt;Actor能够优化地处理错误情况。 &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Usage of message passing avoids locking and blocking.&lt;br&gt; Actors handle error situations gracefully&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt; OOP在构建苛刻需求的分布式系统会遇到的问题 &lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;并发情况下封装导致效率问题和死锁问题。&lt;/li&gt;
&lt;li&gt;并发时共享内存失效(CPU缓存失效导致)导致效率低的问题。&lt;/li&gt;
&lt;li&gt;调用栈导致的后台线程在异常时的通信问题以及后续问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;The challenge of encapsulation&lt;/li&gt;
&lt;li&gt;The illusion of shared memory on modern computer architectures&lt;/li&gt;
&lt;li&gt;The illusion of a call stack&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://weikeqin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://weikeqin.com/tags/java/"/>
    
      <category term="concurrent" scheme="http://weikeqin.com/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>jvm-config</title>
    <link href="http://weikeqin.com/2020/06/09/jvm-config/"/>
    <id>http://weikeqin.com/2020/06/09/jvm-config/</id>
    <published>2020-06-09T12:30:28.000Z</published>
    <updated>2020-06-20T15:27:13.519Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PrintFlagsFinal -version | grep HeapSize  <span class="comment"># 查看堆内存配置的默认值</span></span><br><span class="line">jmap -heap pid</span><br></pre></td></tr></table></figure><h1 id="常用的JVM配置"><a href="#常用的JVM配置" class="headerlink" title="常用的JVM配置"></a>常用的JVM配置</h1><p>  <code>-Dfile.encoding=UTF-8</code> 文件使用UTF-8编码<br>  <code>-Xms2g</code> 设置初始堆大小为2G<br>  <code>-Xmx2g</code> 设置最大堆大小为1G<br>  <code>-Xmn1g</code> 设置新生代大小为1G</p><p>  <code>-Xss256k</code>  设置每个线程的堆栈大小，和栈的深度和容器创建的最大线程数有关</p><p>  <code>-XX:LargePageSizeInBytes=128m</code>  内存页的大小不可设置过大， 会影响Perm的大小<br>  <code>-XX:MaxDirectMemorySize=536870912</code> </p><p>  <code>-XX:+UseFastAccessorMethods</code>  原始类型的快速优化</p><p>  <code>-XX:PetenureSizeThreshold=</code> 设置直接被分配到老年代的最大阀值 </p><p>  <code>-XX:+TraceClassLoading</code> 打印类加载信息</p><h1 id="gc日志信息"><a href="#gc日志信息" class="headerlink" title="gc日志信息"></a>gc日志信息</h1><p>  <code>-XX:+PrintGC</code>  用于垃圾收集时的信息打印   -verbosegc (which is equivalent to -XX:+PrintGC) sets the detail level of the log to fine.<br>  <code>-XX:+PrintGCDetails</code>  打印GC详细信息   ets the detail level to finer.<br>  <code>-XX:+PrintGCTimeStamps</code>  输出GC的时间戳（以基准时间的形式 245469.1 ）<br>  <code>-XX:+PrintGCDateStamps</code>  输出GC的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800）<br>  <code>-XX:+HeapDumpBeforeFullGC</code> FullGC前保存堆栈信息  测试环境使用，线上最好别用，小心磁盘被打满<br>  <code>-XX:+HeapDumpAfterFullGC</code>  FullGC后保存堆栈信息  测试环境使用，线上最好别用，小心磁盘被打满</p><p>  <code>-XX:+DisableExplicitGC</code>  禁止代码中显示调用GC<br>  <code>-Xloggc:filename</code>  gc日志保存到指定文件 把filename替换成 /home/admin/gc.log</p><p>  <code>-XX:+HeapDumpOnOutOfMemoryError</code> OOM后保存堆栈信息<br>  <code>-XX:-OmitStackTraceInFastThrow</code> 当大量抛出同样的异常的后，后面的异常输出将不打印堆栈<br>  <code>-XX:ErrorFile=logs/hs_err_pid%p.log</code> </p><h1 id="JIT-config"><a href="#JIT-config" class="headerlink" title="JIT config"></a>JIT config</h1><blockquote><p> JVM 的 JIT 机制的存在，如果某个函数被调用多次之后，JVM会尝试将其编译为机器码，从而提高执行速度。</p></blockquote><blockquote><p> 在 Java8 之前，HotSpot 集成了两个 JIT，用 C1 和 C2 来完成 JVM 中的即时编译。<br> 到了 Java9，AOT 编译器被引入。AOT 是在程序运行前进行的静态编译，这样就可以避免运行时的编译消耗和内存消耗，且 .class 文件通过 AOT 编译器是可以编译成 .so 的二进制文件的。<br> Java10，一个新的 JIT 编译器 Graal 被引入。Graal 是一个以 Java 为主要编程语言、面向 Java bytecode 的编译器。与用 C++ 实现的 C1 和 C2 相比，它的模块化更加明显，也更容易维护。Graal 既可以作为动态编译器，在运行时编译热点方法；也可以作为静态编译器，实现 AOT 编译。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#CompileThreshold must be between 0 and 268435455</span><br><span class="line">-XX:CompileThreshold=128</span><br></pre></td></tr></table></figure><blockquote><p> 方法调用计数器：用于统计方法被调用的次数<br> 方法调用计数器的默认阈值在 C1 模式下是 1500 次，在 C2 模式在是 10000 次，可通过 -XX:CompileThreshold 来设定；而在分层编译的情况下，-XX:CompileThreshold 指定的阈值将失效，此时将会根据当前待编译的方法数以及编译线程数来动态调整。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:OnStackReplacePercentage=10000</span><br></pre></td></tr></table></figure><p>回边计数器：用于统计一个方法中循环体代码执行的次数，</p><p>在字节码中遇到控制流向后跳转的指令称为“回边”（Back Edge），该值用于计算是否触发 C1 编译的阈值，在不开启分层编译的情况下，C1 默认为 13995，C2 默认为 10700，可通过 -XX: OnStackReplacePercentage=N 来设置；而在分层编译的情况下，-XX: OnStackReplacePercentage 指定的阈值同样会失效，此时将根据当前待编译的方法数以及编译线程数来动态调整。</p><p>在一些循环周期比较长的代码段中，当循环达到回边计数器阈值时，JVM 会认为这段是热点代码，JIT 编译器就会将这段代码编译成机器语言并缓存，在该循环时间段内，会直接将执行代码替换，执行缓存的机器语言。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:CICompilerCount=2</span><br></pre></td></tr></table></figure><p>经常执行的方法，默认情况下，方法体大小小于 325 字节的都会进行内联，我们可以通过 -XX:MaxFreqInlineSize=N 来设置大小值；<br>不是经常执行的方法，默认情况下，方法大小小于 35 字节才会进行内联，我们也可以通过 -XX:MaxInlineSize=N 来重置大小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintCompilation //在控制台打印编译过程信息</span><br><span class="line">-XX:+UnlockDiagnosticVMOptions //解锁对JVM进行诊断的选项参数。默认是关闭的，开启后支持一些特定参数对JVM进行诊断</span><br><span class="line">-XX:+PrintInlining //将内联方法打印出来</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="CMS垃圾回收器配置"><a href="#CMS垃圾回收器配置" class="headerlink" title="CMS垃圾回收器配置"></a>CMS垃圾回收器配置</h1><p>  Eden            –|<br>  Survior0 Space  —- Young Generation<br>  Survior1 Space  –|</p><p>  Old Generation<br>  Permanent Generation</p><p>  <code>-XX:+UseConcMarkSweepGC</code>    使用CMS垃圾收集器<br>  <code>-XX:+CMSParallelRemarkEnabled</code>  降低标记停顿<br>  <code>-XX:CMSFullGCsBeforeCompaction=*</code><br>  <code>-XX:+UseCMSCompactAtFullCollection</code>  在FullGC的时候 对年老代的压缩<br>  <code>-XX:CMSInitiatingOccupancyFraction=75</code>  CMS垃圾收集会在老年代被占用75%时被触发<br>  <code>-XX:+UseCMSInitiatingOccupancyOnly</code>  基于运行时收集的数据来启动CMS垃圾收集周期</p><h1 id="G1垃圾收集器配置"><a href="#G1垃圾收集器配置" class="headerlink" title="G1垃圾收集器配置"></a>G1垃圾收集器配置</h1><p>  Ende Space<br>  Survivor Space<br>  Oid Generation</p><table><thead><tr><th style="text-align:left">Option and Default Value</th><th style="text-align:left">描述</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left"><code>-XX:+UseG1GC</code></td><td style="text-align:left">使用G1垃圾收集器</td><td style="text-align:left">Use the Garbage First (G1) Collector</td></tr><tr><td style="text-align:left"><code>-XX:MaxGCPauseMillis=200</code></td><td style="text-align:left">设置G1收集过程目标时间，默认值200ms</td><td style="text-align:left">Sets a target for the maximum GC pause time. This is a soft goal, and the JVM will make its best effort to achieve it.</td></tr><tr><td style="text-align:left"><code>-XX:InitiatingHeapOccupancyPercent=30</code></td><td style="text-align:left">设置触发标记周期的 Java 堆占用率阈值。默认值是45%。这里的java堆占比指的是non_young_capacity_bytes，包括old+humongous</td><td style="text-align:left">Percentage of the (entire) heap occupancy to start a concurrent GC cycle. It is used by GCs that trigger a concurrent GC cycle based on the occupancy of the entire heap, not just one of the generations (e.g., G1). A value of 0 denotes ‘do constant GC cycles’. The default value is 45.</td></tr><tr><td style="text-align:left"><code>-XX:NewRatio=2</code></td><td style="text-align:left">新生代 老年代 比例</td><td style="text-align:left">Ratio of new/old generation sizes. The default value is 2.</td></tr><tr><td style="text-align:left"><code>-XX:SurvivorRatio=8</code></td><td style="text-align:left">Eden区 Survivor区 比例</td><td style="text-align:left">Ratio of eden/survivor space size. The default value is 8.</td></tr><tr><td style="text-align:left"><code>-XX:MaxTenuringThreshold=15</code></td><td style="text-align:left">新生代最大需要经历多少次GC晋升到老年代。</td><td style="text-align:left">Maximum value for tenuring threshold. The default value is 15.</td></tr><tr><td style="text-align:left"><code>-XX:ParallelGCThreads=2</code></td><td style="text-align:left">设置在垃圾回收器的并行阶段使用的线程数。</td><td style="text-align:left">Sets the number of threads used during parallel phases of the garbage collectors. The default value varies with the platform on which the JVM is running.</td></tr><tr><td style="text-align:left"><code>-XX:ConcGCThreads=2</code></td><td style="text-align:left">并发垃圾收集器将使用的线程数。</td><td style="text-align:left">Number of threads concurrent garbage collectors will use. The default value varies with the platform on which the JVM is running.</td></tr><tr><td style="text-align:left"><code>-XX:G1ReservePercent=10</code></td><td style="text-align:left">设置作为空闲空间的预留内存百分比，以降低目标空间溢出的风险</td><td style="text-align:left">Sets the amount of heap that is reserved as a false ceiling to reduce the possibility of promotion failure. The default value is 10.</td></tr><tr><td style="text-align:left"><code>-XX:G1HeapRegionSize=25</code></td><td style="text-align:left">设置Region大小</td><td style="text-align:left">With G1 the Java heap is subdivided into uniformly sized regions. This sets the size of the individual sub-divisions. The default value of this parameter is determined ergonomically based upon heap size. The minimum value is 1Mb and the maximum value is 32Mb.</td></tr></tbody></table><h2 id="G1-Log"><a href="#G1-Log" class="headerlink" title="G1 Log"></a>G1 Log</h2><p>  <code>-verbosegc</code> (which is equivalent to -XX:+PrintGC) sets the detail level of the log to fine.<br>  <code>-XX:+PrintGCDetails</code>  sets the detail level to finer.<br>  <code>-XX:+UnlockExperimentalVMOptions -XX:G1LogLevel=finest</code>  sets the detail level to its finest. Like finer but includes individual worker thread information.<br>  <code>-XX:+PrintGCTimeStamps</code>  Shows the elapsed time since the JVM started.<br>  <code>-XX:+PrintGCDateStamps</code>  Adds a time of day prefix to each entry.</p><h1 id="Lock-config"><a href="#Lock-config" class="headerlink" title="Lock config"></a>Lock config</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-XX:-UseBiasedLocking //关闭偏向锁</span><br><span class="line">-XX:+UseHeavyMonitors  //设置重量级锁</span><br><span class="line">-XX:-UseSpinning //参数关闭自旋锁优化(默认打开) </span><br><span class="line">-XX:PreBlockSpin //参数修改默认的自旋次数。JDK1.7后，去掉此参数，由jvm控制</span><br></pre></td></tr></table></figure><p> <code>-XX:-UseBiasedLocking</code>  关闭偏向锁</p><blockquote><p>在高并发场景下，当大量线程同时竞争同一个锁资源时，偏向锁就会被撤销，发生 stop the word 后， 开启偏向锁会带来更大的性能开销</p></blockquote><h1 id="XX-RestrictContended"><a href="#XX-RestrictContended" class="headerlink" title="-XX:-RestrictContended"></a>-XX:-RestrictContended</h1><blockquote><p> 避免伪共享<br> 多线程并发条件下，volite变量导致CPU缓存里的数据和主内存的数据不一致导致CPU缓存失效。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:-RestrictContended</span><br></pre></td></tr></table></figure><p>  避免伪共享是以牺牲内存为代价的</p><blockquote><p> 伪共享和 CPU 内部的 Cache 有关，Cache 内部是按照缓存行（Cache Line）管理的，缓存行的大小通常是 64 个字节；CPU 从内存中加载数据 X，会同时加载 X 后面（64-size(X)）个字节的数据。<br> 避免伪共享很简单，每个变量x独占一个缓存行、不共享缓存行就可以了，具体技术是缓存行填充。<br> 比如想让 变量x 独占一个缓存行，可以在 变量x 的前后各填充 64-size(x) 个字节，这样就一定能保证 变量x 独占一个缓存行。</p></blockquote><p>  由于伪共享问题如此重要，所以 Java 也开始重视它了，比如 Java 8 中，提供了避免伪共享的注解：@sun.misc.Contended，通过这个注解就能轻松避免伪共享（需要设置 JVM 参数 -XX:-RestrictContended）。不过避免伪共享是以牺牲内存为代价的</p><p><a href="https://time.geekbang.org/column/article/98134" target="_blank" rel="noopener">40 | 案例分析（三）：高性能队列Disruptor</a></p><h2 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h2><p>  逃逸分析（Escape Analysis）是判断一个对象是否被外部方法引用或外部线程访问的分析技术，编译器会根据逃逸分析的结果对代码进行优化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+DoEscapeAnalysis //开启逃逸分析（jdk1.8默认开启）</span><br><span class="line">-XX:-DoEscapeAnalysis //关闭逃逸分析</span><br></pre></td></tr></table></figure><h2 id="标量替换"><a href="#标量替换" class="headerlink" title="标量替换"></a>标量替换</h2><p>逃逸分析证明一个对象不会被外部访问，如果这个对象可以被拆分的话，当程序真正执行的时候可能不创建这个对象，而直接创建它的成员变量来代替。将对象拆分后，可以分配对象的成员变量在栈或寄存器上，原本的对象就无需分配内存空间了。这种编译优化就叫做标量替换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     TestInfo info = <span class="keyword">new</span> TestInfo();</span><br><span class="line">     info.id = <span class="number">1</span>;</span><br><span class="line">     info.count = <span class="number">99</span>;</span><br><span class="line">       ...<span class="comment">//to do something</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     id = <span class="number">1</span>;</span><br><span class="line">     count = <span class="number">99</span>;</span><br><span class="line">     ...<span class="comment">//to do something</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-XX:+EliminateLocks //开启锁消除（jdk1.8默认开启）</span><br><span class="line">-XX:-EliminateLocks //关闭锁消除</span><br><span class="line"></span><br><span class="line">-XX:+EliminateAllocations //开启标量替换（jdk1.8默认开启）</span><br><span class="line">-XX:-EliminateAllocations //关闭标量替换</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://docs.oracle.com/cd/E19159-01/819-3681/6n5srlhqc/index.html" target="_blank" rel="noopener">Chapter 4 Tuning the Java Runtime System</a><br>[2] <a href="https://panlw.github.io/15320998566522.html" target="_blank" rel="noopener">关键系统的JVM参数推荐(2018仲夏版)</a><br>[3] <a href="https://github.com/alibaba/arthas" target="_blank" rel="noopener">github.com/alibaba/arthas</a><br>[4] <a href="https://github.com/vipshop/vjtools" target="_blank" rel="noopener">github.com/vipshop/vjtools</a><br>[5] <a href="https://www.rowkey.me/blog/2017/03/23/java-profile-cheatsheet/" target="_blank" rel="noopener">JVM诊断调优CheatSheet</a><br>[6] <a href="https://aboullaite.me/understanding-jit-compiler-just-in-time-compiler/" target="_blank" rel="noopener">understanding-jit-compiler-just-in-time-compiler</a><br>[7] <a href="https://tech.meituan.com/2016/09/23/g1.html" target="_blank" rel="noopener">Java Hotspot G1 GC的一些关键技术</a><br>[8] <a href="https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/index.html" target="_blank" rel="noopener">Getting Started with the G1 Garbage Collector</a><br>[9] <a href="https://docs.oracle.com/javase/7/docs/technotes/tools/windows/java.html" target="_blank" rel="noopener">java</a><br>[10] <a href="https://stackoverflow.com/questions/51154464/should-heapdumpbeforefullgc-be-used-in-production-environment" target="_blank" rel="noopener">should-heapdumpbeforefullgc-be-used-in-production-environment</a><br>[11] <a href="http://ifeve.com/useful-jvm-flags-part-7-cms-collector/" target="_blank" rel="noopener">JVM实用参数（七）CMS收集器</a><br>[12]<a href="https://time.geekbang.org/column/article/101244" target="_blank" rel="noopener">12 | 多线程之锁优化（上）：深入了解Synchronized同步锁的优化方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java -XX:+PrintFlagsFinal -version | grep HeapSize  &lt;span class=&quot;comment&quot;&gt;# 查看堆内存配置的默认值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jmap -heap pid&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;常用的JVM配置&quot;&gt;&lt;a href=&quot;#常用的JVM配置&quot; class=&quot;headerlink&quot; title=&quot;常用的JVM配置&quot;&gt;&lt;/a&gt;常用的JVM配置&lt;/h1&gt;&lt;p&gt;  &lt;code&gt;-Dfile.encoding=UTF-8&lt;/code&gt; 文件使用UTF-8编码&lt;br&gt;  &lt;code&gt;-Xms2g&lt;/code&gt; 设置初始堆大小为2G&lt;br&gt;  &lt;code&gt;-Xmx2g&lt;/code&gt; 设置最大堆大小为1G&lt;br&gt;  &lt;code&gt;-Xmn1g&lt;/code&gt; 设置新生代大小为1G&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;-Xss256k&lt;/code&gt;  设置每个线程的堆栈大小，和栈的深度和容器创建的最大线程数有关&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;-XX:LargePageSizeInBytes=128m&lt;/code&gt;  内存页的大小不可设置过大， 会影响Perm的大小&lt;br&gt;  &lt;code&gt;-XX:MaxDirectMemorySize=536870912&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;  &lt;code&gt;-XX:+UseFastAccessorMethods&lt;/code&gt;  原始类型的快速优化&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;-XX:PetenureSizeThreshold=&lt;/code&gt; 设置直接被分配到老年代的最大阀值 &lt;/p&gt;
&lt;p&gt;  &lt;code&gt;-XX:+TraceClassLoading&lt;/code&gt; 打印类加载信息&lt;/p&gt;
&lt;h1 id=&quot;gc日志信息&quot;&gt;&lt;a href=&quot;#gc日志信息&quot; class=&quot;headerlink&quot; title=&quot;gc日志信息&quot;&gt;&lt;/a&gt;gc日志信息&lt;/h1&gt;&lt;p&gt;  &lt;code&gt;-XX:+PrintGC&lt;/code&gt;  用于垃圾收集时的信息打印   -verbosegc (which is equivalent to -XX:+PrintGC) sets the detail level of the log to fine.&lt;br&gt;  &lt;code&gt;-XX:+PrintGCDetails&lt;/code&gt;  打印GC详细信息   ets the detail level to finer.&lt;br&gt;  &lt;code&gt;-XX:+PrintGCTimeStamps&lt;/code&gt;  输出GC的时间戳（以基准时间的形式 245469.1 ）&lt;br&gt;  &lt;code&gt;-XX:+PrintGCDateStamps&lt;/code&gt;  输出GC的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800）&lt;br&gt;  &lt;code&gt;-XX:+HeapDumpBeforeFullGC&lt;/code&gt; FullGC前保存堆栈信息  测试环境使用，线上最好别用，小心磁盘被打满&lt;br&gt;  &lt;code&gt;-XX:+HeapDumpAfterFullGC&lt;/code&gt;  FullGC后保存堆栈信息  测试环境使用，线上最好别用，小心磁盘被打满&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;-XX:+DisableExplicitGC&lt;/code&gt;  禁止代码中显示调用GC&lt;br&gt;  &lt;code&gt;-Xloggc:filename&lt;/code&gt;  gc日志保存到指定文件 把filename替换成 /home/admin/gc.log&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;-XX:+HeapDumpOnOutOfMemoryError&lt;/code&gt; OOM后保存堆栈信息&lt;br&gt;  &lt;code&gt;-XX:-OmitStackTraceInFastThrow&lt;/code&gt; 当大量抛出同样的异常的后，后面的异常输出将不打印堆栈&lt;br&gt;  &lt;code&gt;-XX:ErrorFile=logs/hs_err_pid%p.log&lt;/code&gt; &lt;/p&gt;
&lt;h1 id=&quot;JIT-config&quot;&gt;&lt;a href=&quot;#JIT-config&quot; class=&quot;headerlink&quot; title=&quot;JIT config&quot;&gt;&lt;/a&gt;JIT config&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; JVM 的 JIT 机制的存在，如果某个函数被调用多次之后，JVM会尝试将其编译为机器码，从而提高执行速度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 在 Java8 之前，HotSpot 集成了两个 JIT，用 C1 和 C2 来完成 JVM 中的即时编译。&lt;br&gt; 到了 Java9，AOT 编译器被引入。AOT 是在程序运行前进行的静态编译，这样就可以避免运行时的编译消耗和内存消耗，且 .class 文件通过 AOT 编译器是可以编译成 .so 的二进制文件的。&lt;br&gt; Java10，一个新的 JIT 编译器 Graal 被引入。Graal 是一个以 Java 为主要编程语言、面向 Java bytecode 的编译器。与用 C++ 实现的 C1 和 C2 相比，它的模块化更加明显，也更容易维护。Graal 既可以作为动态编译器，在运行时编译热点方法；也可以作为静态编译器，实现 AOT 编译。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#CompileThreshold must be between 0 and 268435455&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-XX:CompileThreshold=128&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt; 方法调用计数器：用于统计方法被调用的次数&lt;br&gt; 方法调用计数器的默认阈值在 C1 模式下是 1500 次，在 C2 模式在是 10000 次，可通过 -XX:CompileThreshold 来设定；而在分层编译的情况下，-XX:CompileThreshold 指定的阈值将失效，此时将会根据当前待编译的方法数以及编译线程数来动态调整。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-XX:OnStackReplacePercentage=10000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;回边计数器：用于统计一个方法中循环体代码执行的次数，&lt;/p&gt;
&lt;p&gt;在字节码中遇到控制流向后跳转的指令称为“回边”（Back Edge），该值用于计算是否触发 C1 编译的阈值，在不开启分层编译的情况下，C1 默认为 13995，C2 默认为 10700，可通过 -XX: OnStackReplacePercentage=N 来设置；而在分层编译的情况下，-XX: OnStackReplacePercentage 指定的阈值同样会失效，此时将根据当前待编译的方法数以及编译线程数来动态调整。&lt;/p&gt;
&lt;p&gt;在一些循环周期比较长的代码段中，当循环达到回边计数器阈值时，JVM 会认为这段是热点代码，JIT 编译器就会将这段代码编译成机器语言并缓存，在该循环时间段内，会直接将执行代码替换，执行缓存的机器语言。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-XX:CICompilerCount=2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;经常执行的方法，默认情况下，方法体大小小于 325 字节的都会进行内联，我们可以通过 -XX:MaxFreqInlineSize=N 来设置大小值；&lt;br&gt;不是经常执行的方法，默认情况下，方法大小小于 35 字节才会进行内联，我们也可以通过 -XX:MaxInlineSize=N 来重置大小值&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-XX:+PrintCompilation //在控制台打印编译过程信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-XX:+UnlockDiagnosticVMOptions //解锁对JVM进行诊断的选项参数。默认是关闭的，开启后支持一些特定参数对JVM进行诊断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-XX:+PrintInlining //将内联方法打印出来&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://weikeqin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://weikeqin.com/tags/java/"/>
    
      <category term="jvm" scheme="http://weikeqin.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>java并发设计模式</title>
    <link href="http://weikeqin.com/2020/06/07/java-concurrent-design-pattern/"/>
    <id>http://weikeqin.com/2020/06/07/java-concurrent-design-pattern/</id>
    <published>2020-06-07T09:03:36.000Z</published>
    <updated>2020-06-13T03:49:41.381Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 多线程设计模式是前人解决并发问题的经验总结，当我们试图解决一个并发问题时，首选方案往往是使用匹配的设计模式，这样能避免走弯路。<br> 大家都熟悉设计模式，所以使用设计模式还能提升方案和代码的可理解性。</p></blockquote><blockquote><p>避免共享的设计模式<br><code>Immutability 模式</code>、<code>Copy-on-Write 模式</code> 和 <code>线程本地存储模式</code> 本质上都是为了避免共享，只是实现手段不同而已。</p></blockquote><blockquote><p> 多线程版本IF的设计模式<br> <code>Guarded Suspension 模式</code> 和 <code>Balking 模式</code> 都可以简单地理解为“多线程版本的 if”，但它们的区别在于前者会等待 if 条件变为真，而后者则不需要等待。</p></blockquote><blockquote><p> 三种最简单的分工模式<br> <code>Thread-Per-Message模式</code> 、 <code>Worker Thread 模式</code> 和 <code>生产者-消费者模式</code> 是三种最简单实用的多线程分工方法</p></blockquote><h1 id="1-Immutability-Pattern-不变性模式"><a href="#1-Immutability-Pattern-不变性模式" class="headerlink" title="(1) Immutability Pattern 不变性模式"></a>(1) Immutability Pattern 不变性模式</h1><blockquote><p> 解决并发问题，其实最简单的办法就是让共享变量只有读操作，而没有写操作。</p></blockquote><blockquote><p> 不变性（Immutability）模式。所谓不变性，简单来讲，就是对象一旦被创建之后，状态就不再发生变化。换句话说，就是变量一旦被赋值，就不允许修改了（没有写操作）；没有修改操作，也就是保持了不变性。</p></blockquote><blockquote><p> Java SDK 里很多类都具备不可变性。例如经常用到的 String 和 Long、Integer、Double 等基础类型的包装类都具备不可变性，这些对象的线程安全性都是靠不可变性来保证的。仔细翻看这些类的声明、属性和方法，你会发现它们都严格遵守不可变类的三点要求：类和属性都是 final 的，所有方法均是只读的。</p></blockquote><blockquote><p> Java所有的基础类型的包装类都不适合做锁，因为它们内部用到了享元模式，这会导致看上去私有的锁，其实是共有的。</p></blockquote><blockquote><p> 使用 Immutability 模式的注意事项在使用 Immutability 模式的时候，需要注意以下两点：</p><ol><li>对象的所有属性都是 final 的，并不能保证不可变性；</li><li>不可变对象也需要正确发布。 </li></ol></blockquote><blockquote><p> 在使用 Immutability 模式的时候一定要确认保持不变性的边界在哪里，是否要求属性对象也具备不可变性。<br> Foo对象是不变的，但是Foo对象的属性是可以变化的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> age=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> name=<span class="string">"abc"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Foo foo;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    foo.age=a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><a id="more"></a><blockquote><p> 不可变对象虽然是线程安全的，但是并不意味着引用这些不可变对象的对象就是线程安全的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Foo线程安全</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> age=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> name=<span class="string">"abc"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Bar线程不安全</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  Foo foo;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setFoo</span><span class="params">(Foo f)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.foo=f;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="2-Copy-on-Write-Parrent-写时复制模式"><a href="#2-Copy-on-Write-Parrent-写时复制模式" class="headerlink" title="(2) Copy-on-Write Parrent 写时复制模式"></a>(2) Copy-on-Write Parrent 写时复制模式</h1><blockquote><p> Java 里 String 这个类在实现 replace() 方法的时候，并没有更改原字符串里面 value[]数组的内容，而是创建了一个新字符串，这种方法在解决不可变对象的修改问题时经常用到。<br> Copy-on-Write，经常被缩写为 COW 或者 CoW，顾名思义就是写时复制。<br> 不可变对象的写操作往往都是使用 Copy-on-Write 方法解决的。</p></blockquote><blockquote><p> Java 提供的 Copy-on-Write 容器，由于在修改的同时会复制整个容器，所以在提升读操作性能的同时，是以内存复制为代价的。</p></blockquote><blockquote><p> CopyOnWriteArrayList 和 CopyOnWriteArraySet 这两个 Copy-on-Write 容器，它们背后的设计思想就是 Copy-on-Write；<br> 类Unix操作系统fork()函数<br> Docker 容器镜像的设计是 Copy-on-Write<br> 分布式源码管理系统 Git 背后的设计思想都有 Copy-on-Write<br> 函数式编程里面所有的修改操作都需要 Copy-on-Write 来解决 (按需复制)</p></blockquote><p>《Purely Functional Data Structures》</p><blockquote><p> Java 提供了 CopyOnWriteArrayList，为什么没有提供 CopyOnWriteLinkedList 呢？</p><ol><li>没有提供CopyOnWriteLinkedList是因为linkedlist的数据结构关系分散到每一个节点里面，对每一个节点的修改都存在竟态条件，需要同步才能保证一致性。arraylist就不一样，数组天然的拥有前驱后继的结构关系，对列表的增删，因为是copy on wirte，所以只需要cas操作数组对象就能够保证线程安全，效率上也能接受，更重要的是避免锁竞争带来的上下文切换消耗。有一点需要注意的是CopyOnWriteArrayList在使用上有数据不完整的时间窗口，要不要考虑需要根据具体场景定夺。</li><li>链表的新增删除压根就不需要复制，就算是在并发场景下采用锁的方式性能损耗都不大，因此也就没必要采用copy的方式了，更何况链表的操作可以采用分段锁、节点锁。所以没有CopyOnWriteLinkedList的主要原因是没有这个必要。</li><li>ArrayList 是用是数组实现的, 在内存上时一块连续的区域, 拷贝时效率比较高, 时间复杂度为 O(1)</li><li>LinkedList 是链表实现, 其数据是通过指针串联起来的, 并非一块连续的区域, 拷贝时必须要进行遍历操作, 效率比较低, 时间复杂度是 O(n)</li><li>CopyOnWriteLinkedList的链表结构读取效率比较低，就违背了读多写少的设计初衷。</li></ol></blockquote><h1 id="3-ThreadLocal-线程本地存储"><a href="#3-ThreadLocal-线程本地存储" class="headerlink" title="(3) ThreadLocal 线程本地存储"></a>(3) ThreadLocal 线程本地存储</h1><blockquote><p> 线程本地存储模式本质上是一种避免共享的方案，由于没有共享，所以自然也就没有并发问题。</p></blockquote><blockquote><p> 避免共享有两种方案，一种方案是将这个工具类作为局部变量使用，另外一种方案就是线程本地存储模式</p></blockquote><h1 id="4-Guarded-Suspension-模式"><a href="#4-Guarded-Suspension-模式" class="headerlink" title="(4) Guarded Suspension 模式"></a>(4) Guarded Suspension 模式</h1><blockquote><p> Guarded Suspension 模式本质上是一种等待唤醒机制的实现，只不过 Guarded Suspension 模式将其规范化了。</p></blockquote><blockquote><p> Guarded Suspension 模式也常被称作 Guarded Wait 模式、Spin Lock 模式（因为使用了 while 循环去等待），这些名字都很形象，不过它还有一个更形象的非官方名字：多线程版本的 if。</p></blockquote><h1 id="5-Balking模式"><a href="#5-Balking模式" class="headerlink" title="(5) Balking模式"></a>(5) Balking模式</h1><blockquote><p> Balking 模式和 Guarded Suspension 模式从实现上看似乎没有多大的关系，Balking 模式只需要用互斥锁就能解决，而 Guarded Suspension 模式则要用到管程这种高级的并发原语；</p></blockquote><blockquote><p> 从应用的角度来看，它们解决的都是“线程安全的 if”语义，不同之处在于，Guarded Suspension 模式会等待 if 条件为真，而 Balking 模式不会等待。</p></blockquote><h1 id="6-Thread-Per-Message模式"><a href="#6-Thread-Per-Message模式" class="headerlink" title="(6) Thread-Per-Message模式"></a>(6) Thread-Per-Message模式</h1><blockquote><p> 委托他人办理的方式，在并发编程领域被总结为一种设计模式，叫做 Thread-Per-Message 模式，简言之就是为每个任务分配一个独立的线程。这是一种最简单的分工方法。</p></blockquote><blockquote><p> 你委托代办人做事，往往是和代办人直接沟通的；对应到编程领域，其实现也是主线程直接创建了一个子线程，主子线程之间是可以直接通信的。</p></blockquote><blockquote><p> Thread-Per-Message 模式在 Java 领域并不是那么知名，根本原因在于 Java 语言里的线程是一个重量级的对象，为每一个任务创建一个线程成本太高，尤其是在高并发领域，基本就不具备可行性。</p></blockquote><blockquote><p> Thread-Per-Message 模式在实现的时候需要注意是否存在线程的频繁创建、销毁以及是否可能导致 OOM。</p></blockquote><blockquote><p> <code>Loom</code>项目里<code>Fiber</code>实现了java轻量级线程(用户态)   官网 <a href="https://wiki.openjdk.java.net/display/loom" target="_blank" rel="noopener">https://wiki.openjdk.java.net/display/loom</a> </p></blockquote><h1 id="7-Worker-Thread模式"><a href="#7-Worker-Thread模式" class="headerlink" title="(7) Worker Thread模式"></a>(7) Worker Thread模式</h1><blockquote><p> Worker Thread 模式类比的是工厂里车间工人的工作模式。</p></blockquote><blockquote><p> Worker Thread 模式能避免线程频繁创建、销毁的问题，而且能够限制线程的最大数量。</p></blockquote><blockquote><p> Java 语言里可以直接使用线程池来实现 Worker Thread 模式。<br> Worker Thread 模式的实现，需要注意潜在的线程死锁问题。<br> 共享线程池虽然能够提供线程池的使用效率，但一定要保证一个前提，那就是：任务之间没有依赖关系。</p></blockquote><h1 id="8-两阶段终止模式"><a href="#8-两阶段终止模式" class="headerlink" title="(8) 两阶段终止模式"></a>(8) 两阶段终止模式</h1><blockquote><p> 两阶段终止模式。顾名思义，就是将终止过程分成两个阶段，其中第一个阶段主要是线程 T1 向线程 T2发送终止指令，而第二阶段则是线程 T2响应终止指令。</p></blockquote><blockquote><p> Java 线程进入终止状态的前提是线程进入 RUNNABLE 状态，而实际上线程也可能处在休眠状态，也就是说，我们要想终止一个线程，首先要把线程的状态从休眠状态转换到 RUNNABLE 状态。<br> 如何做到呢？这个要靠 Java Thread 类提供的 interrupt() 方法，它可以将休眠状态的线程转换到 RUNNABLE 状态。<br> 线程转换到 RUNNABLE 状态之后，我们如何再将其终止呢？<br> RUNNABLE 状态转换到终止状态，优雅的方式是让 Java 线程自己执行完 run() 方法，所以一般我们采用的方法是设置一个标志位，然后线程会在合适的时机检查这个标志位，如果发现符合终止条件，则自动退出 run() 方法。<br>这个过程其实就是我们前面提到的第二阶段：响应终止指令。<br>综合上面这两点，我们能总结出终止指令，其实包括两方面内容：interrupt()方法和线程终止的标志位。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> </span>&#123;</span><br><span class="line">  <span class="comment">//线程终止标志位</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">boolean</span> terminated = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">  <span class="comment">//采集线程</span></span><br><span class="line">  Thread rptThread;</span><br><span class="line">  <span class="comment">//启动采集功能</span></span><br><span class="line">  <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//不允许同时启动多个采集线程</span></span><br><span class="line">    <span class="keyword">if</span> (started) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    started = <span class="keyword">true</span>;</span><br><span class="line">    terminated = <span class="keyword">false</span>;</span><br><span class="line">    rptThread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      <span class="keyword">while</span> (!terminated)&#123;</span><br><span class="line">        <span class="comment">//省略采集、回传实现</span></span><br><span class="line">        report();</span><br><span class="line">        <span class="comment">//每隔两秒钟采集、回传一次数据</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">          <span class="comment">//重新设置线程中断状态</span></span><br><span class="line">          Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//执行到此处说明线程马上终止</span></span><br><span class="line">      started = <span class="keyword">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    rptThread.start();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//终止采集功能</span></span><br><span class="line">  <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置中断标志位</span></span><br><span class="line">    terminated = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//中断线程rptThread</span></span><br><span class="line">    rptThread.interrupt();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> Java 领域用的最多的还是线程池，而不是手动地创建线程。那我们该如何优雅地终止线程池呢？<br> shutdown() 方法是一种很保守的关闭线程池的方法。线程池执行 shutdown() 后，就会拒绝接收新的任务，但是会等待线程池中正在执行的任务和已经进入阻塞队列的任务都执行完之后才最终关闭线程池。<br> 而 shutdownNow() 方法，相对就激进一些了，线程池执行 shutdownNow() 后，会拒绝接收新的任务，同时还会中断线程池中正在执行的任务，已经进入阻塞队列的任务也被剥夺了执行的机会，不过这些被剥夺执行机会的任务会作为 shutdownNow() 方法的返回值返回。</p></blockquote><h1 id="9-生产者-消费者模式"><a href="#9-生产者-消费者模式" class="headerlink" title="(9) 生产者-消费者模式"></a>(9) 生产者-消费者模式</h1><blockquote><p> 从架构设计的角度来看，生产者 - 消费者模式有一个很重要的优点，就是解耦。<br> 生产者 - 消费者模式还有一个重要的优点就是支持异步，并且能够平衡生产者和消费者的速度差异。</p></blockquote><blockquote><p> Java 线程池本质上就是用生产者 - 消费者模式实现的，所以每当使用线程池的时候，其实就是在应用生产者 - 消费者模式。</p></blockquote><blockquote><p> 线程池终止指定线程<br> 线程池在消费到毒丸时知道需要结束，将方法执行完，break循环体。</p></blockquote><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://time.geekbang.org/column/article/92856" target="_blank" rel="noopener">28 | Immutability模式：如何利用不变性解决并发问题？</a><br>[2] <a href="https://time.geekbang.org/column/article/93154" target="_blank" rel="noopener">29 | Copy-on-Write模式：不是延时策略的COW</a><br>[3] <a href="https://time.geekbang.org/column/article/93745" target="_blank" rel="noopener">30 | 线程本地存储模式：没有共享，就没有伤害</a><br>[4] <a href="https://time.geekbang.org/column/article/94097" target="_blank" rel="noopener">31 | Guarded Suspension模式：等待唤醒机制的规范实现</a><br>[5] <a href="https://time.geekbang.org/column/article/94604" target="_blank" rel="noopener">32 | Balking模式：再谈线程安全的单例模式</a><br>[6] <a href="https://time.geekbang.org/column/article/95098" target="_blank" rel="noopener">33 | Thread-Per-Message模式：最简单实用的分工方法</a><br>[7] <a href="https://time.geekbang.org/column/article/95525" target="_blank" rel="noopener">34 | Worker Thread模式：如何避免重复创建线程？</a><br>[8] <a href="https://time.geekbang.org/column/article/95847" target="_blank" rel="noopener">35 | 两阶段终止模式：如何优雅地终止线程？</a><br>[9] <a href="https://time.geekbang.org/column/article/96168" target="_blank" rel="noopener">36 | 生产者-消费者模式：用流水线思想提高效率</a><br>[10] <a href="https://time.geekbang.org/column/article/96736" target="_blank" rel="noopener">37 | 设计模式模块热点问题答疑</a><br>[11] 《图解 Java 多线程设计模式》 </p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 多线程设计模式是前人解决并发问题的经验总结，当我们试图解决一个并发问题时，首选方案往往是使用匹配的设计模式，这样能避免走弯路。&lt;br&gt; 大家都熟悉设计模式，所以使用设计模式还能提升方案和代码的可理解性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;避免共享的设计模式&lt;br&gt;&lt;code&gt;Immutability 模式&lt;/code&gt;、&lt;code&gt;Copy-on-Write 模式&lt;/code&gt; 和 &lt;code&gt;线程本地存储模式&lt;/code&gt; 本质上都是为了避免共享，只是实现手段不同而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 多线程版本IF的设计模式&lt;br&gt; &lt;code&gt;Guarded Suspension 模式&lt;/code&gt; 和 &lt;code&gt;Balking 模式&lt;/code&gt; 都可以简单地理解为“多线程版本的 if”，但它们的区别在于前者会等待 if 条件变为真，而后者则不需要等待。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 三种最简单的分工模式&lt;br&gt; &lt;code&gt;Thread-Per-Message模式&lt;/code&gt; 、 &lt;code&gt;Worker Thread 模式&lt;/code&gt; 和 &lt;code&gt;生产者-消费者模式&lt;/code&gt; 是三种最简单实用的多线程分工方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-Immutability-Pattern-不变性模式&quot;&gt;&lt;a href=&quot;#1-Immutability-Pattern-不变性模式&quot; class=&quot;headerlink&quot; title=&quot;(1) Immutability Pattern 不变性模式&quot;&gt;&lt;/a&gt;(1) Immutability Pattern 不变性模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 解决并发问题，其实最简单的办法就是让共享变量只有读操作，而没有写操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 不变性（Immutability）模式。所谓不变性，简单来讲，就是对象一旦被创建之后，状态就不再发生变化。换句话说，就是变量一旦被赋值，就不允许修改了（没有写操作）；没有修改操作，也就是保持了不变性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Java SDK 里很多类都具备不可变性。例如经常用到的 String 和 Long、Integer、Double 等基础类型的包装类都具备不可变性，这些对象的线程安全性都是靠不可变性来保证的。仔细翻看这些类的声明、属性和方法，你会发现它们都严格遵守不可变类的三点要求：类和属性都是 final 的，所有方法均是只读的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Java所有的基础类型的包装类都不适合做锁，因为它们内部用到了享元模式，这会导致看上去私有的锁，其实是共有的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 使用 Immutability 模式的注意事项在使用 Immutability 模式的时候，需要注意以下两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对象的所有属性都是 final 的，并不能保证不可变性；&lt;/li&gt;
&lt;li&gt;不可变对象也需要正确发布。 &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 在使用 Immutability 模式的时候一定要确认保持不变性的边界在哪里，是否要求属性对象也具备不可变性。&lt;br&gt; Foo对象是不变的，但是Foo对象的属性是可以变化的&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; name=&lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bar&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Foo foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo.age=a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://weikeqin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://weikeqin.com/tags/java/"/>
    
      <category term="pattern" scheme="http://weikeqin.com/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>java-thread</title>
    <link href="http://weikeqin.com/2020/06/06/java-thread/"/>
    <id>http://weikeqin.com/2020/06/06/java-thread/</id>
    <published>2020-06-06T09:40:31.000Z</published>
    <updated>2020-06-20T09:42:28.471Z</updated>
    
    <content type="html"><![CDATA[<p>  在Java中，创建对象，仅仅是在 JVM 的堆里分配一块内存，而创建一个线程，需要调用操作系统内核的 API，然后操作系统要为线程分配一系列的资源，成本很高，所以线程是一个重量级的对象，应该避免频繁创建和销毁。</p><p>  进程的运行空间一般分为用户态和内核态，用户态空间一般是进程应用运行空间，而内核态空间一般是指应用需要调用系统资源，应用不能再用户态空间直接调用系统资源，需要通过内核态来系统系统资源。</p><p>  内核线程（Kernel-Level Thread, KLT）是由操作系统内核支持的线程，内核通过调度器对线程进行调度，并负责完成线程的切换。</p><a id="more"></a><h1 id="操作系统线程生命周期"><a href="#操作系统线程生命周期" class="headerlink" title="操作系统线程生命周期"></a>操作系统线程生命周期</h1><h1 id="Java线程生命周期"><a href="#Java线程生命周期" class="headerlink" title="Java线程生命周期"></a>Java线程生命周期</h1><h1 id="线程实现模型"><a href="#线程实现模型" class="headerlink" title="线程实现模型"></a>线程实现模型</h1><p>  实现线程主要有三种方式：轻量级进程和内核线程一对一相互映射实现的 1:1 线程模型、用户线程和内核线程实现的 N:1 线程模型以及用户线程和轻量级进程混合实现的 N:M 线程模型。</p><h1 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h1><p>  cs（上下文切换每秒次数）指标已经接近了 60w ，平时的话最高 5w。再通过日志分析，我发现了大量带有 wait() 的 Exception，由此初步怀疑是大量线程处理不及时导致的，进一步锁定问题是连接池大小设置不合理。<br>  在并发程序中，并不是启动更多的线程就能让程序最大限度地并发执行。线程数量设置太小，会导致程序不能充分地利用系统资源；线程数量设置太大，又可能带来资源的过度竞争，导致上下文切换带来额外的系统开销。</p><p>  其实在单个处理器的时期，操作系统就能处理多线程并发任务。处理器给每个线程分配 CPU 时间片（Time Slice），线程在分配获得的时间片内执行任务。CPU 时间片是 CPU 分配给每个线程执行的时间段，一般为几十毫秒。在这么短的时间内线程互相切换，我们根本感觉不到，所以看上去就好像是同时进行的一样。</p><p>  时间片决定了一个线程可以连续占用处理器运行的时长。当一个线程的时间片用完了，或者因自身原因被迫暂停运行了，这个时候，另外一个线程（可以是同一个线程或者其它进程的线程）就会被操作系统选中，来占用处理器。这种一个线程被暂停剥夺使用权，另外一个线程被选中开始或者继续运行的过程就叫做上下文切换（Context Switch）。</p><p>  具体来说，一个线程被剥夺处理器的使用权而被暂停运行，就是“切出”；一个线程被选中占用处理器开始或者继续运行，就是“切入”。在这种切出切入的过程中，操作系统需要保存和恢复相应的进度信息，这个进度信息就是“上下文”了。</p><p>  那上下文都包括哪些内容呢？具体来说，它包括了寄存器的存储内容以及程序计数器存储的指令内容。CPU 寄存器负责存储已经、正在和将要执行的任务，程序计数器负责存储 CPU 正在执行的指令位置以及即将执行的下一条指令的位置。</p><p>  在当前 CPU 数量远远不止一个的情况下，操作系统将 CPU 轮流分配给线程任务，此时的上下文切换就变得更加频繁了，并且存在跨 CPU 上下文切换，比起单核上下文切换，跨核切换更加昂贵。</p><p>自发性上下文切换指线程由 Java 程序调用导致切出，在多线程编程中，执行调用以下方法或关键字，常常就会引发自发性上下文切换。sleep()wait()yield()join()park()synchronizedlock</p><p>  Synchronized 锁的竞争太激烈会导致锁升级为重量级锁，未抢到锁的线程会进入monitor，而monitor依赖于底层操作系统的mutex lock，获取锁时会发生用户态和内核态之间的切换，所以会发生进程间的上下文切换。</p><p>很多 JVM 垃圾回收器（serial 收集器、ParNew 收集器）在回收旧对象时，会产生内存碎片，从而需要进行内存整理，在这个过程中就需要移动存活的对象。而移动内存对象就意味着这些对象所在的内存地址会发生变化，因此在移动对象前需要暂停线程，在移动完成后需要再次唤醒该线程。因此减少 JVM 垃圾回收的频率可以有效地减少上下文切换。</p><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><p> Java 语言里，Java 线程是和操作系统线程一一对应的，这种做法本质上是将 Java 线程的调度权完全委托给操作系统，而操作系统在这方面非常成熟，所以这种做法的好处是稳定、可靠，但是也继承了操作系统线程的缺点：创建成本高。为了解决这个缺点，Java 并发包里提供了线程池等工具类。</p><p> 轻量级线程。这个方案在 Java 领域知名度并不高，但是在其他编程语言里却叫得很响，例如 Go 语言、Lua 语言里的协程，本质上就是一种轻量级的线程。轻量级的线程，创建的成本很低，基本上和创建一个普通对象的成本相似；并且创建的速度和内存占用相比操作系统线程至少有一个数量级的提升。</p><p> 相比线程，协程少了由于同步资源竞争带来的 CPU 上下文切换，I/O 密集型的应用比较适合使用，特别是在网络请求中，有较多的时间在等待后端响应，协程可以保证线程不会阻塞在等待网络响应中，充分利用了多核多线程的能力。</p><blockquote><p> 线程是通过共享内存来实现数据共享，而协程是使用了通信的方式来实现了数据共享，主要就是为了避免内存共享数据而带来的线程安全问题。</p></blockquote><blockquote><p> Java 语言目前也已经意识到轻量级线程的重要性了，OpenJDK 有个 Loom 项目，就是要解决 Java 语言的轻量级线程问题，在这个项目中，轻量级线程被叫做 Fiber。</p></blockquote><p>  <code>Loom</code>项目里<code>Fiber</code>实现了java轻量级线程(用户态)   官网 <a href="https://wiki.openjdk.java.net/display/loom" target="_blank" rel="noopener">https://wiki.openjdk.java.net/display/loom</a> </p><p>  <a href="https://github.com/kilim/kilim" target="_blank" rel="noopener">kilim</a></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://time.geekbang.org/column/article/90771" target="_blank" rel="noopener">22 | Executor与线程池：如何创建正确的线程池？</a><br>[2] <a href="https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/Thread.html" target="_blank" rel="noopener">java-14-Thread</a><br>[3] <a href="https://blog.csdn.net/qq_27035123/article/details/77651534" target="_blank" rel="noopener">Java线程与内核线程</a><br>[4] <a href="https://www.cnblogs.com/zhangxiaoguang/p/java_os_thread.html" target="_blank" rel="noopener">Java与线程</a><br>[5] <a href="https://zhuanlan.zhihu.com/p/61892830" target="_blank" rel="noopener">深入了解JVM—-线程实现的三种方式</a><br>[6] <a href="https://time.geekbang.org/column/article/95098" target="_blank" rel="noopener">33 | Thread-Per-Message模式：最简单实用的分工方法</a><br>[7] <a href="https://time.geekbang.org/column/article/104521" target="_blank" rel="noopener">19 | 如何用协程来优化多线程业务？</a><br>[8] <a href="https://wiki.openjdk.java.net/display/loom" target="_blank" rel="noopener">loom</a><br>[9] <a href="https://github.com/kilim/kilim" target="_blank" rel="noopener">kilim</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  在Java中，创建对象，仅仅是在 JVM 的堆里分配一块内存，而创建一个线程，需要调用操作系统内核的 API，然后操作系统要为线程分配一系列的资源，成本很高，所以线程是一个重量级的对象，应该避免频繁创建和销毁。&lt;/p&gt;
&lt;p&gt;  进程的运行空间一般分为用户态和内核态，用户态空间一般是进程应用运行空间，而内核态空间一般是指应用需要调用系统资源，应用不能再用户态空间直接调用系统资源，需要通过内核态来系统系统资源。&lt;/p&gt;
&lt;p&gt;  内核线程（Kernel-Level Thread, KLT）是由操作系统内核支持的线程，内核通过调度器对线程进行调度，并负责完成线程的切换。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://weikeqin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://weikeqin.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>jdk-14</title>
    <link href="http://weikeqin.com/2020/06/06/java-doc/"/>
    <id>http://weikeqin.com/2020/06/06/java-doc/</id>
    <published>2020-06-06T02:19:42.000Z</published>
    <updated>2020-06-21T01:57:29.225Z</updated>
    
    <content type="html"><![CDATA[<p>  <a href="https://docs.oracle.com/javase/tutorial/" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/</a><br>  <a href="https://docs.oracle.com/en/java/javase/index.html" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/index.html</a></p><p>  <a href="https://blogs.oracle.com/java-platform-group/" target="_blank" rel="noopener">https://blogs.oracle.com/java-platform-group/</a></p><p>  javase14文档  <a href="https://docs.oracle.com/en/java/javase/14/index.html" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/14/index.html</a><br>  <a href="https://docs.oracle.com/javacomponents/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javacomponents/index.html</a><br>  <a href="https://docs.oracle.com/en/java/javase/index.html" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/index.html</a><br>  <a href="https://docs.oracle.com/en/java/javase/13/" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/13/</a><br>  <a href="https://docs.oracle.com/en/java/javase/12/" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/12/</a><br>  <a href="https://docs.oracle.com/en/java/javase/11/" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/11/</a><br>  <a href="https://docs.oracle.com/javase/10/" target="_blank" rel="noopener">https://docs.oracle.com/javase/10/</a><br>  <a href="https://docs.oracle.com/javase/9/" target="_blank" rel="noopener">https://docs.oracle.com/javase/9/</a><br>  <a href="https://docs.oracle.com/javase/8/" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/</a><br>  <a href="https://docs.oracle.com/javase/7/docs/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/7/docs/index.html</a></p><p>  <a href="https://dzone.com/articles/jdk-14-records-text-blocks-and-more" target="_blank" rel="noopener">https://dzone.com/articles/jdk-14-records-text-blocks-and-more</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.oracle.com/javase/tutorial/&lt;/a&gt;&lt;br&gt;  &lt;a 
      
    
    </summary>
    
      <category term="java" scheme="http://weikeqin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://weikeqin.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>lock</title>
    <link href="http://weikeqin.com/2020/06/06/lock/"/>
    <id>http://weikeqin.com/2020/06/06/lock/</id>
    <published>2020-06-06T01:48:36.000Z</published>
    <updated>2020-06-20T03:21:17.482Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="Java中的锁"><a href="#Java中的锁" class="headerlink" title="Java中的锁"></a>Java中的锁</h1><h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h2><blockquote><p> 偏向锁主要用来优化同一线程多次申请同一个锁的竞争。</p></blockquote><blockquote><p> 在某些情况下，大部分时间是同一个线程竞争锁资源。</p><blockquote><p>例如，在创建一个线程并在线程中执行循环监听的场景下，或单线程操作一个线程安全集合时，同一线程每次都需要获取和释放锁，每次操作都会发生用户态与内核态的切换。<br>偏向锁的作用就是，当一个线程再次访问这个同步代码或方法时，该线程只需去对象头的 Mark Word 中去判断一下是否有偏向锁指向它的 ID，无需再进入 Monitor 去竞争对象了。</p></blockquote></blockquote><blockquote><p>当对象被当做同步锁并有一个线程抢到了锁时，锁标志位还是 01，“是否偏向锁”标志位设置为 1，并且记录抢到锁的线程 ID，表示进入偏向锁状态。一旦出现其它线程竞争锁资源时，偏向锁就会被撤销。偏向锁的撤销需要等待全局安全点，暂停持有该锁的线程，同时检查该线程是否还在执行该方法，如果是，则升级锁，反之则被其它线程抢占。</p></blockquote><h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h2><blockquote><p> 轻量级锁适用于线程交替执行同步块的场景，绝大部分的锁在整个同步周期内都不存在长时间的竞争。<br> 轻量级锁还使用了自旋锁来避免线程用户态与内核态的频繁切换，提高了系统性能；</p></blockquote><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><blockquote><p> 在锁竞争不激烈且锁占用时间非常短的场景下，自旋锁可以提高系统性能。</p></blockquote><blockquote><p> JDK1.7 开始，自旋锁默认启用，自旋次数由 JVM 设置决定。<br> CAS 重试操作意味着长时间地占用 CPU。</p></blockquote><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><blockquote><p> 乐观锁，在操作共享资源时，抱着乐观的态度进行，认为可以成功地完成操作。但实际上，当多个线程同时操作一个共享资源时，只有一个线程会成功，那么失败的线程呢？它们不会像悲观锁一样在操作系统中挂起，而仅仅是返回，并且系统允许失败的线程重试，也允许自动放弃退出操作。<br> 乐观锁相比悲观锁来说，不会带来死锁、饥饿等活性故障问题，线程间的相互影响也远远比悲观锁要小。<br> 乐观锁没有因竞争造成的系统开销，所以在性能上也是更胜一筹。</p></blockquote><blockquote><p> CAS 乐观锁在高并发写大于读的场景下，大部分线程的原子操作会失败，失败后的线程将会不断重试 CAS 原子操作，这样就会导致大量线程长时间地占用 CPU 资源，给系统带来很大的性能开销。<br> CAS 乐观锁在平常使用时比较受限，它只能保证单个变量操作的原子性</p></blockquote><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1]<a href="https://time.geekbang.org/column/article/101244" target="_blank" rel="noopener">12 | 多线程之锁优化（上）：深入了解Synchronized同步锁的优化方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Java中的锁&quot;&gt;&lt;a href=&quot;#Java中的锁&quot; class=&quot;headerlink&quot; title=&quot;Java中的锁&quot;&gt;&lt;/a&gt;Java中的锁&lt;/h1&gt;&lt;h2 id=&quot;偏向锁&quot;&gt;&lt;a href=&quot;#偏向锁&quot; class=&quot;
      
    
    </summary>
    
      <category term="lock" scheme="http://weikeqin.com/categories/lock/"/>
    
    
      <category term="lock" scheme="http://weikeqin.com/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>读写锁</title>
    <link href="http://weikeqin.com/2020/06/06/read-write-lock/"/>
    <id>http://weikeqin.com/2020/06/06/read-write-lock/</id>
    <published>2020-06-06T01:44:46.000Z</published>
    <updated>2020-06-06T01:47:36.996Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 读写锁，是一个广为使用的通用技术，无论是操作系统、数据库、编程语言、应用 等都有用到 </p></blockquote><blockquote><p> 所有的读写锁都遵守以下三条基本原则：</p><ol><li>允许多个线程同时读共享变量；</li><li>只允许一个线程写共享变量；</li><li>如果一个写线程正在执行写操作，此时禁止读线程读共享变量。</li></ol></blockquote><blockquote><p> 读写锁与互斥锁的一个重要区别就是读写锁允许多个线程同时读共享变量，而互斥锁是不允许的，这是读写锁在读多写少场景下性能优于互斥锁的关键。但读写锁的写操作是互斥的，当一个线程在写共享变量的时候，是不允许其他线程执行写操作和读操作。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 读写锁，是一个广为使用的通用技术，无论是操作系统、数据库、编程语言、应用 等都有用到 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 所有的读写锁都遵守以下三条基本原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;允许多个线程同时读共享变
      
    
    </summary>
    
      <category term="lock" scheme="http://weikeqin.com/categories/lock/"/>
    
    
      <category term="lock" scheme="http://weikeqin.com/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>redis高性能分析</title>
    <link href="http://weikeqin.com/2020/05/28/redis-high-performance-analysis/"/>
    <id>http://weikeqin.com/2020/05/28/redis-high-performance-analysis/</id>
    <published>2020-05-28T05:09:58.000Z</published>
    <updated>2020-07-05T15:55:15.274Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> redis高性能分析</p></blockquote><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>  redis为了达到高性能，对数据类型做了调整，更好的适用于高并发</p><blockquote><p> redis的源码相关文件如下：<br> t_hash.c, t_list.c, t_set.c, t_string.c, t_zset.c and t_stream.c contains the implementation of the Redis data types. They implement both an API to access a given data type, and the client commands implementations for these data types.</p><p> sds.c is the Redis string library, check <a href="http://github.com/antirez/sds" target="_blank" rel="noopener">http://github.com/antirez/sds</a> for more information.</p><p> dict.c is an implementation of a non-blocking hash table which rehashes incrementally.</p></blockquote><h2 id="SDS"><a href="#SDS" class="headerlink" title="SDS"></a>SDS</h2><p>  SDS使用C语言编写。C语言的字符串是用一个以<code>\0</code>结尾的char[]表示。<br>  但是为什么不直接使用C语言字符串。<br>  C语言字符串的缺点：</p><ol><li>获取字符串长度每次需要遍历char[]数组，时间复杂度O(n)</li><li>修改字符串忘记分配内存容易造成缓冲区溢出 (buffer overflow) 。</li><li><p>修改字符串需要重新分配内存，设计系统调用。</p><p>SDS优点</p></li><li>获取字符串长度时间复杂度O(1) 。</li><li>通过封装，避免了直接操作C语言字符串忘记分配内存导致的内存泄露。</li><li><p>减少修改字符串时内存分配次数。</p><p>空间预分配  惰性空间释放</p><p>二进制安全<br>SDS的buf保存的是二进制数组</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">free</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  redis里的key是保存了字符串的SDS<br>  redis里的value</p><a id="more"></a><h3 id="SDS实现"><a href="#SDS实现" class="headerlink" title="SDS实现"></a>SDS实现</h3><p>  代码引用自  <a href="https://github.com/antirez/sds" target="_blank" rel="noopener">sds</a></p><p>  <code>sds.h</code>  <a href="https://github.com/redis-io/redis/blob/6.0/src/sds.h" target="_blank" rel="noopener">redis/src/sds.h</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __SDS_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SDS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_MAX_PREALLOC (1024*1024)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">char</span> *SDS_NOINIT;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> *sds;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Note: sdshdr5 is never used, we just access the flags byte directly.</span></span><br><span class="line"><span class="comment"> * However is here to document the layout of type 5 SDS strings. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr5</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags; <span class="comment">/* 3 lsb of type, and 5 msb of string length */</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr8</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint8_t</span> len; <span class="comment">/* used */</span></span><br><span class="line">    <span class="keyword">uint8_t</span> alloc; <span class="comment">/* excluding the header and null terminator */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags; <span class="comment">/* 3 lsb of type, 5 unused bits */</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr16</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint16_t</span> len; <span class="comment">/* used */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> alloc; <span class="comment">/* excluding the header and null terminator */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags; <span class="comment">/* 3 lsb of type, 5 unused bits */</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr32</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> len; <span class="comment">/* used */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> alloc; <span class="comment">/* excluding the header and null terminator */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags; <span class="comment">/* 3 lsb of type, 5 unused bits */</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr64</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint64_t</span> len; <span class="comment">/* used */</span></span><br><span class="line">    <span class="keyword">uint64_t</span> alloc; <span class="comment">/* excluding the header and null terminator */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags; <span class="comment">/* 3 lsb of type, 5 unused bits */</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  可以看到 sds 有 sdshdr5 sdshdr8 sdshdr16 sdshdr32 sdshdr64， sdshdr5 is never used</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>  链表的优点是在任意位置增加、修改、删除节点只有O(1)的时间复杂度。而且不需要连续的内存。<br>  缺点是不支持根据下标随机访问，需要遍历链表，所以访问指定元素时时间复杂度是O(N)</p><p>  链表提供了高效的重排能力，以及顺序节点的访问。</p><p>  redis 链表键、发布与订阅、慢查询、监视器也用到了链表。</p><p>  <code>adlist.h</code>  <a href="https://github.com/redis-io/redis/blob/6.0/src/adlist.h" target="_blank" rel="noopener">redis/src/adlist.h</a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* adlist.h - A generic doubly linked list implementation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">prev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="keyword">void</span> *value;</span><br><span class="line">&#125; listNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">listIter</span> &#123;</span></span><br><span class="line">    listNode *next;</span><br><span class="line">    <span class="keyword">int</span> direction;</span><br><span class="line">&#125; listIter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line">    listNode *head;</span><br><span class="line">    listNode *tail;</span><br><span class="line">    <span class="keyword">void</span> *(*dup)(<span class="keyword">void</span> *ptr);</span><br><span class="line">    <span class="keyword">void</span> (*<span class="built_in">free</span>)(<span class="keyword">void</span> *ptr);</span><br><span class="line">    <span class="keyword">int</span> (*match)(<span class="keyword">void</span> *ptr, <span class="keyword">void</span> *key);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> len;</span><br><span class="line">&#125; <span class="built_in">list</span>;</span><br></pre></td></tr></table></figure></p><p>  每个<code>链表节点</code>由一个<code>listNode</code>结构表示，保存了指向前置节点、后置节点的指针。<br>  每个<code>链表</code>由一个<code>list</code>结构表示，保存了头结点、尾节点、链表的长度 等参数<br>  链表的头结点的前置节点、尾节点的后置节点都指向NULL，所以redis链表是无环链表。<br>  <code>list</code>结构里使用void*指针保存节点值，所以链表支持多种数据类型</p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>  redis数据库底层就是用字典实现的。<br>  hash结构底层也是用字典实现的。</p><p>  redis字典底层使用哈希表实现。</p><h3 id="字典实现"><a href="#字典实现" class="headerlink" title="字典实现"></a>字典实现</h3><p>  <code>dict.h::dictht</code>    <a href="https://github.com/redis-io/redis/blob/6.0/src/dict.h" target="_blank" rel="noopener">redis/src/dict.h</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Hash Tables Implementation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This file implements in memory hash tables with insert/del/replace/find/</span></span><br><span class="line"><span class="comment"> * get-random-element operations. Hash tables will auto resize if needed</span></span><br><span class="line"><span class="comment"> * tables of power of two in size are used, collisions are handled by</span></span><br><span class="line"><span class="comment"> * chaining. See the source code for more information... :)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __DICT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __DICT_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DICT_OK 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DICT_ERR 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unused arguments generate annoying warnings... */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DICT_NOTUSED(V) ((void) V)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *key;</span><br><span class="line">    <span class="keyword">void</span> *val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; dictEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictType</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span> <span class="params">(*hashFunction)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *key)</span></span>;</span><br><span class="line">    <span class="keyword">void</span> *(*keyDup)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *key);</span><br><span class="line">    <span class="keyword">void</span> *(*valDup)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *obj);</span><br><span class="line">    <span class="keyword">int</span> (*keyCompare)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *key1, <span class="keyword">const</span> <span class="keyword">void</span> *key2);</span><br><span class="line">    <span class="keyword">void</span> (*keyDestructor)(<span class="keyword">void</span> *privdata, <span class="keyword">void</span> *key);</span><br><span class="line">    <span class="keyword">void</span> (*valDestructor)(<span class="keyword">void</span> *privdata, <span class="keyword">void</span> *obj);</span><br><span class="line">&#125; dictType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is our hash table structure. Every dictionary has two of this as we</span></span><br><span class="line"><span class="comment"> * implement incremental rehashing, for the old to the new table. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line">    dictEntry **table;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> size;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> used;</span><br><span class="line">&#125; dictht;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line">    dictType *type;</span><br><span class="line">    <span class="keyword">void</span> *privdata;</span><br><span class="line">    dictht ht[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> rehashidx; <span class="comment">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class="line">    <span class="keyword">int</span> iterators; <span class="comment">/* number of iterators currently running */</span></span><br><span class="line">&#125; dict;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If safe is set to 1 this is a safe iteartor, that means, you can call</span></span><br><span class="line"><span class="comment"> * dictAdd, dictFind, and other functions against the dictionary even while</span></span><br><span class="line"><span class="comment"> * iterating. Otherwise it is a non safe iterator, and only dictNext()</span></span><br><span class="line"><span class="comment"> * should be called while iterating. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictIterator</span> &#123;</span></span><br><span class="line">    dict *d;</span><br><span class="line">    <span class="keyword">int</span> table, index, safe;</span><br><span class="line">    dictEntry *entry, *nextEntry;</span><br><span class="line">&#125; dictIterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is the initial size of every hash table */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DICT_HT_INITIAL_SIZE     4</span></span><br></pre></td></tr></table></figure><p>可以看到 </p><p>  哈希表结构<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This is our hash table structure. Every dictionary has two of this as we</span></span><br><span class="line"><span class="comment"> * implement incremental rehashing, for the old to the new table. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line">    dictEntry **table;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> size;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> used;</span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure></p><blockquote><p> table 代表 哈希表数组<br> size 代表 哈希表大小<br> sizemask 代表 哈希表大小掩码，用于计算索引值<br> used 代表 该哈希表已有的元素个数</p></blockquote><p>  哈希表节点，用来存储每个key和value<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *key;</span><br><span class="line">    <span class="keyword">void</span> *val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line">    dictType *type;</span><br><span class="line">    <span class="keyword">void</span> *privdata;</span><br><span class="line">    dictht ht[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> rehashidx; <span class="comment">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class="line">    <span class="keyword">int</span> iterators; <span class="comment">/* number of iterators currently running */</span></span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure><p>  根据源码可以看到redis自定义了hash函数，<br>  哈希冲突时使用链地址法，<br>  扩容时新建一个哈希表<br>  在对哈希表进行扩容或缩容操作时，会把哈希表的键值对rehash到新哈希表里，这个rehash过程是渐进式完成的。</p><h2 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h2><h1 id="对象-redisObject"><a href="#对象-redisObject" class="headerlink" title="对象 redisObject"></a>对象 redisObject</h1><p>  使用redisObject对象的好处</p><ol><li>可以根据不同的使用场景，为对象设置多种不同的数据结构实现，从而优化对象在不同场景下的使用效率。</li><li>在回收内存时，直接使用对象</li><li>通过引用</li></ol><p>  可以在执行命令前根据对象的类型判断一个对象是否可以执行给定的命令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * Data types</span></span><br><span class="line"><span class="comment"> *----------------------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* A redis object, that is a type able to hold a string / list / set */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The actual Redis Object */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_LRU_CLOCK_MAX ((1<span class="meta-string">&lt;&lt;21)-1) /* Max value of obj-&gt;lru */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_LRU_CLOCK_RESOLUTION 10 <span class="comment">/* LRU clock resolution in seconds */</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> type:<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> storage:<span class="number">2</span>;     <span class="comment">/* REDIS_VM_MEMORY or REDIS_VM_SWAPPING */</span></span><br><span class="line">    <span class="keyword">unsigned</span> encoding:<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> lru:<span class="number">22</span>;        <span class="comment">/* lru time (relative to server.lruclock) */</span></span><br><span class="line">    <span class="keyword">int</span> refcount;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line">    <span class="comment">/* VM fields are only allocated if VM is active, otherwise the</span></span><br><span class="line"><span class="comment">     * object allocation function will just allocate</span></span><br><span class="line"><span class="comment">     * sizeof(redisObjct) minus sizeof(redisObjectVM), so using</span></span><br><span class="line"><span class="comment">     * Redis without VM active will not have any overhead. */</span></span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://redis.io/documentation" target="_blank" rel="noopener">redis.io/documentation</a><br>[1] <a href="https://redis.io/topics/data-types" target="_blank" rel="noopener">redis.io/topics/data-types</a><br>[2] <a href="https://redis.io/topics/data-types-intro" target="_blank" rel="noopener">redis.io/topics/data-types-intr</a><br>[3] <a href="https://github.com/antirez/redis-doc" target="_blank" rel="noopener">redis-doc</a><br>[4] <a href="https://mp.weixin.qq.com/s/U7I5mW-dueVSFUS7LW3ziQ" target="_blank" rel="noopener">10万+QPS 真的只是因为单线程和基于内存？</a><br>[5] 《Redis设计与实现》 黄健宏<br>[6] <a href="https://redis.io/topics/internals-sds" target="_blank" rel="noopener">redis.io/topics/internals-sds</a><br>[7] [github.com/antirez/sds github.com/antirez/sds )</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; redis高性能分析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h1&gt;&lt;p&gt;  redis为了达到高性能，对数据类型做了调整，更好的适用于高并发&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; redis的源码相关文件如下：&lt;br&gt; t_hash.c, t_list.c, t_set.c, t_string.c, t_zset.c and t_stream.c contains the implementation of the Redis data types. They implement both an API to access a given data type, and the client commands implementations for these data types.&lt;/p&gt;
&lt;p&gt; sds.c is the Redis string library, check &lt;a href=&quot;http://github.com/antirez/sds&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://github.com/antirez/sds&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt; dict.c is an implementation of a non-blocking hash table which rehashes incrementally.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;SDS&quot;&gt;&lt;a href=&quot;#SDS&quot; class=&quot;headerlink&quot; title=&quot;SDS&quot;&gt;&lt;/a&gt;SDS&lt;/h2&gt;&lt;p&gt;  SDS使用C语言编写。C语言的字符串是用一个以&lt;code&gt;\0&lt;/code&gt;结尾的char[]表示。&lt;br&gt;  但是为什么不直接使用C语言字符串。&lt;br&gt;  C语言字符串的缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取字符串长度每次需要遍历char[]数组，时间复杂度O(n)&lt;/li&gt;
&lt;li&gt;修改字符串忘记分配内存容易造成缓冲区溢出 (buffer overflow) 。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改字符串需要重新分配内存，设计系统调用。&lt;/p&gt;
&lt;p&gt;SDS优点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;获取字符串长度时间复杂度O(1) 。&lt;/li&gt;
&lt;li&gt;通过封装，避免了直接操作C语言字符串忘记分配内存导致的内存泄露。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;减少修改字符串时内存分配次数。&lt;/p&gt;
&lt;p&gt;空间预分配  惰性空间释放&lt;/p&gt;
&lt;p&gt;二进制安全&lt;br&gt;SDS的buf保存的是二进制数组&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sdshdr&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  redis里的key是保存了字符串的SDS&lt;br&gt;  redis里的value&lt;/p&gt;
    
    </summary>
    
      <category term="redis" scheme="http://weikeqin.com/categories/redis/"/>
    
    
      <category term="cache" scheme="http://weikeqin.com/tags/cache/"/>
    
      <category term="redis" scheme="http://weikeqin.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis高性能实践</title>
    <link href="http://weikeqin.com/2020/05/26/redis-high-performance-practice/"/>
    <id>http://weikeqin.com/2020/05/26/redis-high-performance-practice/</id>
    <published>2020-05-26T02:28:15.000Z</published>
    <updated>2020-06-07T01:59:51.585Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 在压测的时候看了一下缓存监控，看到监控上的数字震惊了，单分片每秒的出流量172MB。从来没想到过性能可以这么高。(优化前的)<br> 分享一些高性能的知识点吧。</p></blockquote><h1 id="1-大多数情况存储的时候推荐使用byte"><a href="#1-大多数情况存储的时候推荐使用byte" class="headerlink" title="(1) 大多数情况存储的时候推荐使用byte"></a>(1) 大多数情况存储的时候推荐使用byte</h1><p>  <a href="https://redis.io/topics/data-types" target="_blank" rel="noopener">redis-data-types</a><br>  <a href="https://stackoverflow.com/questions/51306134/redis-value-as-byte-vs-plain-string" target="_blank" rel="noopener">redis-value-as-byte-vs-plain-string</a><br>  <a href="https://github.com/eishay/jvm-serializers/wiki" target="_blank" rel="noopener">jvm-serializers</a></p><blockquote><p>string类型 redis底层存储的都是二进制，所以redis是二进制安全的(binary safe)<br> 看代码的话你会发现redis存储的时候用的都是 byte[]<br> Redis Strings are binary safe, this means that a Redis string can contain any kind of data, for instance a JPEG image or a serialized Ruby object.</p></blockquote><p>  对于存取对象，大多数情况建议使用 <code>set(final byte[] key, final byte[] value)</code>  <code>get(final byte[] key)</code><br>  对于直接存储字符串的，建议直接使用 <code>set(final String key, final String value)</code>  <code>get(final String key)</code></p><h1 id="2-使用mset-mget"><a href="#2-使用mset-mget" class="headerlink" title="(2) 使用mset mget"></a>(2) 使用mset mget</h1><p> <a href="https://redis.io/commands/mset" target="_blank" rel="noopener">mset</a><br> <a href="https://redis.io/commands/mget" target="_blank" rel="noopener">mget</a></p><h1 id="3-批量处理时优化成一次请求"><a href="#3-批量处理时优化成一次请求" class="headerlink" title="(3) 批量处理时优化成一次请求"></a>(3) 批量处理时优化成一次请求</h1><blockquote><p> 批处理时可以使用 Pipeline 一次处理，减少网络开销</p></blockquote><a id="more"></a><!--<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param map</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public List&lt;Object&gt; batchSet(Map&lt;String, String&gt; map) &#123;</span><br><span class="line">    Pipeline pipeline = jedis.pipelined();</span><br><span class="line">    for (Map.Entry&lt;String, String&gt; e : map.entrySet()) &#123;</span><br><span class="line">        pipeline.set(e.getKey(), e.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    return pipeline.syncAndReturnAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param keys</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public List&lt;String&gt; batchGet(List&lt;String&gt; keys) &#123;</span><br><span class="line">    List&lt;String&gt; result = new ArrayList&lt;&gt;(keys.size());</span><br><span class="line">    List&lt;Response&lt;String&gt;&gt; responses = new ArrayList&lt;&gt;(keys.size());</span><br><span class="line"></span><br><span class="line">    Pipeline pipeline = jedis.pipelined();</span><br><span class="line">    for (String key : keys) &#123;</span><br><span class="line">        responses.add(pipeline.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">    pipeline.sync();</span><br><span class="line"></span><br><span class="line">    for (Response&lt;String&gt; resp : responses) &#123;</span><br><span class="line">        result.add(resp.get());</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–&gt;</p><h1 id="4-合理设计每一对Key的Value大小"><a href="#4-合理设计每一对Key的Value大小" class="headerlink" title="(4) 合理设计每一对Key的Value大小"></a>(4) 合理设计每一对Key的Value大小</h1><blockquote><p> 合理设计每一对Key的Value大小，原则是让每次网络包控制在一定大小，减少通信次数。<br> 这个需要根据具体的情况去设置。</p></blockquote><h1 id="5"><a href="#5" class="headerlink" title="(5)"></a>(5)</h1><p>  info可以看到所有库的key数量</p><p>  dbsize则是当前库key的数量</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://redis.io/documentation">redis.io/documentation</a><br>[1] <a href="https://redis.io/topics/data-types">redis.io/topics/data-types</a><br>[2] <a href="https://redis.io/topics/data-types-intro">redis.io/topics/data-types-intr</a><br>[3] <a href="https://github.com/antirez/redis-doc">redis-doc</a><br>[4] <a href="https://redis.io/topics/ldb">Redis Lua scripts debugger</a><br>[5] <a href="https://mp.weixin.qq.com/s/Yzv88PCDBstFFj0qIzTkJA">掌握这些 Redis 技巧，百亿数据量不在话下！</a><br>[6] <a href="https://blog.csdn.net/eng63538505/article/details/74670902">redis的两种存储方式string和byte对比</a><br>[7] <a href="https://mp.weixin.qq.com/s/6G3iuEtBOxvp-gVi_OZe9g">Redis规范你应该了解一下</a></p>-->]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 在压测的时候看了一下缓存监控，看到监控上的数字震惊了，单分片每秒的出流量172MB。从来没想到过性能可以这么高。(优化前的)&lt;br&gt; 分享一些高性能的知识点吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-大多数情况存储的时候推荐使用byte&quot;&gt;&lt;a href=&quot;#1-大多数情况存储的时候推荐使用byte&quot; class=&quot;headerlink&quot; title=&quot;(1) 大多数情况存储的时候推荐使用byte&quot;&gt;&lt;/a&gt;(1) 大多数情况存储的时候推荐使用byte&lt;/h1&gt;&lt;p&gt;  &lt;a href=&quot;https://redis.io/topics/data-types&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redis-data-types&lt;/a&gt;&lt;br&gt;  &lt;a href=&quot;https://stackoverflow.com/questions/51306134/redis-value-as-byte-vs-plain-string&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redis-value-as-byte-vs-plain-string&lt;/a&gt;&lt;br&gt;  &lt;a href=&quot;https://github.com/eishay/jvm-serializers/wiki&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jvm-serializers&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;string类型 redis底层存储的都是二进制，所以redis是二进制安全的(binary safe)&lt;br&gt; 看代码的话你会发现redis存储的时候用的都是 byte[]&lt;br&gt; Redis Strings are binary safe, this means that a Redis string can contain any kind of data, for instance a JPEG image or a serialized Ruby object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  对于存取对象，大多数情况建议使用 &lt;code&gt;set(final byte[] key, final byte[] value)&lt;/code&gt;  &lt;code&gt;get(final byte[] key)&lt;/code&gt;&lt;br&gt;  对于直接存储字符串的，建议直接使用 &lt;code&gt;set(final String key, final String value)&lt;/code&gt;  &lt;code&gt;get(final String key)&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-使用mset-mget&quot;&gt;&lt;a href=&quot;#2-使用mset-mget&quot; class=&quot;headerlink&quot; title=&quot;(2) 使用mset mget&quot;&gt;&lt;/a&gt;(2) 使用mset mget&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://redis.io/commands/mset&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mset&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://redis.io/commands/mget&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mget&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-批量处理时优化成一次请求&quot;&gt;&lt;a href=&quot;#3-批量处理时优化成一次请求&quot; class=&quot;headerlink&quot; title=&quot;(3) 批量处理时优化成一次请求&quot;&gt;&lt;/a&gt;(3) 批量处理时优化成一次请求&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 批处理时可以使用 Pipeline 一次处理，减少网络开销&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="redis" scheme="http://weikeqin.com/categories/redis/"/>
    
    
      <category term="cache" scheme="http://weikeqin.com/tags/cache/"/>
    
      <category term="redis" scheme="http://weikeqin.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis数据类型</title>
    <link href="http://weikeqin.com/2020/05/25/redis-data-types/"/>
    <id>http://weikeqin.com/2020/05/25/redis-data-types/</id>
    <published>2020-05-25T06:25:03.000Z</published>
    <updated>2020-06-05T15:31:49.009Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> Redis is not a plain key-value store, it is actually a data structures server, supporting different kinds of values. What this means is that, while in traditional key-value stores you associate string keys to string values, in Redis the value is not limited to a simple string, but can also hold more complex data structures. The following is the list of all the data structures supported by Redis, which will be covered separately in this tutorial:</p></blockquote><h1 id="redis-data-types"><a href="#redis-data-types" class="headerlink" title="redis data types"></a>redis data types</h1><blockquote><p> Binary-safe strings.<br> Lists: collections of string elements sorted according to the order of insertion. They are basically linked lists.<br> Sets: collections of unique, unsorted string elements.<br> Sorted sets, similar to Sets but where every string element is associated to a floating number value, called score. The elements are always taken sorted by their score, so unlike Sets it is possible to retrieve a range of elements (for example you may ask: give me the top 10, or the bottom 10).<br> Hashes, which are maps composed of fields associated with values. Both the field and the value are strings. This is very similar to Ruby or Python hashes.<br> Bit arrays (or simply bitmaps): it is possible, using special commands, to handle String values like an array of bits: you can set and clear individual bits, count all the bits set to 1, find the first set or unset bit, and so forth.<br> HyperLogLogs: this is a probabilistic data structure which is used in order to estimate the cardinality of a set. Don’t be scared, it is simpler than it seems… See later in the HyperLogLog section of this tutorial.<br> Streams: append-only collections of map-like entries that provide an abstract log data type. They are covered in depth in the Introduction to Redis Streams.</p></blockquote><h1 id="Redis-keys"><a href="#Redis-keys" class="headerlink" title="Redis keys"></a>Redis keys</h1><blockquote><p> Redis的key可以是任意类型，可以是字符串，还可以是图片，还可以是空字符串<br> Redis的key是二进制安全的，底层存储用的byte[]<br> 建议key不要太大<br> 建议key不要太小，太小会比较省内存，但是可读性、可维护性较差。<br> 尝试坚持一个模式。 建议使用 object-type:id，比如 <code>user:1000</code><br> redis允许最大的key大小为 512MB</p></blockquote><a id="more"></a><blockquote><p> 官方原文如下:<br> Redis keys are binary safe, this means that you can use any binary sequence as a key, from a string like “foo” to the content of a JPEG file. The empty string is also a valid key.<br> A few other rules about keys:<br> Very long keys are not a good idea. For instance a key of 1024 bytes is a bad idea not only memory-wise, but also because the lookup of the key in the dataset may require several costly key-comparisons. Even when the task at hand is to match the existence of a large value, hashing it (for example with SHA1) is a better idea, especially from the perspective of memory and bandwidth.<br> Very short keys are often not a good idea. There is little point in writing “u1000flw” as a key if you can instead write “user:1000:followers”. The latter is more readable and the added space is minor compared to the space used by the key object itself and the value object. While short keys will obviously consume a bit less memory, your job is to find the right balance.<br> Try to stick with a schema. For instance “object-type:id” is a good idea, as in “user:1000”. Dots or dashes are often used for multi-word fields, as in “comment:1234:reply.to” or “comment:1234:reply-to”.<br> The maximum allowed key size is 512 MB.</p></blockquote><h1 id="Redis-Strings"><a href="#Redis-Strings" class="headerlink" title="Redis Strings"></a>Redis Strings</h1><blockquote><p> Values can be strings (including binary data) of every kind, for instance you can store a jpeg image inside a value. A value can’t be bigger than 512 MB.</p></blockquote><p> string 可以用 set get 命令 </p><blockquote><p> set k v<br> get k </p></blockquote><blockquote><p> set counter 100<br> incr counter<br> incrby counter 50<br> decr counter 1<br> decrby counter 10 </p></blockquote><blockquote><p> incr 是原子性的<br> What does it mean that INCR is atomic? That even multiple clients issuing INCR against the same key will never enter into a race condition. </p></blockquote><blockquote><p> getset mycount “0”<br> mset a 10 b 20 c 30<br> mget a b c</p></blockquote><blockquote><p> set myKey wkq<br> exit myKey<br> type myKey<br> del myKey </p></blockquote><blockquote><p> set key wkq<br> expire key 5</p></blockquote><h1 id="Redis-Lists"><a href="#Redis-Lists" class="headerlink" title="Redis Lists"></a>Redis Lists</h1><blockquote><p> Redis lists are implemented via Linked Lists.<br> Redis Lists are implemented with linked lists because for a database system it is crucial to be able to add elements to a very long list in a very fast way. Another strong advantage, as you’ll see in a moment, is that Redis Lists can be taken at constant length in constant time.</p></blockquote><h1 id="Redis-expires"><a href="#Redis-expires" class="headerlink" title="Redis expires"></a>Redis expires</h1><p> <a href="https://redis.io/commands/expire" target="_blank" rel="noopener">EXPIRE key seconds</a></p><blockquote><p> Set a timeout on key. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is often said to be volatile in Redis terminology.<br> The timeout will only be cleared by commands that delete or overwrite the contents of the key, including DEL, SET, GETSET and all the *STORE commands. This means that all the operations that conceptually alter the value stored at the key without replacing it with a new one will leave the timeout untouched. For instance, incrementing the value of a key with INCR, pushing a new value into a list with LPUSH, or altering the field value of a hash with HSET are all operations that will leave the timeout untouched.<br> The timeout can also be cleared, turning the key back into a persistent key, using the PERSIST command.<br> If a key is renamed with RENAME, the associated time to live is transferred to the new key name.</p></blockquote><p>Expire accuracy<br>In Redis 2.4 the expire might not be pin-point accurate, and it could be between zero to one seconds out.<br>Since Redis 2.6 the expire error is from 0 to 1 milliseconds.</p><p>Expires and persistence<br>Keys expiring information is stored as absolute Unix timestamps (in milliseconds in case of Redis version 2.6 or greater). This means that the time is flowing even when the Redis instance is not active.<br>For expires to work well, the computer time must be taken stable. If you move an RDB file from two computers with a big desync in their clocks, funny things may happen (like all the keys loaded to be expired at loading time).<br>Even running instances will always check the computer clock, so for instance if you set a key with a time to live of 1000 seconds, and then set your computer time 2000 seconds in the future, the key will be expired immediately, instead of lasting for 1000 seconds.</p><p>How Redis expires keys<br>Redis keys are expired in two ways: a passive way, and an active way.</p><p>A key is passively expired simply when some client tries to access it, and the key is found to be timed out.</p><p>Of course this is not enough as there are expired keys that will never be accessed again. These keys should be expired anyway, so periodically Redis tests a few keys at random among keys with an expire set. All the keys that are already expired are deleted from the keyspace.</p><p>Specifically this is what Redis does 10 times per second:</p><p>Test 20 random keys from the set of keys with an associated expire.<br>Delete all the keys found expired.<br>If more than 25% of keys were expired, start again from step 1.<br>This is a trivial probabilistic algorithm, basically the assumption is that our sample is representative of the whole key space, and we continue to expire until the percentage of keys that are likely to be expired is under 25%</p><p>This means that at any given moment the maximum amount of keys already expired that are using memory is at max equal to max amount of write operations per second divided by 4.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://redis.io/documentation" target="_blank" rel="noopener">redis.io/documentation</a><br>[2] <a href="https://redis.io/topics/data-types-intro" target="_blank" rel="noopener">redis.io/topics/data-types-intro</a><br>[3] <a href="https://redis.io/topics/data-types" target="_blank" rel="noopener">redis.io/topics/data-types</a><br>[4] <a href="https://redis.io/commands/#string" target="_blank" rel="noopener">commands/#string</a><br>[5] <a href="https://redis.io/commands#list" target="_blank" rel="noopener">commands#list</a><br>[6] <a href="https://redis.io/commands#set" target="_blank" rel="noopener">commands#set</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; Redis is not a plain key-value store, it is actually a data structures server, supporting different kinds of values. What this means is that, while in traditional key-value stores you associate string keys to string values, in Redis the value is not limited to a simple string, but can also hold more complex data structures. The following is the list of all the data structures supported by Redis, which will be covered separately in this tutorial:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;redis-data-types&quot;&gt;&lt;a href=&quot;#redis-data-types&quot; class=&quot;headerlink&quot; title=&quot;redis data types&quot;&gt;&lt;/a&gt;redis data types&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; Binary-safe strings.&lt;br&gt; Lists: collections of string elements sorted according to the order of insertion. They are basically linked lists.&lt;br&gt; Sets: collections of unique, unsorted string elements.&lt;br&gt; Sorted sets, similar to Sets but where every string element is associated to a floating number value, called score. The elements are always taken sorted by their score, so unlike Sets it is possible to retrieve a range of elements (for example you may ask: give me the top 10, or the bottom 10).&lt;br&gt; Hashes, which are maps composed of fields associated with values. Both the field and the value are strings. This is very similar to Ruby or Python hashes.&lt;br&gt; Bit arrays (or simply bitmaps): it is possible, using special commands, to handle String values like an array of bits: you can set and clear individual bits, count all the bits set to 1, find the first set or unset bit, and so forth.&lt;br&gt; HyperLogLogs: this is a probabilistic data structure which is used in order to estimate the cardinality of a set. Don’t be scared, it is simpler than it seems… See later in the HyperLogLog section of this tutorial.&lt;br&gt; Streams: append-only collections of map-like entries that provide an abstract log data type. They are covered in depth in the Introduction to Redis Streams.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Redis-keys&quot;&gt;&lt;a href=&quot;#Redis-keys&quot; class=&quot;headerlink&quot; title=&quot;Redis keys&quot;&gt;&lt;/a&gt;Redis keys&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; Redis的key可以是任意类型，可以是字符串，还可以是图片，还可以是空字符串&lt;br&gt; Redis的key是二进制安全的，底层存储用的byte[]&lt;br&gt; 建议key不要太大&lt;br&gt; 建议key不要太小，太小会比较省内存，但是可读性、可维护性较差。&lt;br&gt; 尝试坚持一个模式。 建议使用 object-type:id，比如 &lt;code&gt;user:1000&lt;/code&gt;&lt;br&gt; redis允许最大的key大小为 512MB&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="redis" scheme="http://weikeqin.com/categories/redis/"/>
    
    
      <category term="redis" scheme="http://weikeqin.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch配置</title>
    <link href="http://weikeqin.com/2020/05/16/elasticsearch-setup/"/>
    <id>http://weikeqin.com/2020/05/16/elasticsearch-setup/</id>
    <published>2020-05-16T09:08:13.000Z</published>
    <updated>2020-06-05T14:36:07.785Z</updated>
    
    <content type="html"><![CDATA[<p>  elasticsearch 配置笔记</p><p>Elasticsearch has three configuration files:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch.yml for configuring Elasticsearch</span><br><span class="line">jvm.options for configuring Elasticsearch JVM settings</span><br><span class="line">log4j2.properties for configuring Elasticsearch logging</span><br></pre></td></tr></table></figure></p><h1 id="ES-Server-配置"><a href="#ES-Server-配置" class="headerlink" title="ES Server 配置"></a>ES Server 配置</h1><h2 id="ES-配置"><a href="#ES-配置" class="headerlink" title="ES 配置"></a>ES 配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#自动创建索引</span><br><span class="line">action.auto_create_index: .monitoring*,.watches,.triggered_watches,.watcher-history*,.ml*</span><br></pre></td></tr></table></figure><blockquote><p>可重新加载配置<br> Just like the settings values in elasticsearch.yml, changes to the keystore contents are not automatically applied to the running Elasticsearch node. Re-reading settings requires a node restart. However, certain secure settings are marked as reloadable. </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST _nodes/reload_secure_settings</span><br><span class="line">POST _nodes/&lt;node_id&gt;/reload_secure_settings</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;localhost:9200/_nodes/reload_secure_settings?pretty&quot; -H &apos;Content-Type: application/json&apos; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;secure_settings_password&quot;: &quot;s3cr3t&quot; </span><br><span class="line">&#125;</span><br><span class="line">&apos;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="jvm配置"><a href="#jvm配置" class="headerlink" title="jvm配置"></a>jvm配置</h2><p>  可以通过配置 <code>jvm.options文件 或</code>ES_JAVA_OPTS`环境变量配置es jvm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xmx16g</span><br><span class="line">8-9:-Xmx20g</span><br></pre></td></tr></table></figure><h2 id="ES日志配置"><a href="#ES日志配置" class="headerlink" title="ES日志配置"></a>ES日志配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">######## Server JSON ############################</span><br><span class="line">appender.rolling.type = RollingFile </span><br><span class="line">appender.rolling.name = rolling</span><br><span class="line">appender.rolling.fileName = $&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs.cluster_name&#125;_server.json </span><br><span class="line">appender.rolling.layout.type = ESJsonLayout </span><br><span class="line">appender.rolling.layout.type_name = server </span><br><span class="line">appender.rolling.filePattern = $&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs.cluster_name&#125;-%d&#123;yyyy-MM-dd&#125;-%i.json.gz </span><br><span class="line">appender.rolling.policies.type = Policies</span><br><span class="line">appender.rolling.policies.time.type = TimeBasedTriggeringPolicy </span><br><span class="line">appender.rolling.policies.time.interval = 1 </span><br><span class="line">appender.rolling.policies.time.modulate = true </span><br><span class="line">appender.rolling.policies.size.type = SizeBasedTriggeringPolicy </span><br><span class="line">appender.rolling.policies.size.size = 256MB </span><br><span class="line">appender.rolling.strategy.type = DefaultRolloverStrategy</span><br><span class="line">appender.rolling.strategy.fileIndex = nomax</span><br><span class="line">appender.rolling.strategy.action.type = Delete </span><br><span class="line">appender.rolling.strategy.action.basepath = $&#123;sys:es.logs.base_path&#125;</span><br><span class="line">appender.rolling.strategy.action.condition.type = IfFileName </span><br><span class="line">appender.rolling.strategy.action.condition.glob = $&#123;sys:es.logs.cluster_name&#125;-* </span><br><span class="line">appender.rolling.strategy.action.condition.nested_condition.type = IfAccumulatedFileSize </span><br><span class="line">appender.rolling.strategy.action.condition.nested_condition.exceeds = 2GB </span><br><span class="line">################################################</span><br></pre></td></tr></table></figure><blockquote><p> 设置ES log级别</p><ol><li><code>-E logger.org.elasticsearch.transport=trace</code>  debug in single node </li><li>修改 <code>elasticsearch.yml</code>  <code>logger.org.elasticsearch.transport: info</code>  es未启动时配置</li><li>动态修改日志级别  dynamically need to adjust a logging level on an actively-running cluster.</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /_cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  &quot;transient&quot;: &#123;</span><br><span class="line">    &quot;logger.org.elasticsearch.transport&quot;: &quot;trace&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>修改 <code>log4j2.properties</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logger.transport.name = org.elasticsearch.transport</span><br><span class="line">logger.transport.level = trace</span><br></pre></td></tr></table></figure></li></ol></blockquote><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/setup.html</a><br>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html</a><br>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html</a><br>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/jvm-options.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/jvm-options.html</a><br>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/secure-settings.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/secure-settings.html</a><br>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/logging.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/logging.html</a><br>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/auditing-settings.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/auditing-settings.html</a><br>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-settings.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-settings.html</a><br>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-settings.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-settings.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  elasticsearch 配置笔记&lt;/p&gt;
&lt;p&gt;Elasticsearch has three configuration files:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;elasticsearch.yml for configuring Elasticsearch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jvm.options for configuring Elasticsearch JVM settings&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log4j2.properties for configuring Elasticsearch logging&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;ES-Server-配置&quot;&gt;&lt;a href=&quot;#ES-Server-配置&quot; class=&quot;headerlink&quot; title=&quot;ES Server 配置&quot;&gt;&lt;/a&gt;ES Server 配置&lt;/h1&gt;&lt;h2 id=&quot;ES-配置&quot;&gt;&lt;a href=&quot;#ES-配置&quot; class=&quot;headerlink&quot; title=&quot;ES 配置&quot;&gt;&lt;/a&gt;ES 配置&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#自动创建索引&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;action.auto_create_index: .monitoring*,.watches,.triggered_watches,.watcher-history*,.ml*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;可重新加载配置&lt;br&gt; Just like the settings values in elasticsearch.yml, changes to the keystore contents are not automatically applied to the running Elasticsearch node. Re-reading settings requires a node restart. However, certain secure settings are marked as reloadable. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;POST _nodes/reload_secure_settings&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POST _nodes/&amp;lt;node_id&amp;gt;/reload_secure_settings&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -X POST &amp;quot;localhost:9200/_nodes/reload_secure_settings?pretty&amp;quot; -H &amp;apos;Content-Type: application/json&amp;apos; -d&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;secure_settings_password&amp;quot;: &amp;quot;s3cr3t&amp;quot; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://weikeqin.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://weikeqin.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch Logstash Kibana 笔记</title>
    <link href="http://weikeqin.com/2020/05/16/elk-notes/"/>
    <id>http://weikeqin.com/2020/05/16/elk-notes/</id>
    <published>2020-05-16T08:21:23.000Z</published>
    <updated>2020-05-17T15:31:40.565Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> Elastic Stack 是适用于数据采集、充实、存储、分析和可视化的一组开源工具。人们通常将 Elastic Stack 称为 ELK Stack（代指 Elasticsearch、Logstash 和 Kibana）</p></blockquote><blockquote><p> Elasticsearch 是一个分布式的开源搜索和分析引擎，适用于所有类型的数据，包括文本、数字、地理空间、结构化和非结构化数据。  类似于MySQL，用来存储和分析数据。<br> Logstash可用来对数据进行聚合和处理，并将数据发送到 Elasticsearch。Logstash 是一个开源的服务器端数据处理管道，允许您在将数据索引到 Elasticsearch 之前同时从多个来源采集数据，并对数据进行充实和转换。 类似于程序，抽取解析数据并储存到ES<br> Kibana 是一款适用于 Elasticsearch 的数据可视化和管理工具。类似于使用MySQL时用的Navicat</p></blockquote><blockquote><p> 简单的说，LogStash用来收取解析日志并发消息写入ES，Elasticsearch用来存储和分析查询，Kibana用来查看</p></blockquote><p>  es下载地址 <a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a><br>  logstash下载地址 <a href="https://www.elastic.co/cn/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/logstash</a><br>  kibana下载地址  <a href="https://www.elastic.co/cn/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/kibana</a><br>  filebeats</p><a id="more"></a>  <!--    es下载 https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.7.0-linux-x86_64.tar.gz  logstash下载  https://artifacts.elastic.co/downloads/logstash/logstash-7.7.0.tar.gz  kibana下载 https://artifacts.elastic.co/downloads/kibana/kibana-7.7.0-linux-x86_64.tar.gz--><p> elasticsearch-7.x 要求JDK版本大于等于11<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ZBMAC-C02PGMT0F:~ weikeqin1$ java -version</span><br><span class="line">java version &quot;14&quot; 2020-03-17</span><br><span class="line">Java(TM) SE Runtime Environment (build 14+36-1461)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 14+36-1461, mixed mode, sharing)</span><br><span class="line">ZBMAC-C02PGMT0F:~ weikeqin1$</span><br></pre></td></tr></table></figure></p><h1 id="elasticsearch安装配置启动"><a href="#elasticsearch安装配置启动" class="headerlink" title="elasticsearch安装配置启动"></a>elasticsearch安装配置启动</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.7.0-linux-x86_64.tar.gz</span><br><span class="line">tar -xzf elasticsearch-7.7.0-linux-x86_64.tar.gz</span><br><span class="line">cd elasticsearch-7.7.0/</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p> 修改 <code>elasticsearch-7.7.0/config/elasticsearch.yml</code> </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">action.destructive_requires_name: true</span><br><span class="line">xpack.ml.enabled: true</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd elasticsearch-7.7.0/</span><br><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure><blockquote><p> 后台启动可以用 <code>./bin/elasticsearch -d</code></p></blockquote><h2 id="验证是否启动成功"><a href="#验证是否启动成功" class="headerlink" title="验证是否启动成功"></a>验证是否启动成功</h2><blockquote><p> 在浏览器里输入  <a href="http://localhost:9200/?pretty" target="_blank" rel="noopener">http://localhost:9200/?pretty</a>  或者用 <code>curl &#39;http://localhost:9200/?pretty&#39;</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;192.168.0.110&quot;,</span><br><span class="line">    &quot;cluster_name&quot;: &quot;elasticsearch&quot;,</span><br><span class="line">    &quot;cluster_uuid&quot;: &quot;aHsnglvYQvSrJeoFR70mCQ&quot;,</span><br><span class="line">    &quot;version&quot;: &#123;</span><br><span class="line">        &quot;number&quot;: &quot;7.7.0&quot;,</span><br><span class="line">        &quot;build_flavor&quot;: &quot;default&quot;,</span><br><span class="line">        &quot;build_type&quot;: &quot;tar&quot;,</span><br><span class="line">        &quot;build_hash&quot;: &quot;81a1e9eda8e6183f5237786246f6dced26a10eaf&quot;,</span><br><span class="line">        &quot;build_date&quot;: &quot;2020-05-16T02:01:37.602180Z&quot;,</span><br><span class="line">        &quot;build_snapshot&quot;: false,</span><br><span class="line">        &quot;lucene_version&quot;: &quot;8.5.1&quot;,</span><br><span class="line">        &quot;minimum_wire_compatibility_version&quot;: &quot;6.8.0&quot;,</span><br><span class="line">        &quot;minimum_index_compatibility_version&quot;: &quot;6.0.0-beta1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;tagline&quot;: &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 看到类似以上结果说明es启动成功。  </p></blockquote><p><br></p><h1 id="kibana安装配置启动"><a href="#kibana安装配置启动" class="headerlink" title="kibana安装配置启动"></a>kibana安装配置启动</h1><h2 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-7.7.0-linux-x86_64.tar.gz </span><br><span class="line">tar -zxf kibana-7.7.0-linux-x86_64.tar.gz </span><br><span class="line">cd kibana-7.7.0-linux-x86_64</span><br></pre></td></tr></table></figure><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><blockquote><p> 修改 <code>kibana-7.7.0-darwin-x86_64/config/kibana.yml</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Kibana is served by a back end server. This setting specifies the port to use.</span><br><span class="line">server.port: 5601</span><br><span class="line"></span><br><span class="line"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span><br><span class="line"># The default is &apos;localhost&apos;, which usually means remote machines will not be able to connect.</span><br><span class="line"># To allow connections from remote users, set this parameter to a non-loopback address.</span><br><span class="line">server.host: &quot;localhost&quot;</span><br><span class="line"></span><br><span class="line"># The URLs of the Elasticsearch instances to use for all your queries.</span><br><span class="line">elasticsearch.hosts: [&quot;http://localhost:9200&quot;]</span><br></pre></td></tr></table></figure><h2 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd kibana-7.7.0-linux-x86_64/</span><br><span class="line">./bin/kinana</span><br></pre></td></tr></table></figure><blockquote><p>后台运行可以用 <code>./bin/kinana &amp;</code></p></blockquote><h2 id="验证是否启动成功-1"><a href="#验证是否启动成功-1" class="headerlink" title="验证是否启动成功"></a>验证是否启动成功</h2><blockquote><p> 浏览器里输入 <a href="http://127.0.0.1:5601/" target="_blank" rel="noopener">http://127.0.0.1:5601/</a> 如果可以打开页面说明启动成功</p></blockquote><p><br></p><h1 id="logstash安装配置启动"><a href="#logstash安装配置启动" class="headerlink" title="logstash安装配置启动"></a>logstash安装配置启动</h1><h2 id="下载-2"><a href="#下载-2" class="headerlink" title="下载"></a>下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-7.7.0.tar.gz</span><br><span class="line">tar -zxf logstash-7.7.0.tar.gz</span><br><span class="line">cd logstash-7.7.0</span><br></pre></td></tr></table></figure><h2 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h2><blockquote><p>在 config 目录下新建配置 <code>logstash-wkq-test.conf</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># Sample Logstash configuration for creating a simple</span><br><span class="line"># file -&gt; Logstash -&gt; Elasticsearch pipeline.</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [ &quot;/Users/weikeqin1/WorkSpaces/java/springboot-test/logs/entrance.log&quot;, &quot;/Users/weikeqin1/WorkSpaces/java/springboot-test/logs/*.log&quot; ]</span><br><span class="line">    type =&gt; &quot;entrance&quot;</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [ &quot;/Users/weikeqin1/WorkSpaces/java/springboot-test/logs/error*.log&quot; ]</span><br><span class="line">    type =&gt; &quot;error&quot;</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; &quot;/var/log/apache/access.log&quot;</span><br><span class="line">    type =&gt; &quot;apache&quot;</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  if [path] =~ &quot;entrance&quot; &#123;</span><br><span class="line">    mutate &#123; replace =&gt; &#123; &quot;type&quot; =&gt; &quot;entrance_log&quot; &#125; &#125;</span><br><span class="line">    grok &#123;</span><br><span class="line">      match =&gt; &#123; &quot;msg&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else if [path] =~ &quot;error&quot; &#123;</span><br><span class="line">    mutate &#123; replace =&gt; &#123; type =&gt; &quot;error_log&quot; &#125; &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  date &#123;</span><br><span class="line">    match =&gt; [ &quot;timestamp&quot; , &quot;yyyy-MM-dd HH:mm:ss&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;http://localhost:9200&quot;]</span><br><span class="line">    index =&gt; &quot;log-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    #user =&gt; &quot;elastic&quot;</span><br><span class="line">    #password =&gt; &quot;changeme&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 配置文件中的 grok 对应解析日志的字段<br> 日志样例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-05-17 11:14:22.887 INFO [XNIO-1 task-9] cn.wkq.controller.TestController.test|&#123;&quot;_traceId&quot;:&quot;1589685262886CY74&quot;,&quot;_method&quot;:&quot;test&quot;,&quot;param&quot;:&#123;&quot;appKey&quot;:&quot;wkq&quot;&#125;&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>解析规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%&#123;DATA:logDate&#125; %&#123;DATA:logTime&#125; %&#123;DATA:logLevel&#125; \[%&#123;DATA:thread&#125;\]%&#123;DATA:classnameMethod&#125;\|\&#123;%&#123;DATA:msg&#125;\&#125; </span><br><span class="line"></span><br><span class="line">%&#123;DATA:logDate&#125; %&#123;DATA:logTime&#125; %&#123;DATA:logLevel&#125; \[%&#123;DATA:thread&#125;\] %&#123;DATA:classnameMethod&#125;\|\&#123;\&quot;_traceId\&quot;:\&quot;%&#123;DATA:traceId&#125;\&quot;\,\&quot;_method\&quot;:\&quot;%&#123;DATA:method&#125;\&quot;,\&quot;param\&quot;\:\&#123;%&#123;DATA:param&#125;\&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p> 可以在kibana <a href="http://127.0.0.1:5601/app/kibana#/dev_tools/grokdebugger" target="_blank" rel="noopener">http://127.0.0.1:5601/app/kibana#/dev_tools/grokdebugger</a> 调试  </p></blockquote><h2 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/logstash -f ./config/logstash-wkq-test.conf</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><blockquote><p> 用压测工具压测程序，会生成很多日志，压测的时候看监控，程序才占用75M内存，logstash就占1000m内存，实际使用500m左右，elasticsearch用的默认配置，也占1000m内存，实际使用750m左右<br> logstash太占内存了 </p></blockquote><h1 id="filebeat"><a href="#filebeat" class="headerlink" title="filebeat"></a>filebeat</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.7.0-linux-x86_64.tar.gz</span><br><span class="line">tar xzvf filebeat-7.7.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#=========================== Filebeat inputs =============================</span><br><span class="line"></span><br><span class="line">filebeat.inputs:</span><br><span class="line"></span><br><span class="line"># Each - is an input. Most options can be set at the input level, so</span><br><span class="line"># you can use different inputs for various configurations.</span><br><span class="line"># Below are the input specific configurations.</span><br><span class="line"></span><br><span class="line">- type: log</span><br><span class="line"></span><br><span class="line">  # Change to true to enable this input configuration.</span><br><span class="line">  enabled: true</span><br><span class="line"></span><br><span class="line">  # Paths that should be crawled and fetched. Glob based paths.</span><br><span class="line">  paths:</span><br><span class="line">    - /Users/weikeqin1/WorkSpaces/java/springboot-test/logs/*.log</span><br><span class="line">    #- c:\programdata\elasticsearch\logs\*</span><br><span class="line"></span><br><span class="line">#-------------------------- Elasticsearch output ------------------------------</span><br><span class="line">#output.elasticsearch:</span><br><span class="line">  # Array of hosts to connect to.</span><br><span class="line">  #hosts: [&quot;localhost:9200&quot;]</span><br><span class="line"></span><br><span class="line">  # Protocol - either `http` (default) or `https`.</span><br><span class="line">  #protocol: &quot;https&quot;</span><br><span class="line"></span><br><span class="line">  # Authentication credentials - either API key or username/password.</span><br><span class="line">  #api_key: &quot;id:api_key&quot;</span><br><span class="line">  #username: &quot;elastic&quot;</span><br><span class="line">  #password: &quot;changeme&quot;</span><br><span class="line"></span><br><span class="line">#----------------------------- Logstash output --------------------------------</span><br><span class="line">output.logstash:</span><br><span class="line">  # The Logstash hosts</span><br><span class="line">  hosts: [&quot;localhost:5044&quot;]</span><br><span class="line"></span><br><span class="line">  # Optional SSL. By default is off.</span><br><span class="line">  # List of root certificates for HTTPS server verifications</span><br><span class="line">  #ssl.certificate_authorities: [&quot;/etc/pki/root/ca.pem&quot;]</span><br><span class="line"></span><br><span class="line">  # Certificate for SSL client authentication</span><br><span class="line">  #ssl.certificate: &quot;/etc/pki/client/cert.pem&quot;</span><br><span class="line"></span><br><span class="line">  # Client Certificate Key</span><br><span class="line">  #ssl.key: &quot;/etc/pki/client/cert.key&quot;</span><br></pre></td></tr></table></figure><h2 id="启动-3"><a href="#启动-3" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd filebeat-7.7.0-linux-x86_64</span><br><span class="line">sudo ./filebeat -e</span><br></pre></td></tr></table></figure><h1 id="在kibana查看日志"><a href="#在kibana查看日志" class="headerlink" title="在kibana查看日志"></a>在kibana查看日志</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;filebeat-7.7.0-2020.05.17&quot;,</span><br><span class="line">  &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;y42gIHIBU4Je81Q8Jaun&quot;,</span><br><span class="line">  &quot;_score&quot; : null,</span><br><span class="line">  &quot;_source&quot; : &#123;</span><br><span class="line">    &quot;log&quot; : &#123;</span><br><span class="line">      &quot;file&quot; : &#123;</span><br><span class="line">        &quot;path&quot; : &quot;/Users/weikeqin1/WorkSpaces/java/springboot-test/logs/springboot-test.2020-05-17_0.log&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;offset&quot; : 371432</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;tags&quot; : [</span><br><span class="line">      &quot;beats_input_codec_plain_applied&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;host&quot; : &#123;</span><br><span class="line">      &quot;architecture&quot; : &quot;x86_64&quot;,</span><br><span class="line">      &quot;id&quot; : &quot;DAA105AB-C93E-5E37-AFBF-A747032048AF&quot;,</span><br><span class="line">      &quot;ip&quot; : [</span><br><span class="line">        &quot;xx::xx:xx:xx:xx&quot;,</span><br><span class="line">        &quot;192.168.0.110&quot;,</span><br><span class="line">        &quot;xx::xx:xx:xx:xx&quot;,</span><br><span class="line">        &quot;xx::xx:xx:xx:xx&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;name&quot; : &quot;192.168.0.110&quot;,</span><br><span class="line">      &quot;mac&quot; : [</span><br><span class="line">        &quot;xx:xx:xx:xx:xx:xx&quot;,</span><br><span class="line">        &quot;xx:xx:xx:xx:xx:xx&quot;,</span><br><span class="line">        &quot;xx:xx:xx:xx:xx:xx&quot;,</span><br><span class="line">        &quot;xx:xx:xx:xx:xx:xx&quot;,</span><br><span class="line">        &quot;xx:xx:xx:xx:xx:xx&quot;,</span><br><span class="line">        &quot;xx:xx:xx:xx:xx:xx&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;os&quot; : &#123;</span><br><span class="line">        &quot;version&quot; : &quot;10.13.6&quot;,</span><br><span class="line">        &quot;build&quot; : &quot;17G8030&quot;,</span><br><span class="line">        &quot;kernel&quot; : &quot;17.7.0&quot;,</span><br><span class="line">        &quot;name&quot; : &quot;Mac OS X&quot;,</span><br><span class="line">        &quot;family&quot; : &quot;darwin&quot;,</span><br><span class="line">        &quot;platform&quot; : &quot;darwin&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;hostname&quot; : &quot;192.168.0.110&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;ecs&quot; : &#123;</span><br><span class="line">      &quot;version&quot; : &quot;1.5.0&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;agent&quot; : &#123;</span><br><span class="line">      &quot;id&quot; : &quot;1dcf526f-dc97-4a59-bccc-4751954962e6&quot;,</span><br><span class="line">      &quot;type&quot; : &quot;filebeat&quot;,</span><br><span class="line">      &quot;version&quot; : &quot;7.7.0&quot;,</span><br><span class="line">      &quot;ephemeral_id&quot; : &quot;810f6da6-b38a-4071-8d2f-9c45dee14440&quot;,</span><br><span class="line">      &quot;hostname&quot; : &quot;192.168.0.110&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;@version&quot; : &quot;1&quot;,</span><br><span class="line">    &quot;@timestamp&quot; : &quot;2020-05-17T03:14:23.865Z&quot;,</span><br><span class="line">    &quot;input&quot; : &#123;</span><br><span class="line">      &quot;type&quot; : &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;message&quot; : &quot;&quot;&quot;2020-05-17 11:14:22.879 [http-nio-11011-exec-20] INFO  [cn.wkq.controller.TestController] [32] - &#123;&quot;_traceId&quot;:&quot;15896852628794XZ3&quot;,&quot;_method&quot;:&quot;TestController#test#1589685262879#&quot;&#125;&quot;&quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot; : [</span><br><span class="line">    1589685263865</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://www.elastic.co/" target="_blank" rel="noopener">elastic官网</a><br>[2] <a href="https://www.elastic.co/cn/elasticsearch" target="_blank" rel="noopener">elasticsearch官网中文简介</a><br>[3] <a href="https://www.elastic.co/cn/logstash" target="_blank" rel="noopener">elasticsearch官网logstash中文简介</a><br>[4] <a href="https://www.elastic.co/cn/kibana" target="_blank" rel="noopener">elasticsearch官网kibana中文简介</a><br>[5] <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup.html" target="_blank" rel="noopener">elasticsearch下载安装启动及配置</a><br>[6] <a href="https://www.elastic.co/guide/en/logstash/current/configuration.html" target="_blank" rel="noopener">logstash-configuration</a><br>[7] <a href="https://www.elastic.co/guide/en/kibana/current/getting-started.html" target="_blank" rel="noopener">kibana-getting-started</a><br>[8] <a href="https://www.elastic.co/guide/en/beats/libbeat/current/getting-started.html" target="_blank" rel="noopener">beats-getting-started</a><br>[9] <a href="https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns" target="_blank" rel="noopener">logstash-patterns</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; Elastic Stack 是适用于数据采集、充实、存储、分析和可视化的一组开源工具。人们通常将 Elastic Stack 称为 ELK Stack（代指 Elasticsearch、Logstash 和 Kibana）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Elasticsearch 是一个分布式的开源搜索和分析引擎，适用于所有类型的数据，包括文本、数字、地理空间、结构化和非结构化数据。  类似于MySQL，用来存储和分析数据。&lt;br&gt; Logstash可用来对数据进行聚合和处理，并将数据发送到 Elasticsearch。Logstash 是一个开源的服务器端数据处理管道，允许您在将数据索引到 Elasticsearch 之前同时从多个来源采集数据，并对数据进行充实和转换。 类似于程序，抽取解析数据并储存到ES&lt;br&gt; Kibana 是一款适用于 Elasticsearch 的数据可视化和管理工具。类似于使用MySQL时用的Navicat&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 简单的说，LogStash用来收取解析日志并发消息写入ES，Elasticsearch用来存储和分析查询，Kibana用来查看&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  es下载地址 &lt;a href=&quot;https://www.elastic.co/cn/downloads/elasticsearch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/cn/downloads/elasticsearch&lt;/a&gt;&lt;br&gt;  logstash下载地址 &lt;a href=&quot;https://www.elastic.co/cn/downloads/logstash&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/cn/downloads/logstash&lt;/a&gt;&lt;br&gt;  kibana下载地址  &lt;a href=&quot;https://www.elastic.co/cn/downloads/kibana&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/cn/downloads/kibana&lt;/a&gt;&lt;br&gt;  filebeats&lt;/p&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://weikeqin.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://weikeqin.com/tags/elasticsearch/"/>
    
  </entry>
  
</feed>
