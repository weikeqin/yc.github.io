<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>沧海一粟</title>
  
  <subtitle>天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://weikeqin.com/"/>
  <updated>2020-06-14T14:26:12.529Z</updated>
  <id>http://weikeqin.com/</id>
  
  <author>
    <name>WKQ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java jmh 使用</title>
    <link href="http://weikeqin.com/2020/06/14/java-jmh-notes/"/>
    <id>http://weikeqin.com/2020/06/14/java-jmh-notes/</id>
    <published>2020-06-14T08:52:52.000Z</published>
    <updated>2020-06-14T14:26:12.529Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 代码工具：jmh  JMH是一个Java工具，用于构建、运行和分析nano/micro/mili/macro基准，这些基准是用Java和其他针对JVM的语言编写的。<br> Code Tools: jmh  JMH is a Java harness for building, running, and analysing nano/micro/milli/macro benchmarks written in Java and other languages targetting the JVM.</p></blockquote><h1 id="JMH解决了什么问题"><a href="#JMH解决了什么问题" class="headerlink" title="JMH解决了什么问题"></a>JMH解决了什么问题</h1><h1 id="JMH怎么用"><a href="#JMH怎么用" class="headerlink" title="JMH怎么用"></a>JMH怎么用</h1><ol><li>添加对应jar包</li><li>根据实际情况配置参数</li><li>编写代码运行</li></ol><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h2><p>@BenchmarkMode<br>用来配置 Mode 选项，可用于类或者方法上，这个注解的 value 是一个数组，可以把几种 Mode 集合在一起执行，如：@BenchmarkMode({Mode.SampleTime, Mode.AverageTime})，还可以设置为 Mode.All，即全部执行一遍。</p><p>Throughput：整体吞吐量，每秒执行了多少次调用，单位为 ops/time<br>AverageTime：用的平均时间，每次操作的平均时间，单位为 time/op<br>SampleTime：随机取样，最后输出取样结果的分布<br>SingleShotTime：只运行一次，往往同时把 Warmup 次数设为 0，用于测试冷启动时的性能<br>All：上面的所有模式都执行一次<br>@State<br>通过 State 可以指定一个对象的作用范围，JMH 根据 scope 来进行实例化和共享操作。@State 可以被继承使用，如果父类定义了该注解，子类则无需定义。由于 JMH 允许多线程同时执行测试，不同的选项含义如下：</p><p>Scope.Benchmark：所有测试线程共享一个实例，测试有状态实例在多线程共享下的性能<br>Scope.Group：同一个线程在同一个 group 里共享实例<br>Scope.Thread：默认的 State，每个测试线程分配一个实例<br>@OutputTimeUnit<br>为统计结果的时间单位，可用于类或者方法注解</p><p>@Warmup<br>预热所需要配置的一些基本测试参数，可用于类或者方法上。一般前几次进行程序测试的时候都会比较慢，所以要让程序进行几轮预热，保证测试的准确性。参数如下所示：</p><p>iterations：预热的次数<br>time：每次预热的时间<br>timeUnit：时间的单位，默认秒<br>batchSize：批处理大小，每次操作调用几次方法<br>为什么需要预热？</p><p>因为 JVM 的 JIT 机制的存在，如果某个函数被调用多次之后，JVM 会尝试将其编译为机器码，从而提高执行速度，所以为了让 benchmark 的结果更加接近真实情况就需要进行预热。</p><p>@Measurement<br>实际调用方法所需要配置的一些基本测试参数，可用于类或者方法上，参数和 @Warmup 相同。</p><p>@Threads<br>每个进程中的测试线程，可用于类或者方法上。</p><p>@Fork<br>进行 fork 的次数，可用于类或者方法上。如果 fork 数是 2 的话，则 JMH 会 fork 出两个进程来进行测试。</p><p>@Param<br>指定某项参数的多种情况，特别适合用来测试一个函数在不同的参数输入的情况下的性能，只能作用在字段上，使用该注解必须定义 @State 注解。</p><h2 id="编写代码运行"><a href="#编写代码运行" class="headerlink" title="编写代码运行"></a>编写代码运行</h2><blockquote><p> 建议 代码里不要打日志</p></blockquote><h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.wkq.java.string.StringInternTest;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.results.format.ResultFormatType;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.Runner;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.RunnerException;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.options.Options;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.options.OptionsBuilder;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     JMH使用样例</span></span><br><span class="line"><span class="comment"> *         http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> weikeqin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-06-14 17:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmtTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> Logger log = LoggerFactory.getLogger(StringInternTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">"hello JMH"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"开始执行。"</span>);</span><br><span class="line"></span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(JmtTest.class.getSimpleName())</span><br><span class="line">                .forks(<span class="number">1</span>)</span><br><span class="line">                .result(<span class="string">"jmh_result.json"</span>)</span><br><span class="line">                .resultFormat(ResultFormatType.JSON)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"执行完成。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">WARNING: An illegal reflective access operation has occurred</span><br><span class="line">WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/Users/weikeqin1/.m2/repository/org/openjdk/jmh/jmh-core/1.23/jmh-core-1.23.jar) to field java.io.PrintStream.charOut</span><br><span class="line">WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils</span><br><span class="line">WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations</span><br><span class="line">WARNING: All illegal access operations will be denied in a future release</span><br><span class="line"># JMH version: 1.23</span><br><span class="line"># VM version: JDK 14.0.1, Java HotSpot(TM) 64-Bit Server VM, 14.0.1+7</span><br><span class="line"># VM invoker: /Library/Java/JavaVirtualMachines/jdk-14.0.1.jdk/Contents/Home/bin/java</span><br><span class="line"># VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=57492:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8</span><br><span class="line"># Warmup: 5 iterations, 10 s each</span><br><span class="line"># Measurement: 5 iterations, 10 s each</span><br><span class="line"># Timeout: 10 min per iteration</span><br><span class="line"># Threads: 1 thread, will synchronize iterations</span><br><span class="line"># Benchmark mode: Throughput, ops/time</span><br><span class="line"># Benchmark: cn.wkq.java.jmh.JmtTest.print</span><br><span class="line"></span><br><span class="line"># Run progress: 0.00% complete, ETA 00:01:40</span><br><span class="line"># Fork: 1 of 1</span><br><span class="line"># Warmup Iteration   1: 660097134.157 ops/s</span><br><span class="line"># Warmup Iteration   2: 650765740.996 ops/s</span><br><span class="line"># Warmup Iteration   3: 661961002.718 ops/s</span><br><span class="line"># Warmup Iteration   4: 672329475.200 ops/s</span><br><span class="line"># Warmup Iteration   5: 611127628.164 ops/s</span><br><span class="line">Iteration   1: 615120987.535 ops/s</span><br><span class="line">Iteration   2: 645989044.177 ops/s</span><br><span class="line">Iteration   3: 642876939.314 ops/s</span><br><span class="line">Iteration   4: 640265656.368 ops/s</span><br><span class="line">Iteration   5: 673185386.638 ops/s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Result &quot;cn.wkq.java.jmh.JmtTest.print&quot;:</span><br><span class="line">  643487602.806 ±(99.9%) 79467866.034 ops/s [Average]</span><br><span class="line">  (min, avg, max) = (615120987.535, 643487602.806, 673185386.638), stdev = 20637552.448</span><br><span class="line">  CI (99.9%): [564019736.772, 722955468.841] (assumes normal distribution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Run complete. Total time: 00:01:42</span><br><span class="line"></span><br><span class="line">REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on</span><br><span class="line">why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial</span><br><span class="line">experiments, perform baseline and negative tests that provide experimental control, make sure</span><br><span class="line">the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.</span><br><span class="line">Do not assume the numbers tell you what you want them to tell.</span><br><span class="line"></span><br><span class="line">Benchmark       Mode  Cnt          Score          Error  Units</span><br><span class="line">JmtTest.print  thrpt    5  643487602.806 ± 79467866.034  ops/s</span><br><span class="line"></span><br><span class="line">Benchmark result is saved to jmh_result.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"jmhVersion"</span> : <span class="string">"1.23"</span>,</span><br><span class="line">        <span class="attr">"benchmark"</span> : <span class="string">"cn.wkq.java.jmh.JmtTest.print"</span>,</span><br><span class="line">        <span class="attr">"mode"</span> : <span class="string">"thrpt"</span>,</span><br><span class="line">        <span class="attr">"threads"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"forks"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"jvm"</span> : <span class="string">"/Library/Java/JavaVirtualMachines/jdk-14.0.1.jdk/Contents/Home/bin/java"</span>,</span><br><span class="line">        <span class="attr">"jvmArgs"</span> : [</span><br><span class="line">            <span class="string">"-javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=57492:/Applications/IntelliJ IDEA.app/Contents/bin"</span>,</span><br><span class="line">            <span class="string">"-Dfile.encoding=UTF-8"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"jdkVersion"</span> : <span class="string">"14.0.1"</span>,</span><br><span class="line">        <span class="attr">"vmName"</span> : <span class="string">"Java HotSpot(TM) 64-Bit Server VM"</span>,</span><br><span class="line">        <span class="attr">"vmVersion"</span> : <span class="string">"14.0.1+7"</span>,</span><br><span class="line">        <span class="attr">"warmupIterations"</span> : <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"warmupTime"</span> : <span class="string">"10 s"</span>,</span><br><span class="line">        <span class="attr">"warmupBatchSize"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"measurementIterations"</span> : <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"measurementTime"</span> : <span class="string">"10 s"</span>,</span><br><span class="line">        <span class="attr">"measurementBatchSize"</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"primaryMetric"</span> : &#123;</span><br><span class="line">            <span class="attr">"score"</span> : <span class="number">6.434876028063821E8</span>,</span><br><span class="line">            <span class="attr">"scoreError"</span> : <span class="number">7.946786603420861E7</span>,</span><br><span class="line">            <span class="attr">"scoreConfidence"</span> : [</span><br><span class="line">                <span class="number">5.640197367721734E8</span>,</span><br><span class="line">                <span class="number">7.229554688405907E8</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"scorePercentiles"</span> : &#123;</span><br><span class="line">                <span class="attr">"0.0"</span> : <span class="number">6.151209875347286E8</span>,</span><br><span class="line">                <span class="attr">"50.0"</span> : <span class="number">6.428769393141737E8</span>,</span><br><span class="line">                <span class="attr">"90.0"</span> : <span class="number">6.731853866384177E8</span>,</span><br><span class="line">                <span class="attr">"95.0"</span> : <span class="number">6.731853866384177E8</span>,</span><br><span class="line">                <span class="attr">"99.0"</span> : <span class="number">6.731853866384177E8</span>,</span><br><span class="line">                <span class="attr">"99.9"</span> : <span class="number">6.731853866384177E8</span>,</span><br><span class="line">                <span class="attr">"99.99"</span> : <span class="number">6.731853866384177E8</span>,</span><br><span class="line">                <span class="attr">"99.999"</span> : <span class="number">6.731853866384177E8</span>,</span><br><span class="line">                <span class="attr">"99.9999"</span> : <span class="number">6.731853866384177E8</span>,</span><br><span class="line">                <span class="attr">"100.0"</span> : <span class="number">6.731853866384177E8</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"scoreUnit"</span> : <span class="string">"ops/s"</span>,</span><br><span class="line">            <span class="attr">"rawData"</span> : [</span><br><span class="line">                [</span><br><span class="line">                    <span class="number">6.151209875347286E8</span>,</span><br><span class="line">                    <span class="number">6.459890441766258E8</span>,</span><br><span class="line">                    <span class="number">6.428769393141737E8</span>,</span><br><span class="line">                    <span class="number">6.402656563679644E8</span>,</span><br><span class="line">                    <span class="number">6.731853866384177E8</span></span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"secondaryMetrics"</span> : &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.results.format.ResultFormatType;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.Runner;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.RunnerException;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.options.Options;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.options.OptionsBuilder;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     JMH使用样例</span></span><br><span class="line"><span class="comment"> *         http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> weikeqin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-06-14 16:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@BenchmarkMode</span>(Mode.AverageTime)</span><br><span class="line"><span class="meta">@Warmup</span>(iterations = <span class="number">3</span>, time = <span class="number">1</span>)</span><br><span class="line"><span class="meta">@Measurement</span>(iterations = <span class="number">5</span>, time = <span class="number">5</span>)</span><br><span class="line"><span class="meta">@Threads</span>(<span class="number">4</span>)</span><br><span class="line"><span class="meta">@Fork</span>(<span class="number">1</span>)</span><br><span class="line"><span class="meta">@State</span>(value = Scope.Benchmark)</span><br><span class="line"><span class="meta">@OutputTimeUnit</span>(TimeUnit.NANOSECONDS)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringInternTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> Logger log = LoggerFactory.getLogger(StringInternTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Param</span>(value = &#123;<span class="string">"10000"</span>, <span class="string">"100000"</span>, <span class="string">"1000000"</span>&#125;)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stringTestWithIntern</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> fm1 = Runtime.getRuntime().freeMemory();</span><br><span class="line"></span><br><span class="line">        List&lt;SharedLocation&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(count);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            String country = <span class="string">"中国"</span>;</span><br><span class="line">            String province = <span class="string">"山西"</span>;</span><br><span class="line">            String city = <span class="string">"运城"</span>;</span><br><span class="line">            SharedLocation sharedLocation = <span class="keyword">new</span> SharedLocation();</span><br><span class="line">            sharedLocation.setCountry(country.intern());</span><br><span class="line">            sharedLocation.setProvince(province.intern());</span><br><span class="line">            sharedLocation.setCity(city.intern());</span><br><span class="line"></span><br><span class="line">            list.add(sharedLocation);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"个数：&#123;&#125;"</span>, list.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> fm2 = Runtime.getRuntime().freeMemory();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"&#123;&#125;  &#123;&#125;    use &#123;&#125; bytes"</span>, fm1, fm2, fm1 - fm2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stringTestWithOutIntern</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> fm1 = Runtime.getRuntime().freeMemory();</span><br><span class="line"></span><br><span class="line">        List&lt;SharedLocation&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(count);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            String country = <span class="string">"中国"</span>;</span><br><span class="line">            String province = <span class="string">"山西"</span>;</span><br><span class="line">            String city = <span class="string">"运城"</span>;</span><br><span class="line">            SharedLocation sharedLocation = <span class="keyword">new</span> SharedLocation();</span><br><span class="line">            sharedLocation.setCountry(country);</span><br><span class="line">            sharedLocation.setProvince(province);</span><br><span class="line">            sharedLocation.setCity(city);</span><br><span class="line"></span><br><span class="line">            list.add(sharedLocation);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"个数：&#123;&#125;"</span>, list.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> fm2 = Runtime.getRuntime().freeMemory();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"&#123;&#125;  &#123;&#125;    use &#123;&#125; bytes"</span>, fm1, fm2, fm1 - fm2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"开始执行。"</span>);</span><br><span class="line"></span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(StringInternTest.class.getSimpleName())</span><br><span class="line">                .result(<span class="string">"result.json"</span>)</span><br><span class="line">                .resultFormat(ResultFormatType.JSON).build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RunnerException e) &#123;</span><br><span class="line">            log.error(<span class="string">""</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"执行完成。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharedLocation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 市</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 省</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 国家</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProvince</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvince</span><span class="params">(String province)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.province = province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCountry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> country;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCountry</span><span class="params">(String country)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.country = country;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">900761252.400 ±(99.9%) 836615744.826 ns/op</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Result &quot;cn.wkq.java.string.StringInternTest.stringTestWithOutIntern&quot;:</span><br><span class="line">  763138737.923 ±(99.9%) 930573867.253 ns/op [Average]</span><br><span class="line">  (min, avg, max) = (439268202.215, 763138737.923, 1017594855.563), stdev = 241667078.162</span><br><span class="line">  CI (99.9%): [≈ 0, 1693712605.176] (assumes normal distribution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Run complete. Total time: 00:03:34</span><br><span class="line"></span><br><span class="line">REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on</span><br><span class="line">why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial</span><br><span class="line">experiments, perform baseline and negative tests that provide experimental control, make sure</span><br><span class="line">the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.</span><br><span class="line">Do not assume the numbers tell you what you want them to tell.</span><br><span class="line"></span><br><span class="line">Benchmark                                 (count)  Mode  Cnt           Score           Error  Units</span><br><span class="line">StringInternTest.stringTestWithIntern       10000  avgt    5    13128831.111 ±   1999580.768  ns/op</span><br><span class="line">StringInternTest.stringTestWithIntern      100000  avgt    5   157188187.749 ±  99748905.878  ns/op</span><br><span class="line">StringInternTest.stringTestWithIntern     1000000  avgt    5  1813072765.600 ± 619163864.504  ns/op</span><br><span class="line">StringInternTest.stringTestWithOutIntern    10000  avgt    5     1511080.000 ±    872905.808  ns/op</span><br><span class="line">StringInternTest.stringTestWithOutIntern   100000  avgt    5     8238751.953 ±   1401387.637  ns/op</span><br><span class="line">StringInternTest.stringTestWithOutIntern  1000000  avgt    5   763138737.923 ± 930573867.253  ns/op</span><br><span class="line"></span><br><span class="line">Benchmark result is saved to result.json</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://mp.weixin.qq.com/s/_LHV1PNbbCV9_d9aWzKOyg" target="_blank" rel="noopener">性能调优必备利器之JMH</a><br>[2] <a href="http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/" target="_blank" rel="noopener">openjdk/jmh/samples/</a><br>[3] <a href="https://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="noopener">code-tools/jmh</a><br>[4] <a href="https://javadoc.io/doc/org.openjdk.jmh/jmh-core/latest/index.html" target="_blank" rel="noopener">jmh-core api</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 代码工具：jmh  JMH是一个Java工具，用于构建、运行和分析nano/micro/mili/macro基准，这些基准是用Java和其他针对JVM的语言编写的。&lt;br&gt; Code Tools: jmh  JMH is a Java harness for building, running, and analysing nano/micro/milli/macro benchmarks written in Java and other languages targetting the JVM.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;JMH解决了什么问题&quot;&gt;&lt;a href=&quot;#JMH解决了什么问题&quot; class=&quot;headerlink&quot; title=&quot;JMH解决了什么问题&quot;&gt;&lt;/a&gt;JMH解决了什么问题&lt;/h1&gt;&lt;h1 id=&quot;JMH怎么用&quot;&gt;&lt;a href=&quot;#JMH怎么用&quot; class=&quot;headerlink&quot; title=&quot;JMH怎么用&quot;&gt;&lt;/a&gt;JMH怎么用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;添加对应jar包&lt;/li&gt;
&lt;li&gt;根据实际情况配置参数&lt;/li&gt;
&lt;li&gt;编写代码运行&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h2&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.openjdk.jmh&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jmh-core&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.23&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.openjdk.jmh&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jmh-generator-annprocess&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.23&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://weikeqin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://weikeqin.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java-performance-tuning</title>
    <link href="http://weikeqin.com/2020/06/14/java-performance-tuning/"/>
    <id>http://weikeqin.com/2020/06/14/java-performance-tuning/</id>
    <published>2020-06-14T07:04:39.000Z</published>
    <updated>2020-06-14T14:25:51.889Z</updated>
    
    <content type="html"><![CDATA[<p>  Java 性能调优不像是学一门编程语言，无法通过直线式的思维来掌握和应用，它对于工程师的技术广度和深度都有着较高的要求。<br>  互联网时代，一个简单的系统就囊括了应用程序、数据库、容器、操作系统、网络等技术，线上一旦出现性能问题，就可能要你协调多方面组件去进行优化，这就是技术广度；而很多性能问题呢，又隐藏得很深，可能因为一个小小的代码，也可能因为线程池的类型选择错误…可归根结底考验的还是我们对这项技术的了解程度，这就是技术深度。</p><p>  我们调优的对象不是单一的应用服务，而是错综复杂的系统。应用服务的性能可能与操作系统、网络、数据库等组件相关，所以我们需要储备计算机组成原理、操作系统、网络协议以及数据库等基础知识。具体的性能问题往往还与传输、计算、存储数据等相关，那我们还需要储备数据结构、算法以及数学等基础知识。</p><p>  如果你们公司做的是 12306 网站，不做系统性能优化就上线，试试看会是什么情况。</p><p>  一款线上产品如果没有经过性能测试，那它就好比是一颗定时炸弹，你不知道它什么时候会出现问题，你也不清楚它能承受的极限在哪儿。</p><p>  好的系统性能调优不仅仅可以提高系统的性能，还能为公司节省资源</p><a id="more"></a><p>  有哪些参考因素可以体现系统的性能？上面我们讲到了在项目研发的各个阶段性能调优是如何介入的，其中多次讲到了性能指标，那么性能指标到底有哪些呢？在我们了解性能指标之前，我们先来了解下哪些计算机资源会成为系统的性能瓶颈。CPU：有的应用需要大量计算，他们会长时间、不间断地占用 CPU 资源，导致其他资源无法争夺到 CPU 而响应缓慢，从而带来系统性能问题。例如，代码递归导致的无限循环，正则表达式引起的回溯，JVM 频繁的 FULL GC，以及多线程编程造成的大量上下文切换等，这些都有可能导致 CPU 资源繁忙。内存：Java 程序一般通过 JVM 对内存进行分配管理，主要是用 JVM 中的堆内存来存储 Java 创建的对象。系统堆内存的读写速度非常快，所以基本不存在读写性能瓶颈。但是由于内存成本要比磁盘高，相比磁盘，内存的存储空间又非常有限。所以当内存空间被占满，对象无法回收时，就会导致内存溢出、内存泄露等问题。磁盘 I/O：磁盘相比内存来说，存储空间要大很多，但磁盘 I/O 读写的速度要比内存慢，虽然目前引入的 SSD 固态硬盘已经有所优化，但仍然无法与内存的读写速度相提并论。网络：网络对于系统性能来说，也起着至关重要的作用。如果你购买过云服务，一定经历过，选择网络带宽大小这一环节。带宽过低的话，对于传输数据比较大，或者是并发量比较大的系统，网络就很容易成为性能瓶颈。异常：Java 应用中，抛出异常需要构建异常栈，对异常进行捕获和处理，这个过程非常消耗系统性能。如果在高并发的情况下引发异常，持续地进行异常处理，那么系统的性能就会明显地受到影响。数据库：大部分系统都会用到数据库，而数据库的操作往往是涉及到磁盘 I/O 的读写。大量的数据库读写操作，会导致磁盘 I/O 性能瓶颈，进而导致数据库操作的延迟性。对于有大量数据库读写操作的系统来说，数据库的性能优化是整个系统的核心。锁竞争：在并发编程中，我们经常会需要多个线程，共享读写操作同一个资源，这个时候为了保持数据的原子性（即保证这个共享资源在一个线程写的时候，不被另一个线程修改），我们就会用到锁。锁的使用可能会带来上下文切换，从而给系统带来性能开销。JDK1.6 之后，Java 为了降低锁竞争带来的上下文切换，对 JVM 内部锁已经做了多次优化，例如，新增了偏向锁、自旋锁、轻量级锁、锁粗化、锁消除等。而如何合理地使用锁资源</p><p>  数据库响应时间：数据库操作所消耗的时间，往往是整个请求链中最耗时的；<br>  服务端响应时间：服务端包括 Nginx 分发的请求所消耗的时间以及服务端程序执行所消耗的时间；<br>  网络响应时间：这是网络传输时，网络硬件需要对传输的请求进行解析等操作所消耗的时间；<br>  客户端响应时间：对于普通的 Web、App 客户端来说，消耗时间是可以忽略不计的，但如果你的客户端嵌入了大量的逻辑处理，消耗的时间就有可能变长，从而成为系统的瓶颈。</p><p>  网络吞吐量不仅仅跟带宽有关系，还跟 CPU 的处理能力、网卡、防火墙、外部接口以及 I/O 等紧密关联。</p><p>  当系统压力上升时，你可以观察，系统响应时间的上升曲线是否平缓。这项指标能直观地反馈给你，系统所能承受的负载压力极限。</p><p>  QPS特指的一次查询请求，TPS是指每次处理事务请求，TPS包括了QPS，例如一个事务处理可能包括多个查询请求。</p><p>  当我们做性能测试时，我们的系统会运行得越来越快，后面的访问速度要比我们第一次访问的速度快上几倍。这是怎么回事呢？<br>  在 Java 编程语言和环境中，.java 文件编译成为 .class 文件后，机器还是无法直接运行 .class 文件中的字节码，需要通过解释器将字节码转换成本地机器码才能运行。<br>  为了节约内存和执行效率，代码最初被执行时，解释器会率先解释执行这段代码。<br>  随着代码被执行的次数增多，当虚拟机发现某个方法或代码块运行得特别频繁时，就会把这些代码认定为热点代码（Hot Spot Code）。<br>  为了提高热点代码的执行效率，在运行时，虚拟机将会通过即时编译器（JIT compiler，just-in-time compiler）把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，然后存储在内存中，之后每次运行代码时，直接从内存中获取即可。</p><p>  在完成性能测试之后，需要输出一份性能测试报告，帮我们分析系统性能测试的情况。<br>  其中测试结果需要包含测试接口的平均、最大和最小吞吐量，响应时间，服务器的 CPU、内存、I/O、网络 IO 使用率，JVM 的 GC 频率等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SharedLocation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String city;</span><br><span class="line">  <span class="keyword">private</span> String region;</span><br><span class="line">  <span class="keyword">private</span> String countryCode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Location</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> SharedLocation sharedLocation;</span><br><span class="line">  <span class="keyword">double</span> longitude;</span><br><span class="line">  <span class="keyword">double</span> latitude;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SharedLocation sharedLocation = new SharedLocation();</span><br><span class="line"></span><br><span class="line">sharedLocation.setCity(messageInfo.getCity().intern());    </span><br><span class="line">sharedLocation.setCountryCode(messageInfo.getRegion().intern());</span><br><span class="line">sharedLocation.setRegion(messageInfo.getCountryCode().intern());</span><br><span class="line"></span><br><span class="line">Location location = new Location();</span><br><span class="line">location.set(sharedLocation);</span><br><span class="line">location.set(messageInfo.getLongitude());</span><br><span class="line">location.set(messageInfo.getLatitude());</span><br></pre></td></tr></table></figure><p>严格来说，是静态常量池和运行时常量池，静态常量池是存放字符串字面量、符号引用以及类和方法的信息，而运行时常量池存放的是运行时一些直接引用。</p><p>运行时常量池是在类加载完成之后，将静态常量池中的符号引用值转存到运行时常量池中，类在解析之后，将符号引用替换成直接引用。</p><p>这两个常量池在JDK1.7版本之后，就移到堆内存中了，这里指的是物理空间，而逻辑上还是属于方法区（方法区是逻辑分区）。</p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式引擎<br>  DFA 自动机（Deterministic Final Automaton 确定有限状态自动机）<br>  NFA 自动机（Non deterministic Finite Automaton 非确定有限状态自动机）</p><p>构造 DFA 自动机的代价远大于 NFA 自动机，但 DFA 自动机的执行效率高于 NFA 自动机</p><p>  贪婪模式（Greedy）  顾名思义，就是在数量匹配中，如果单独使用 +、 ? 、* 或{min,max} 等量词，正则表达式会匹配尽可能多的内容。<br>    text=“abbc” regex=“ab{1,3}c”<br>  懒惰模式（Reluctant）在该模式下，正则表达式会尽可能少地重复匹配字符。如果匹配成功，它会继续匹配剩余的字符串。<br>    text=“abbc” regex=“ab{1,3}?c”<br>  独占模式（Possessive）同贪婪模式一样，独占模式一样会最大限度地匹配更多内容；不同的是，在独占模式下，匹配失败就会结束匹配，不会发生回溯问题。<br>    text=“abbc” regex=“ab{1,3}+bc”</p><blockquote><p> 在很多情况下使用懒惰模式和独占模式可以减少回溯的发生。</p></blockquote><blockquote><ol><li>少用贪婪模式，多用独占模式</li><li>减少分支选择   分支选择类型“(X|Y|Z)”的正则表达式会降低性能</li><li>减少捕获嵌套     一般一个 () 就是一个捕获组，捕获组可以进行嵌套。</li></ol></blockquote><p>  for(:)循环[这里指的不是for(;;)]是一个语法糖，这里会被解释为迭代器，在使用迭代器遍历时，ArrayList内部创建了一个内部迭代器iterator，在使用next()方法来取下一个元素时，会使用ArrayList里保存的一个用来记录List修改次数的变量modCount，与iterator保存了一个expectedModCount来表示期望的修改次数进行比较，如果不相等则会抛出异常；</p><p>  而在在foreach循环中调用list中的remove()方法，会走到fastRemove()方法，该方法不是iterator中的方法，而是ArrayList中的方法，在该方法只做了modCount++，而没有同步到expectedModCount。</p><p>  当再次遍历时，会先调用内部类iteator中的hasNext(),再调用next(),在调用next()方法时，会对modCount和expectedModCount进行比较，此时两者不一致，就抛出了ConcurrentModificationException异常。</p><p>  所以关键是用ArrayList的remove还是iterator中的remove。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  Java 性能调优不像是学一门编程语言，无法通过直线式的思维来掌握和应用，它对于工程师的技术广度和深度都有着较高的要求。&lt;br&gt;  互联网时代，一个简单的系统就囊括了应用程序、数据库、容器、操作系统、网络等技术，线上一旦出现性能问题，就可能要你协调多方面组件去进行优化，这就是技术广度；而很多性能问题呢，又隐藏得很深，可能因为一个小小的代码，也可能因为线程池的类型选择错误…可归根结底考验的还是我们对这项技术的了解程度，这就是技术深度。&lt;/p&gt;
&lt;p&gt;  我们调优的对象不是单一的应用服务，而是错综复杂的系统。应用服务的性能可能与操作系统、网络、数据库等组件相关，所以我们需要储备计算机组成原理、操作系统、网络协议以及数据库等基础知识。具体的性能问题往往还与传输、计算、存储数据等相关，那我们还需要储备数据结构、算法以及数学等基础知识。&lt;/p&gt;
&lt;p&gt;  如果你们公司做的是 12306 网站，不做系统性能优化就上线，试试看会是什么情况。&lt;/p&gt;
&lt;p&gt;  一款线上产品如果没有经过性能测试，那它就好比是一颗定时炸弹，你不知道它什么时候会出现问题，你也不清楚它能承受的极限在哪儿。&lt;/p&gt;
&lt;p&gt;  好的系统性能调优不仅仅可以提高系统的性能，还能为公司节省资源&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://weikeqin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://weikeqin.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>并发模型</title>
    <link href="http://weikeqin.com/2020/06/13/concurrent-model/"/>
    <id>http://weikeqin.com/2020/06/13/concurrent-model/</id>
    <published>2020-06-13T15:17:59.000Z</published>
    <updated>2020-06-14T03:54:36.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Actor"><a href="#1-Actor" class="headerlink" title="(1) Actor"></a>(1) Actor</h1><blockquote><p> Actor模型：面向对象原生的并发模型</p></blockquote><blockquote><p> Actor模型是高性能网络中处理并行任务的一种方法，解决并发问题的利器</p></blockquote><blockquote><p> Actor模型本质上是一种计算模型，基本的计算单元称为 Actor，在 Actor 模型里，一切都是 Actor，所有的计算都是在 Actor 中执行的，并且 Actor 之间是完全隔离的，不会共享任何变量。  </p></blockquote><blockquote><p> Actor模型解决了 传统编程假设与现代多线程、多CPU架构的现实之间的不匹配问题。</p><ol><li>消息传递的使用避免了锁和阻塞。  </li><li>Actor能够优化地处理错误情况。 </li></ol></blockquote><blockquote><p> Java 语言本身并不支持 Actor 模型，所以如果你想在 Java 语言里使用 Actor 模型，就需要借助第三方类库，目前能完备地支持 Actor 模型而且比较成熟的类库就是 Akka。</p></blockquote><a id="more"></a><h1 id="2-STM"><a href="#2-STM" class="headerlink" title="(2) STM"></a>(2) STM</h1><p>  软件事务内存（Software Transactional Memory，简称 STM）</p><blockquote><p> 传统的数据库事务，支持 4 个特性：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability），也就是大家常说的 ACID<br> STM 由于不涉及到持久化，所以只支持 ACI。 </p></blockquote><p>  <a href="https://github.com/pveentjer/Multiverse" target="_blank" rel="noopener">Multiverse</a><br>  <a href="http://www.codecommit.com/blog/scala/software-transactional-memory-in-scala" target="_blank" rel="noopener">software-transactional-memory-in-scala</a><br>  <a href="https://github.com/epam-mooc/stm-java" target="_blank" rel="noopener">stm-java</a></p><p><br></p><h1 id="3-协程"><a href="#3-协程" class="headerlink" title="(3) 协程"></a>(3) 协程</h1><blockquote><p> 我们可以把协程简单地理解为一种轻量级的线程。从操作系统的角度来看，线程是在内核态中调度的，而协程是在用户态调度的，所以相对于线程来说，协程切换的成本更低。协程虽然也有自己的栈，但是相比线程栈要小得多，典型的线程栈大小差不多有 1M，而协程栈的大小往往只有几 K 或者几十 K。所以，无论是从时间维度还是空间维度来看，协程都比线程轻量得多。</p></blockquote><blockquote><p> 支持协程的语言还是挺多的，例如 Golang、Python、Lua、Kotlin 等都支持协程。</p></blockquote><h2 id="3-1-golang中的协程"><a href="#3-1-golang中的协程" class="headerlink" title="(3.1) golang中的协程"></a>(3.1) golang中的协程</h2><blockquote><p> 在 Golang 中创建协程非常简单，在下面的示例代码中，要让 hello() 方法在一个新的协程中执行，只需要go hello(“World”) 这一行代码就搞定了。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"Hello "</span> + msg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//在新的协程中执行hello方法</span></span><br><span class="line">  <span class="keyword">go</span> hello(<span class="string">"World"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Run in main"</span>)</span><br><span class="line">    <span class="comment">//等待100毫秒让协程执行结束</span></span><br><span class="line">  time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="4-CSP模型"><a href="#4-CSP模型" class="headerlink" title="(4) CSP模型"></a>(4) CSP模型</h1><p>  CSP（Communicating Sequential Processes）</p><blockquote><p> 打印从 1 累加到 100 亿的结果，如果使用单个协程来计算，大概需要 4 秒多的时间。单个协程，只能用到 CPU 中的一个核，为了提高计算性能，我们可以用多个协程来并行计算，这样就能发挥多核的优势了。<br> 用了 4 个子协程来并行执行，这 4 个子协程分别计算[1, 25 亿]、(25 亿, 50 亿]、(50 亿, 75 亿]、(75 亿, 100 亿]，最后再在主协程中汇总 4 个子协程的计算结果。主协程要汇总 4 个子协程的计算结果，势必要和 4 个子协程之间通信，Golang 中协程之间通信推荐的是使用 channel，channel 你可以形象地理解为现实世界里的管道。</p></blockquote><pre><code class="go"><span class="keyword">import</span> (  <span class="string">"fmt"</span>  <span class="string">"time"</span>)<span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {    <span class="comment">// 变量声明</span>  <span class="keyword">var</span> result, i <span class="keyword">uint64</span>    <span class="comment">// 单个协程执行累加操作</span>  start := time.Now()  <span class="keyword">for</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000000000</span>; i++ {    result += i  }  <span class="comment">// 统计计算耗时</span>  elapsed := time.Since(start)  fmt.Printf(<span class="string">"执行消耗的时间为:"</span>, elapsed)  fmt.Println(<span class="string">", result:"</span>, result)    <span class="comment">// 4个协程共同执行累加操作</span>  start = time.Now()  ch1 := calc(<span class="number">1</span>, <span class="number">2500000000</span>)  ch2 := calc(<span class="number">2500000001</span>, <span class="number">5000000000</span>)  ch3 := calc(<span class="number">5000000001</span>, <span class="number">7500000000</span>)  ch4 := calc(<span class="number">7500000001</span>, <span class="number">10000000000</span>)    <span class="comment">// 汇总4个协程的累加结果</span>  result = &lt;-ch1 + &lt;-ch2 + &lt;-ch3 + &lt;-ch4  <span class="comment">// 统计计算耗时</span>  elapsed = time.Since(start)  fmt.Printf(<span class="string">"执行消耗的时间为:"</span>, elapsed)  fmt.Println(<span class="string">", result:"</span>, result)}<span class="comment">// 在协程中异步执行累加操作，累加结果通过channel传递</span><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(from <span class="keyword">uint64</span>, to <span class="keyword">uint64</span>)</span> &lt;-<span class="title">chan</span> <span class="title">uint64</span></span> {    <span class="comment">// channel用于协程间的通信</span>  ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">uint64</span>)    <span class="comment">// 在协程中执行累加操作</span>  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {    result := from    <span class="keyword">for</span> i := from + <span class="number">1</span>; i &lt;= to; i++ {      result += i    }        <span class="comment">// 将结果写入channel</span>    ch &lt;- result  }()    <span class="comment">// 返回结果是用于通信的channel</span>  <span class="keyword">return</span> ch}</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://time.geekbang.org/column/article/98903" target="_blank" rel="noopener">42 | Actor模型：面向对象原生的并发模型</a><br>[2] <a href="https://time.geekbang.org/column/article/99251" target="_blank" rel="noopener">43 | 软件事务内存：借鉴数据库的并发经验</a><br>[3] <a href="https://time.geekbang.org/column/article/99787" target="_blank" rel="noopener">44 | 协程：更轻量级的线程</a><br>[4] <a href="https://time.geekbang.org/column/article/100098" target="_blank" rel="noopener">45 | CSP模型：Golang的主力队员</a><br>[5] <a href="https://doc.akka.io/docs/akka/2.2/AkkaJava.pdf" target="_blank" rel="noopener">doc.akka.io/docs/akka/2.2/AkkaJava.pdf</a><br>[6] <a href="https://developer.lightbend.com/guides/akka-quickstart-java/" target="_blank" rel="noopener">guides/akka-quickstart-java</a><br>[7] <a href="https://developer.lightbend.com/start/?group=akka&amp;project=akka-quickstart-java" target="_blank" rel="noopener">akka-quickstart-java</a><br>[8] <a href="https://doc.akka.io/docs/akka/current/index.html" target="_blank" rel="noopener">doc.akka.io/docs/akka/current</a><br>[9] <a href="https://github.com/guobinhit/akka-guide" target="_blank" rel="noopener">akka-guide</a><br>[10] <a href="https://github.com/epam-mooc/stm-java" target="_blank" rel="noopener">stm-java</a><br>[11] <a href="http://www.codecommit.com/blog/scala/software-transactional-memory-in-scala" target="_blank" rel="noopener">software-transactional-memory-in-scala</a><br>[12] <a href="https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/" target="_blank" rel="noopener">notes-on-structured-concurrency-or-go-statement-considered-harmful</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Actor&quot;&gt;&lt;a href=&quot;#1-Actor&quot; class=&quot;headerlink&quot; title=&quot;(1) Actor&quot;&gt;&lt;/a&gt;(1) Actor&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; Actor模型：面向对象原生的并发模型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Actor模型是高性能网络中处理并行任务的一种方法，解决并发问题的利器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Actor模型本质上是一种计算模型，基本的计算单元称为 Actor，在 Actor 模型里，一切都是 Actor，所有的计算都是在 Actor 中执行的，并且 Actor 之间是完全隔离的，不会共享任何变量。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Actor模型解决了 传统编程假设与现代多线程、多CPU架构的现实之间的不匹配问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;消息传递的使用避免了锁和阻塞。  &lt;/li&gt;
&lt;li&gt;Actor能够优化地处理错误情况。 &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Java 语言本身并不支持 Actor 模型，所以如果你想在 Java 语言里使用 Actor 模型，就需要借助第三方类库，目前能完备地支持 Actor 模型而且比较成熟的类库就是 Akka。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="concurrent" scheme="http://weikeqin.com/categories/concurrent/"/>
    
    
      <category term="concurrent" scheme="http://weikeqin.com/tags/concurrent/"/>
    
      <category term="model" scheme="http://weikeqin.com/tags/model/"/>
    
  </entry>
  
  <entry>
    <title>akka笔记</title>
    <link href="http://weikeqin.com/2020/06/13/akka-notes/"/>
    <id>http://weikeqin.com/2020/06/13/akka-notes/</id>
    <published>2020-06-13T14:26:44.000Z</published>
    <updated>2020-06-14T03:57:03.276Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> Akka is a toolkit and runtime for building highly concurrent, distributed, and fault-tolerant event-driven applications on the JVM. Akka can be used with both Java and Scala. This guide introduces Akka by describing the Java version of the Hello World example. If you prefer to use Akka with Scala, switch to the Akka Quickstart with Scala guide.</p></blockquote><blockquote><p> Actors are the unit of execution in Akka. The Actor model is an abstraction that makes it easier to write correct concurrent, parallel and distributed systems. The Hello World example illustrates Akka basics. Within 30 minutes, you should be able to download and run the example and use this guide to understand how the example is constructed. This will get your feet wet, and hopefully inspire you to dive deeper into the wonderful sea of Akka!</p></blockquote><h1 id="解决了什么问题"><a href="#解决了什么问题" class="headerlink" title="解决了什么问题"></a>解决了什么问题</h1><blockquote><p> Akka是Actor模型的一种实现<br> Actor模型解决了 传统编程假设与现代多线程、多CPU架构的现实之间的不匹配问题。</p><ol><li>消息传递的使用避免了锁和阻塞。  </li><li>Actor能够优化地处理错误情况。 </li></ol></blockquote><blockquote><p> Usage of message passing avoids locking and blocking.<br> Actors handle error situations gracefully</p></blockquote><p><strong> OOP在构建苛刻需求的分布式系统会遇到的问题 </strong></p><blockquote><ol><li>并发情况下封装导致效率问题和死锁问题。</li><li>并发时共享内存失效(CPU缓存失效导致)导致效率低的问题。</li><li>调用栈导致的后台线程在异常时的通信问题以及后续问题。</li></ol></blockquote><blockquote><ol><li>The challenge of encapsulation</li><li>The illusion of shared memory on modern computer architectures</li><li>The illusion of a call stack</li></ol></blockquote><a id="more"></a><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><blockquote><p> After trying this example the comprehensive Getting Started Guide is a good next step to continue learning more about Akka.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">bogon:akka-quickstart-java weikeqin1$</span><br><span class="line">bogon:akka-quickstart-java weikeqin1$ mvn compile exec:exec</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/plugins/maven-compiler-plugin/3.5.1/maven-compiler-plugin-3.5.1.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/plugins/maven-compiler-plugin/3.5.1/maven-compiler-plugin-3.5.1.pom (10 kB at 15 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/plugins/maven-compiler-plugin/3.5.1/maven-compiler-plugin-3.5.1.jar</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/plugins/maven-compiler-plugin/3.5.1/maven-compiler-plugin-3.5.1.jar (50 kB at 138 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/mojo/exec-maven-plugin/1.6.0/exec-maven-plugin-1.6.0.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/mojo/exec-maven-plugin/1.6.0/exec-maven-plugin-1.6.0.pom (13 kB at 65 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/mojo/exec-maven-plugin/1.6.0/exec-maven-plugin-1.6.0.jar</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/mojo/exec-maven-plugin/1.6.0/exec-maven-plugin-1.6.0.jar (58 kB at 179 kB/s)</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ------------------------&lt; hello-akka-java:app &gt;-------------------------</span><br><span class="line">[INFO] Building app 1.0</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-actor-typed_2.13/2.6.6/akka-actor-typed_2.13-2.6.6.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-actor-typed_2.13/2.6.6/akka-actor-typed_2.13-2.6.6.pom (2.6 kB at 11 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-slf4j_2.13/2.6.6/akka-slf4j_2.13-2.6.6.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-slf4j_2.13/2.6.6/akka-slf4j_2.13-2.6.6.pom (2.9 kB at 7.9 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-actor-testkit-typed_2.13/2.6.6/akka-actor-testkit-typed_2.13-2.6.6.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-actor-testkit-typed_2.13/2.6.6/akka-actor-testkit-typed_2.13-2.6.6.pom (3.6 kB at 12 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-testkit_2.13/2.6.6/akka-testkit_2.13-2.6.6.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-testkit_2.13/2.6.6/akka-testkit_2.13-2.6.6.pom (3.5 kB at 10 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-actor-typed_2.13/2.6.6/akka-actor-typed_2.13-2.6.6.jar</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-testkit_2.13/2.6.6/akka-testkit_2.13-2.6.6.jar</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-actor-testkit-typed_2.13/2.6.6/akka-actor-testkit-typed_2.13-2.6.6.jar</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-slf4j_2.13/2.6.6/akka-slf4j_2.13-2.6.6.jar</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-slf4j_2.13/2.6.6/akka-slf4j_2.13-2.6.6.jar (17 kB at 38 kB/s)</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-testkit_2.13/2.6.6/akka-testkit_2.13-2.6.6.jar (261 kB at 328 kB/s)</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-actor-testkit-typed_2.13/2.6.6/akka-actor-testkit-typed_2.13-2.6.6.jar (315 kB at 382 kB/s)</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/com/typesafe/akka/akka-actor-typed_2.13/2.6.6/akka-actor-typed_2.13-2.6.6.jar (1.2 MB at 1.1 MB/s)</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ app ---</span><br><span class="line">[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!</span><br><span class="line">[INFO] Copying 1 resource</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ app ---</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-api/2.7/plexus-compiler-api-2.7.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-api/2.7/plexus-compiler-api-2.7.pom (891 B at 3.2 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler/2.7/plexus-compiler-2.7.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler/2.7/plexus-compiler-2.7.pom (4.9 kB at 34 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-manager/2.7/plexus-compiler-manager-2.7.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-manager/2.7/plexus-compiler-manager-2.7.pom (711 B at 3.0 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-javac/2.7/plexus-compiler-javac-2.7.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-javac/2.7/plexus-compiler-javac-2.7.pom (792 B at 5.3 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compilers/2.7/plexus-compilers-2.7.pom</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compilers/2.7/plexus-compilers-2.7.pom (1.4 kB at 3.1 kB/s)</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-api/2.7/plexus-compiler-api-2.7.jar</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-manager/2.7/plexus-compiler-manager-2.7.jar</span><br><span class="line">Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-javac/2.7/plexus-compiler-javac-2.7.jar</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-manager/2.7/plexus-compiler-manager-2.7.jar (4.7 kB at 30 kB/s)</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-javac/2.7/plexus-compiler-javac-2.7.jar (19 kB at 113 kB/s)</span><br><span class="line">Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/codehaus/plexus/plexus-compiler-api/2.7/plexus-compiler-api-2.7.jar (26 kB at 90 kB/s)</span><br><span class="line">[INFO] Changes detected - recompiling the module!</span><br><span class="line">[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!</span><br><span class="line">[INFO] Compiling 4 source files to /Users/weikeqin1/Downloads/akka-quickstart-java/target/classes</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- exec-maven-plugin:1.6.0:exec (default-cli) @ app ---</span><br><span class="line">SLF4J: A number (1) of logging calls during the initialization phase have been intercepted and are</span><br><span class="line">SLF4J: now being replayed. These are subject to the filtering rules of the underlying logging system.</span><br><span class="line">SLF4J: See also http://www.slf4j.org/codes.html#replay</span><br><span class="line">[2020-06-13 22:44:03,567] [INFO] [akka.event.slf4j.Slf4jLogger] [helloakka-akka.actor.default-dispatcher-3] [] - Slf4jLogger started</span><br><span class="line">&gt;&gt;&gt; Press ENTER to exit &lt;&lt;&lt;</span><br><span class="line">[2020-06-13 22:44:03,660] [INFO] [com.example.Greeter] [helloakka-akka.actor.default-dispatcher-5] [akka://helloakka/user/greeter] - Hello Charles!</span><br><span class="line">[2020-06-13 22:44:03,663] [INFO] [com.example.GreeterBot] [helloakka-akka.actor.default-dispatcher-3] [akka://helloakka/user/Charles] - Greeting 1 for Charles</span><br><span class="line">[2020-06-13 22:44:03,663] [INFO] [com.example.Greeter] [helloakka-akka.actor.default-dispatcher-5] [akka://helloakka/user/greeter] - Hello Charles!</span><br><span class="line">[2020-06-13 22:44:03,663] [INFO] [com.example.GreeterBot] [helloakka-akka.actor.default-dispatcher-3] [akka://helloakka/user/Charles] - Greeting 2 for Charles</span><br><span class="line">[2020-06-13 22:44:03,663] [INFO] [com.example.Greeter] [helloakka-akka.actor.default-dispatcher-5] [akka://helloakka/user/greeter] - Hello Charles!</span><br><span class="line">[2020-06-13 22:44:03,664] [INFO] [com.example.GreeterBot] [helloakka-akka.actor.default-dispatcher-5] [akka://helloakka/user/Charles] - Greeting 3 for Charles</span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  23.459 s</span><br><span class="line">[INFO] Finished at: 2020-06-13T22:44:16+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">bogon:akka-quickstart-java weikeqin1$</span><br><span class="line">bogon:akka-quickstart-java weikeqin1$</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.ActorSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AkkaQuickstart</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//#actor-system</span></span><br><span class="line">    <span class="keyword">final</span> ActorSystem&lt;GreeterMain.SayHello&gt; greeterMain = ActorSystem.create(GreeterMain.create(), <span class="string">"helloakka"</span>);</span><br><span class="line">    <span class="comment">//#actor-system</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//#main-send-messages</span></span><br><span class="line">    greeterMain.tell(<span class="keyword">new</span> GreeterMain.SayHello(<span class="string">"Charles"</span>));</span><br><span class="line">    <span class="comment">//#main-send-messages</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">"&gt;&gt;&gt; Press ENTER to exit &lt;&lt;&lt;"</span>);</span><br><span class="line">      System.in.read();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      greeterMain.terminate();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.ActorRef;</span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.Behavior;</span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.javadsl.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #greeter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">AbstractBehavior</span>&lt;<span class="title">Greeter</span>.<span class="title">Greet</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Greet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String whom;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ActorRef&lt;Greeted&gt; replyTo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Greet</span><span class="params">(String whom, ActorRef&lt;Greeted&gt; replyTo)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.whom = whom;</span><br><span class="line">      <span class="keyword">this</span>.replyTo = replyTo;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Greeted</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String whom;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ActorRef&lt;Greet&gt; from;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Greeted</span><span class="params">(String whom, ActorRef&lt;Greet&gt; from)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.whom = whom;</span><br><span class="line">      <span class="keyword">this</span>.from = from;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #greeter</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      Greeted greeted = (Greeted) o;</span><br><span class="line">      <span class="keyword">return</span> Objects.equals(whom, greeted.whom) &amp;&amp;</span><br><span class="line">              Objects.equals(from, greeted.from);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Objects.hash(whom, from);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Greeted&#123;"</span> +</span><br><span class="line">              <span class="string">"whom='"</span> + whom + <span class="string">'\''</span> +</span><br><span class="line">              <span class="string">", from="</span> + from +</span><br><span class="line">              <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// #greeter</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Behavior&lt;Greet&gt; <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Behaviors.setup(Greeter::<span class="keyword">new</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Greeter</span><span class="params">(ActorContext&lt;Greet&gt; context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Receive&lt;Greet&gt; <span class="title">createReceive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> newReceiveBuilder().onMessage(Greet.class, <span class="keyword">this</span>::onGreet).build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Behavior&lt;Greet&gt; <span class="title">onGreet</span><span class="params">(Greet command)</span> </span>&#123;</span><br><span class="line">    getContext().getLog().info(<span class="string">"Hello &#123;&#125;!"</span>, command.whom);</span><br><span class="line">    <span class="comment">//#greeter-send-message</span></span><br><span class="line">    command.replyTo.tell(<span class="keyword">new</span> Greeted(command.whom, getContext().getSelf()));</span><br><span class="line">    <span class="comment">//#greeter-send-message</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #greeter</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.Behavior;</span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.javadsl.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreeterBot</span> <span class="keyword">extends</span> <span class="title">AbstractBehavior</span>&lt;<span class="title">Greeter</span>.<span class="title">Greeted</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Behavior&lt;Greeter.Greeted&gt; create(<span class="keyword">int</span> max) &#123;</span><br><span class="line">        <span class="keyword">return</span> Behaviors.setup(context -&gt; <span class="keyword">new</span> GreeterBot(context, max));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> max;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> greetingCounter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GreeterBot</span><span class="params">(ActorContext&lt;Greeter.Greeted&gt; context, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        <span class="keyword">this</span>.max = max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Receive&lt;Greeter.Greeted&gt; createReceive() &#123;</span><br><span class="line">        <span class="keyword">return</span> newReceiveBuilder().onMessage(Greeter.Greeted.class, <span class="keyword">this</span>::onGreeted).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Behavior&lt;Greeter.Greeted&gt; onGreeted(Greeter.Greeted message) &#123;</span><br><span class="line">        greetingCounter++;</span><br><span class="line">        getContext().getLog().info(<span class="string">"Greeting &#123;&#125; for &#123;&#125;"</span>, greetingCounter, message.whom);</span><br><span class="line">        <span class="keyword">if</span> (greetingCounter == max) &#123;</span><br><span class="line">            <span class="keyword">return</span> Behaviors.stopped();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            message.from.tell(<span class="keyword">new</span> Greeter.Greet(message.whom, getContext().getSelf()));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.ActorRef;</span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.Behavior;</span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.javadsl.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreeterMain</span> <span class="keyword">extends</span> <span class="title">AbstractBehavior</span>&lt;<span class="title">GreeterMain</span>.<span class="title">SayHello</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SayHello</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ActorRef&lt;Greeter.Greet&gt; greeter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Behavior&lt;SayHello&gt; <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Behaviors.setup(GreeterMain::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GreeterMain</span><span class="params">(ActorContext&lt;SayHello&gt; context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        <span class="comment">//#create-actors</span></span><br><span class="line">        greeter = context.spawn(Greeter.create(), <span class="string">"greeter"</span>);</span><br><span class="line">        <span class="comment">//#create-actors</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Receive&lt;SayHello&gt; <span class="title">createReceive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newReceiveBuilder().onMessage(SayHello.class, <span class="keyword">this</span>::onSayHello).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Behavior&lt;SayHello&gt; <span class="title">onSayHello</span><span class="params">(SayHello command)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//#create-actors</span></span><br><span class="line">        ActorRef&lt;Greeter.Greeted&gt; replyTo =</span><br><span class="line">                getContext().spawn(GreeterBot.create(<span class="number">3</span>), command.name);</span><br><span class="line">        greeter.tell(<span class="keyword">new</span> Greeter.Greet(command.name, replyTo));</span><br><span class="line">        <span class="comment">//#create-actors</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Actor class [cn.wkq.java.akka.AkkaDemo$HelloActor] must be subClass of akka.actor.Actor or akka.actor.IndirectActorProducer.</span><br><span class="line">at akka.actor.AbstractProps.validate(AbstractProps.scala:31)</span><br></pre></td></tr></table></figure><h1 id="Rferences"><a href="#Rferences" class="headerlink" title="Rferences"></a>Rferences</h1><p>[1] <a href="https://time.geekbang.org/column/article/98903" target="_blank" rel="noopener">42 | Actor模型：面向对象原生的并发模型</a><br>[2] <a href="https://doc.akka.io/docs/akka/current/index.html" target="_blank" rel="noopener">doc.akka.io/docs/akka/current</a><br>[3] <a href="https://github.com/guobinhit/akka-guide" target="_blank" rel="noopener">akka-guide</a><br>[4] <a href="https://doc.akka.io/docs/akka/current/typed/guide/actors-motivation.html" target="_blank" rel="noopener">Why modern systems need a new programming model</a><br>[5] <a href="https://doc.akka.io/docs/akka/current/typed/guide/actors-intro.html" target="_blank" rel="noopener">How the Actor Model Meets the Needs of Modern, Distributed Systems</a><br>[6] <a href="https://doc.akka.io/docs/akka/2.2/AkkaJava.pdf" target="_blank" rel="noopener">doc.akka.io/docs/akka/2.2/AkkaJava.pdf</a><br>[7] <a href="https://developer.lightbend.com/guides/akka-quickstart-java/" target="_blank" rel="noopener">guides/akka-quickstart-java</a><br>[8] <a href="https://developer.lightbend.com/start/?group=akka&amp;project=akka-quickstart-java" target="_blank" rel="noopener">akka-quickstart-java</a><br>[9] <a href="https://github.com/mpeltonen/sbt-idea" target="_blank" rel="noopener">sbt-idea</a><br>[10] <a href="https://blog.csdn.net/qq_35246620/article/details/79050895" target="_blank" rel="noopener">快速入门 Akka Java 指南</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; Akka is a toolkit and runtime for building highly concurrent, distributed, and fault-tolerant event-driven applications on the JVM. Akka can be used with both Java and Scala. This guide introduces Akka by describing the Java version of the Hello World example. If you prefer to use Akka with Scala, switch to the Akka Quickstart with Scala guide.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Actors are the unit of execution in Akka. The Actor model is an abstraction that makes it easier to write correct concurrent, parallel and distributed systems. The Hello World example illustrates Akka basics. Within 30 minutes, you should be able to download and run the example and use this guide to understand how the example is constructed. This will get your feet wet, and hopefully inspire you to dive deeper into the wonderful sea of Akka!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;解决了什么问题&quot;&gt;&lt;a href=&quot;#解决了什么问题&quot; class=&quot;headerlink&quot; title=&quot;解决了什么问题&quot;&gt;&lt;/a&gt;解决了什么问题&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; Akka是Actor模型的一种实现&lt;br&gt; Actor模型解决了 传统编程假设与现代多线程、多CPU架构的现实之间的不匹配问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;消息传递的使用避免了锁和阻塞。  &lt;/li&gt;
&lt;li&gt;Actor能够优化地处理错误情况。 &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Usage of message passing avoids locking and blocking.&lt;br&gt; Actors handle error situations gracefully&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt; OOP在构建苛刻需求的分布式系统会遇到的问题 &lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;并发情况下封装导致效率问题和死锁问题。&lt;/li&gt;
&lt;li&gt;并发时共享内存失效(CPU缓存失效导致)导致效率低的问题。&lt;/li&gt;
&lt;li&gt;调用栈导致的后台线程在异常时的通信问题以及后续问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;The challenge of encapsulation&lt;/li&gt;
&lt;li&gt;The illusion of shared memory on modern computer architectures&lt;/li&gt;
&lt;li&gt;The illusion of a call stack&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://weikeqin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://weikeqin.com/tags/java/"/>
    
      <category term="concurrent" scheme="http://weikeqin.com/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>jvm-config</title>
    <link href="http://weikeqin.com/2020/06/09/jvm-config/"/>
    <id>http://weikeqin.com/2020/06/09/jvm-config/</id>
    <published>2020-06-09T12:30:28.000Z</published>
    <updated>2020-06-14T15:34:05.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用的JVM配置"><a href="#常用的JVM配置" class="headerlink" title="常用的JVM配置"></a>常用的JVM配置</h1><p>  <code>-Dfile.encoding=UTF-8</code> 文件使用UTF-8编码<br>  <code>-Xms2g</code> 设置初始堆大小为2G<br>  <code>-Xmx2g</code> 设置最大堆大小为1G<br>  <code>-Xmn1g</code> 设置新生代大小为1G</p><p>  <code>-Xss256k</code>  设置每个线程的堆栈大小，和栈的深度和容器创建的最大线程数有关</p><p>  <code>-XX:LargePageSizeInBytes=128m</code>  内存页的大小不可设置过大， 会影响Perm的大小<br>  <code>-XX:MaxDirectMemorySize=536870912</code> </p><p>  <code>-XX:+UseFastAccessorMethods</code>  原始类型的快速优化</p><h1 id="垃圾回收统计信息"><a href="#垃圾回收统计信息" class="headerlink" title="垃圾回收统计信息"></a>垃圾回收统计信息</h1><p>  <code>-XX:+PrintGC</code>  用于垃圾收集时的信息打印<br>  <code>-XX:+PrintGCDetails</code>  打印GC详细信息<br>  <code>-XX:+PrintGCTimeStamps</code><br>  <code>-XX:+DisableExplicitGC</code>  禁止代码中显示调用GC<br>  <code>-Xloggc:filename</code></p><h1 id="异常日志"><a href="#异常日志" class="headerlink" title="异常日志"></a>异常日志</h1><p>  <code>-XX:+HeapDumpOnOutOfMemoryError</code> OOM后保存堆栈信息<br>  <code>-XX:-OmitStackTraceInFastThrow</code> 当大量抛出同样的异常的后，后面的异常输出将不打印堆栈<br>  <code>-XX:ErrorFile=logs/hs_err_pid%p.log</code> </p><p>  <code>-XX:+HeapDumpBeforeFullGC</code> FullGC前保存堆栈信息  测试环境使用，线上最好别用，小心磁盘被打满<br>  <code>-XX:+HeapDumpAfterFullGC</code> FullGC后保存堆栈信息  测试环境使用，线上最好别用，小心磁盘被打满</p><h1 id="JIT-config"><a href="#JIT-config" class="headerlink" title="JIT config"></a>JIT config</h1><h2 id="XX-CompileThreshold-128"><a href="#XX-CompileThreshold-128" class="headerlink" title="-XX:CompileThreshold=128"></a>-XX:CompileThreshold=128</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#CompileThreshold must be between 0 and 268435455</span><br><span class="line">-XX:CompileThreshold=128</span><br></pre></td></tr></table></figure><blockquote><p> JVM 的 JIT 机制的存在，如果某个函数被调用多次之后，JVM会尝试将其编译为机器码，从而提高执行速度。</p></blockquote><h2 id="XX-CICompilerCount"><a href="#XX-CICompilerCount" class="headerlink" title="-XX:CICompilerCount"></a>-XX:CICompilerCount</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:CICompilerCount=2</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="CMS垃圾回收器配置"><a href="#CMS垃圾回收器配置" class="headerlink" title="CMS垃圾回收器配置"></a>CMS垃圾回收器配置</h1><p>  Eden            –|<br>  Survior0 Space  —- Young Generation<br>  Survior1 Space  –|</p><p>  Old Generation<br>  Permanent Generation</p><p>  <code>-XX:+UseConcMarkSweepGC</code>    使用CMS垃圾收集器<br>  <code>-XX:+CMSParallelRemarkEnabled</code>  降低标记停顿<br>  <code>-XX:CMSFullGCsBeforeCompaction=*</code><br>  <code>-XX:+UseCMSCompactAtFullCollection</code>  在FullGC的时候 对年老代的压缩<br>  <code>-XX:CMSInitiatingOccupancyFraction=75</code>  CMS垃圾收集会在老年代被占用75%时被触发<br>  <code>-XX:+UseCMSInitiatingOccupancyOnly</code>  基于运行时收集的数据来启动CMS垃圾收集周期</p><h1 id="G1垃圾收集器配置"><a href="#G1垃圾收集器配置" class="headerlink" title="G1垃圾收集器配置"></a>G1垃圾收集器配置</h1><p>  Ende Space<br>  Survivor Space<br>  Oid Generation</p><p> <code>-XX:+UseG1GC</code>  使用G1垃圾收集器<br> <code>-XX:G1HeapRegionSize=25</code>  设置Region大小  非最终值<br> <code>-XX:InitiatingHeapOccupancyPercent=30</code>  设置触发标记周期的 Java 堆占用率阈值。默认值是45%。这里的java堆占比指的是non_young_capacity_bytes，包括old+humongous<br> <code>-XX:MaxGCPauseMillis</code>   设置G1收集过程目标时间，默认值200ms<br> <code>-XX:G1NewSizePercent</code>       新生代最小值，默认值5%<br> <code>-XX:G1MaxNewSizePercent</code>    新生代最大值，默认值60%<br> <code>-XX:ParallelGCThreads</code>     STW期间，并行GC线程数<br> <code>-XX:ConcGCThreads=n</code>    并发标记阶段，并行执行的线程数</p><h1 id="XX-RestrictContended"><a href="#XX-RestrictContended" class="headerlink" title="-XX:-RestrictContended"></a>-XX:-RestrictContended</h1><blockquote><p> 避免伪共享<br> 多线程并发条件下，volite变量导致CPU缓存里的数据和主内存的数据不一致导致CPU缓存失效。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:-RestrictContended</span><br></pre></td></tr></table></figure><p>  避免伪共享是以牺牲内存为代价的</p><blockquote><p> 伪共享和 CPU 内部的 Cache 有关，Cache 内部是按照缓存行（Cache Line）管理的，缓存行的大小通常是 64 个字节；CPU 从内存中加载数据 X，会同时加载 X 后面（64-size(X)）个字节的数据。<br> 避免伪共享很简单，每个变量x独占一个缓存行、不共享缓存行就可以了，具体技术是缓存行填充。<br> 比如想让 变量x 独占一个缓存行，可以在 变量x 的前后各填充 64-size(x) 个字节，这样就一定能保证 变量x 独占一个缓存行。</p></blockquote><p>  由于伪共享问题如此重要，所以 Java 也开始重视它了，比如 Java 8 中，提供了避免伪共享的注解：@sun.misc.Contended，通过这个注解就能轻松避免伪共享（需要设置 JVM 参数 -XX:-RestrictContended）。不过避免伪共享是以牺牲内存为代价的</p><p><a href="https://time.geekbang.org/column/article/98134" target="_blank" rel="noopener">40 | 案例分析（三）：高性能队列Disruptor</a></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://panlw.github.io/15320998566522.html" target="_blank" rel="noopener">关键系统的JVM参数推荐(2018仲夏版)</a><br>[2] <a href="https://github.com/alibaba/arthas" target="_blank" rel="noopener">github.com/alibaba/arthas</a><br>[3] <a href="https://github.com/vipshop/vjtools" target="_blank" rel="noopener">github.com/vipshop/vjtools</a><br>[4] <a href="https://www.rowkey.me/blog/2017/03/23/java-profile-cheatsheet/" target="_blank" rel="noopener">JVM诊断调优CheatSheet</a><br>[5] <a href="https://aboullaite.me/understanding-jit-compiler-just-in-time-compiler/" target="_blank" rel="noopener">understanding-jit-compiler-just-in-time-compiler</a><br>[6] <a href="https://tech.meituan.com/2016/09/23/g1.html" target="_blank" rel="noopener">Java Hotspot G1 GC的一些关键技术</a><br>[7] <a href="https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/index.html" target="_blank" rel="noopener">Getting Started with the G1 Garbage Collector</a><br>[8] <a href="https://docs.oracle.com/javase/7/docs/technotes/tools/windows/java.html" target="_blank" rel="noopener">java</a><br>[9] <a href="https://stackoverflow.com/questions/51154464/should-heapdumpbeforefullgc-be-used-in-production-environment" target="_blank" rel="noopener">should-heapdumpbeforefullgc-be-used-in-production-environment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常用的JVM配置&quot;&gt;&lt;a href=&quot;#常用的JVM配置&quot; class=&quot;headerlink&quot; title=&quot;常用的JVM配置&quot;&gt;&lt;/a&gt;常用的JVM配置&lt;/h1&gt;&lt;p&gt;  &lt;code&gt;-Dfile.encoding=UTF-8&lt;/code&gt; 文件使用UTF-8编码&lt;br&gt;  &lt;code&gt;-Xms2g&lt;/code&gt; 设置初始堆大小为2G&lt;br&gt;  &lt;code&gt;-Xmx2g&lt;/code&gt; 设置最大堆大小为1G&lt;br&gt;  &lt;code&gt;-Xmn1g&lt;/code&gt; 设置新生代大小为1G&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;-Xss256k&lt;/code&gt;  设置每个线程的堆栈大小，和栈的深度和容器创建的最大线程数有关&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;-XX:LargePageSizeInBytes=128m&lt;/code&gt;  内存页的大小不可设置过大， 会影响Perm的大小&lt;br&gt;  &lt;code&gt;-XX:MaxDirectMemorySize=536870912&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;  &lt;code&gt;-XX:+UseFastAccessorMethods&lt;/code&gt;  原始类型的快速优化&lt;/p&gt;
&lt;h1 id=&quot;垃圾回收统计信息&quot;&gt;&lt;a href=&quot;#垃圾回收统计信息&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收统计信息&quot;&gt;&lt;/a&gt;垃圾回收统计信息&lt;/h1&gt;&lt;p&gt;  &lt;code&gt;-XX:+PrintGC&lt;/code&gt;  用于垃圾收集时的信息打印&lt;br&gt;  &lt;code&gt;-XX:+PrintGCDetails&lt;/code&gt;  打印GC详细信息&lt;br&gt;  &lt;code&gt;-XX:+PrintGCTimeStamps&lt;/code&gt;&lt;br&gt;  &lt;code&gt;-XX:+DisableExplicitGC&lt;/code&gt;  禁止代码中显示调用GC&lt;br&gt;  &lt;code&gt;-Xloggc:filename&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;异常日志&quot;&gt;&lt;a href=&quot;#异常日志&quot; class=&quot;headerlink&quot; title=&quot;异常日志&quot;&gt;&lt;/a&gt;异常日志&lt;/h1&gt;&lt;p&gt;  &lt;code&gt;-XX:+HeapDumpOnOutOfMemoryError&lt;/code&gt; OOM后保存堆栈信息&lt;br&gt;  &lt;code&gt;-XX:-OmitStackTraceInFastThrow&lt;/code&gt; 当大量抛出同样的异常的后，后面的异常输出将不打印堆栈&lt;br&gt;  &lt;code&gt;-XX:ErrorFile=logs/hs_err_pid%p.log&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;  &lt;code&gt;-XX:+HeapDumpBeforeFullGC&lt;/code&gt; FullGC前保存堆栈信息  测试环境使用，线上最好别用，小心磁盘被打满&lt;br&gt;  &lt;code&gt;-XX:+HeapDumpAfterFullGC&lt;/code&gt; FullGC后保存堆栈信息  测试环境使用，线上最好别用，小心磁盘被打满&lt;/p&gt;
&lt;h1 id=&quot;JIT-config&quot;&gt;&lt;a href=&quot;#JIT-config&quot; class=&quot;headerlink&quot; title=&quot;JIT config&quot;&gt;&lt;/a&gt;JIT config&lt;/h1&gt;&lt;h2 id=&quot;XX-CompileThreshold-128&quot;&gt;&lt;a href=&quot;#XX-CompileThreshold-128&quot; class=&quot;headerlink&quot; title=&quot;-XX:CompileThreshold=128&quot;&gt;&lt;/a&gt;-XX:CompileThreshold=128&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#CompileThreshold must be between 0 and 268435455&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-XX:CompileThreshold=128&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt; JVM 的 JIT 机制的存在，如果某个函数被调用多次之后，JVM会尝试将其编译为机器码，从而提高执行速度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;XX-CICompilerCount&quot;&gt;&lt;a href=&quot;#XX-CICompilerCount&quot; class=&quot;headerlink&quot; title=&quot;-XX:CICompilerCount&quot;&gt;&lt;/a&gt;-XX:CICompilerCount&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-XX:CICompilerCount=2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://weikeqin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://weikeqin.com/tags/java/"/>
    
      <category term="jvm" scheme="http://weikeqin.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>java并发设计模式</title>
    <link href="http://weikeqin.com/2020/06/07/java-concurrent-design-pattern/"/>
    <id>http://weikeqin.com/2020/06/07/java-concurrent-design-pattern/</id>
    <published>2020-06-07T09:03:36.000Z</published>
    <updated>2020-06-13T03:49:41.381Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 多线程设计模式是前人解决并发问题的经验总结，当我们试图解决一个并发问题时，首选方案往往是使用匹配的设计模式，这样能避免走弯路。<br> 大家都熟悉设计模式，所以使用设计模式还能提升方案和代码的可理解性。</p></blockquote><blockquote><p>避免共享的设计模式<br><code>Immutability 模式</code>、<code>Copy-on-Write 模式</code> 和 <code>线程本地存储模式</code> 本质上都是为了避免共享，只是实现手段不同而已。</p></blockquote><blockquote><p> 多线程版本IF的设计模式<br> <code>Guarded Suspension 模式</code> 和 <code>Balking 模式</code> 都可以简单地理解为“多线程版本的 if”，但它们的区别在于前者会等待 if 条件变为真，而后者则不需要等待。</p></blockquote><blockquote><p> 三种最简单的分工模式<br> <code>Thread-Per-Message模式</code> 、 <code>Worker Thread 模式</code> 和 <code>生产者-消费者模式</code> 是三种最简单实用的多线程分工方法</p></blockquote><h1 id="1-Immutability-Pattern-不变性模式"><a href="#1-Immutability-Pattern-不变性模式" class="headerlink" title="(1) Immutability Pattern 不变性模式"></a>(1) Immutability Pattern 不变性模式</h1><blockquote><p> 解决并发问题，其实最简单的办法就是让共享变量只有读操作，而没有写操作。</p></blockquote><blockquote><p> 不变性（Immutability）模式。所谓不变性，简单来讲，就是对象一旦被创建之后，状态就不再发生变化。换句话说，就是变量一旦被赋值，就不允许修改了（没有写操作）；没有修改操作，也就是保持了不变性。</p></blockquote><blockquote><p> Java SDK 里很多类都具备不可变性。例如经常用到的 String 和 Long、Integer、Double 等基础类型的包装类都具备不可变性，这些对象的线程安全性都是靠不可变性来保证的。仔细翻看这些类的声明、属性和方法，你会发现它们都严格遵守不可变类的三点要求：类和属性都是 final 的，所有方法均是只读的。</p></blockquote><blockquote><p> Java所有的基础类型的包装类都不适合做锁，因为它们内部用到了享元模式，这会导致看上去私有的锁，其实是共有的。</p></blockquote><blockquote><p> 使用 Immutability 模式的注意事项在使用 Immutability 模式的时候，需要注意以下两点：</p><ol><li>对象的所有属性都是 final 的，并不能保证不可变性；</li><li>不可变对象也需要正确发布。 </li></ol></blockquote><blockquote><p> 在使用 Immutability 模式的时候一定要确认保持不变性的边界在哪里，是否要求属性对象也具备不可变性。<br> Foo对象是不变的，但是Foo对象的属性是可以变化的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> age=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> name=<span class="string">"abc"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Foo foo;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    foo.age=a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><a id="more"></a><blockquote><p> 不可变对象虽然是线程安全的，但是并不意味着引用这些不可变对象的对象就是线程安全的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Foo线程安全</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> age=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> name=<span class="string">"abc"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Bar线程不安全</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  Foo foo;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setFoo</span><span class="params">(Foo f)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.foo=f;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="2-Copy-on-Write-Parrent-写时复制模式"><a href="#2-Copy-on-Write-Parrent-写时复制模式" class="headerlink" title="(2) Copy-on-Write Parrent 写时复制模式"></a>(2) Copy-on-Write Parrent 写时复制模式</h1><blockquote><p> Java 里 String 这个类在实现 replace() 方法的时候，并没有更改原字符串里面 value[]数组的内容，而是创建了一个新字符串，这种方法在解决不可变对象的修改问题时经常用到。<br> Copy-on-Write，经常被缩写为 COW 或者 CoW，顾名思义就是写时复制。<br> 不可变对象的写操作往往都是使用 Copy-on-Write 方法解决的。</p></blockquote><blockquote><p> Java 提供的 Copy-on-Write 容器，由于在修改的同时会复制整个容器，所以在提升读操作性能的同时，是以内存复制为代价的。</p></blockquote><blockquote><p> CopyOnWriteArrayList 和 CopyOnWriteArraySet 这两个 Copy-on-Write 容器，它们背后的设计思想就是 Copy-on-Write；<br> 类Unix操作系统fork()函数<br> Docker 容器镜像的设计是 Copy-on-Write<br> 分布式源码管理系统 Git 背后的设计思想都有 Copy-on-Write<br> 函数式编程里面所有的修改操作都需要 Copy-on-Write 来解决 (按需复制)</p></blockquote><p>《Purely Functional Data Structures》</p><blockquote><p> Java 提供了 CopyOnWriteArrayList，为什么没有提供 CopyOnWriteLinkedList 呢？</p><ol><li>没有提供CopyOnWriteLinkedList是因为linkedlist的数据结构关系分散到每一个节点里面，对每一个节点的修改都存在竟态条件，需要同步才能保证一致性。arraylist就不一样，数组天然的拥有前驱后继的结构关系，对列表的增删，因为是copy on wirte，所以只需要cas操作数组对象就能够保证线程安全，效率上也能接受，更重要的是避免锁竞争带来的上下文切换消耗。有一点需要注意的是CopyOnWriteArrayList在使用上有数据不完整的时间窗口，要不要考虑需要根据具体场景定夺。</li><li>链表的新增删除压根就不需要复制，就算是在并发场景下采用锁的方式性能损耗都不大，因此也就没必要采用copy的方式了，更何况链表的操作可以采用分段锁、节点锁。所以没有CopyOnWriteLinkedList的主要原因是没有这个必要。</li><li>ArrayList 是用是数组实现的, 在内存上时一块连续的区域, 拷贝时效率比较高, 时间复杂度为 O(1)</li><li>LinkedList 是链表实现, 其数据是通过指针串联起来的, 并非一块连续的区域, 拷贝时必须要进行遍历操作, 效率比较低, 时间复杂度是 O(n)</li><li>CopyOnWriteLinkedList的链表结构读取效率比较低，就违背了读多写少的设计初衷。</li></ol></blockquote><h1 id="3-ThreadLocal-线程本地存储"><a href="#3-ThreadLocal-线程本地存储" class="headerlink" title="(3) ThreadLocal 线程本地存储"></a>(3) ThreadLocal 线程本地存储</h1><blockquote><p> 线程本地存储模式本质上是一种避免共享的方案，由于没有共享，所以自然也就没有并发问题。</p></blockquote><blockquote><p> 避免共享有两种方案，一种方案是将这个工具类作为局部变量使用，另外一种方案就是线程本地存储模式</p></blockquote><h1 id="4-Guarded-Suspension-模式"><a href="#4-Guarded-Suspension-模式" class="headerlink" title="(4) Guarded Suspension 模式"></a>(4) Guarded Suspension 模式</h1><blockquote><p> Guarded Suspension 模式本质上是一种等待唤醒机制的实现，只不过 Guarded Suspension 模式将其规范化了。</p></blockquote><blockquote><p> Guarded Suspension 模式也常被称作 Guarded Wait 模式、Spin Lock 模式（因为使用了 while 循环去等待），这些名字都很形象，不过它还有一个更形象的非官方名字：多线程版本的 if。</p></blockquote><h1 id="5-Balking模式"><a href="#5-Balking模式" class="headerlink" title="(5) Balking模式"></a>(5) Balking模式</h1><blockquote><p> Balking 模式和 Guarded Suspension 模式从实现上看似乎没有多大的关系，Balking 模式只需要用互斥锁就能解决，而 Guarded Suspension 模式则要用到管程这种高级的并发原语；</p></blockquote><blockquote><p> 从应用的角度来看，它们解决的都是“线程安全的 if”语义，不同之处在于，Guarded Suspension 模式会等待 if 条件为真，而 Balking 模式不会等待。</p></blockquote><h1 id="6-Thread-Per-Message模式"><a href="#6-Thread-Per-Message模式" class="headerlink" title="(6) Thread-Per-Message模式"></a>(6) Thread-Per-Message模式</h1><blockquote><p> 委托他人办理的方式，在并发编程领域被总结为一种设计模式，叫做 Thread-Per-Message 模式，简言之就是为每个任务分配一个独立的线程。这是一种最简单的分工方法。</p></blockquote><blockquote><p> 你委托代办人做事，往往是和代办人直接沟通的；对应到编程领域，其实现也是主线程直接创建了一个子线程，主子线程之间是可以直接通信的。</p></blockquote><blockquote><p> Thread-Per-Message 模式在 Java 领域并不是那么知名，根本原因在于 Java 语言里的线程是一个重量级的对象，为每一个任务创建一个线程成本太高，尤其是在高并发领域，基本就不具备可行性。</p></blockquote><blockquote><p> Thread-Per-Message 模式在实现的时候需要注意是否存在线程的频繁创建、销毁以及是否可能导致 OOM。</p></blockquote><blockquote><p> <code>Loom</code>项目里<code>Fiber</code>实现了java轻量级线程(用户态)   官网 <a href="https://wiki.openjdk.java.net/display/loom" target="_blank" rel="noopener">https://wiki.openjdk.java.net/display/loom</a> </p></blockquote><h1 id="7-Worker-Thread模式"><a href="#7-Worker-Thread模式" class="headerlink" title="(7) Worker Thread模式"></a>(7) Worker Thread模式</h1><blockquote><p> Worker Thread 模式类比的是工厂里车间工人的工作模式。</p></blockquote><blockquote><p> Worker Thread 模式能避免线程频繁创建、销毁的问题，而且能够限制线程的最大数量。</p></blockquote><blockquote><p> Java 语言里可以直接使用线程池来实现 Worker Thread 模式。<br> Worker Thread 模式的实现，需要注意潜在的线程死锁问题。<br> 共享线程池虽然能够提供线程池的使用效率，但一定要保证一个前提，那就是：任务之间没有依赖关系。</p></blockquote><h1 id="8-两阶段终止模式"><a href="#8-两阶段终止模式" class="headerlink" title="(8) 两阶段终止模式"></a>(8) 两阶段终止模式</h1><blockquote><p> 两阶段终止模式。顾名思义，就是将终止过程分成两个阶段，其中第一个阶段主要是线程 T1 向线程 T2发送终止指令，而第二阶段则是线程 T2响应终止指令。</p></blockquote><blockquote><p> Java 线程进入终止状态的前提是线程进入 RUNNABLE 状态，而实际上线程也可能处在休眠状态，也就是说，我们要想终止一个线程，首先要把线程的状态从休眠状态转换到 RUNNABLE 状态。<br> 如何做到呢？这个要靠 Java Thread 类提供的 interrupt() 方法，它可以将休眠状态的线程转换到 RUNNABLE 状态。<br> 线程转换到 RUNNABLE 状态之后，我们如何再将其终止呢？<br> RUNNABLE 状态转换到终止状态，优雅的方式是让 Java 线程自己执行完 run() 方法，所以一般我们采用的方法是设置一个标志位，然后线程会在合适的时机检查这个标志位，如果发现符合终止条件，则自动退出 run() 方法。<br>这个过程其实就是我们前面提到的第二阶段：响应终止指令。<br>综合上面这两点，我们能总结出终止指令，其实包括两方面内容：interrupt()方法和线程终止的标志位。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> </span>&#123;</span><br><span class="line">  <span class="comment">//线程终止标志位</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">boolean</span> terminated = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">  <span class="comment">//采集线程</span></span><br><span class="line">  Thread rptThread;</span><br><span class="line">  <span class="comment">//启动采集功能</span></span><br><span class="line">  <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//不允许同时启动多个采集线程</span></span><br><span class="line">    <span class="keyword">if</span> (started) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    started = <span class="keyword">true</span>;</span><br><span class="line">    terminated = <span class="keyword">false</span>;</span><br><span class="line">    rptThread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      <span class="keyword">while</span> (!terminated)&#123;</span><br><span class="line">        <span class="comment">//省略采集、回传实现</span></span><br><span class="line">        report();</span><br><span class="line">        <span class="comment">//每隔两秒钟采集、回传一次数据</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">          <span class="comment">//重新设置线程中断状态</span></span><br><span class="line">          Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//执行到此处说明线程马上终止</span></span><br><span class="line">      started = <span class="keyword">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    rptThread.start();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//终止采集功能</span></span><br><span class="line">  <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置中断标志位</span></span><br><span class="line">    terminated = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//中断线程rptThread</span></span><br><span class="line">    rptThread.interrupt();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> Java 领域用的最多的还是线程池，而不是手动地创建线程。那我们该如何优雅地终止线程池呢？<br> shutdown() 方法是一种很保守的关闭线程池的方法。线程池执行 shutdown() 后，就会拒绝接收新的任务，但是会等待线程池中正在执行的任务和已经进入阻塞队列的任务都执行完之后才最终关闭线程池。<br> 而 shutdownNow() 方法，相对就激进一些了，线程池执行 shutdownNow() 后，会拒绝接收新的任务，同时还会中断线程池中正在执行的任务，已经进入阻塞队列的任务也被剥夺了执行的机会，不过这些被剥夺执行机会的任务会作为 shutdownNow() 方法的返回值返回。</p></blockquote><h1 id="9-生产者-消费者模式"><a href="#9-生产者-消费者模式" class="headerlink" title="(9) 生产者-消费者模式"></a>(9) 生产者-消费者模式</h1><blockquote><p> 从架构设计的角度来看，生产者 - 消费者模式有一个很重要的优点，就是解耦。<br> 生产者 - 消费者模式还有一个重要的优点就是支持异步，并且能够平衡生产者和消费者的速度差异。</p></blockquote><blockquote><p> Java 线程池本质上就是用生产者 - 消费者模式实现的，所以每当使用线程池的时候，其实就是在应用生产者 - 消费者模式。</p></blockquote><blockquote><p> 线程池终止指定线程<br> 线程池在消费到毒丸时知道需要结束，将方法执行完，break循环体。</p></blockquote><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://time.geekbang.org/column/article/92856" target="_blank" rel="noopener">28 | Immutability模式：如何利用不变性解决并发问题？</a><br>[2] <a href="https://time.geekbang.org/column/article/93154" target="_blank" rel="noopener">29 | Copy-on-Write模式：不是延时策略的COW</a><br>[3] <a href="https://time.geekbang.org/column/article/93745" target="_blank" rel="noopener">30 | 线程本地存储模式：没有共享，就没有伤害</a><br>[4] <a href="https://time.geekbang.org/column/article/94097" target="_blank" rel="noopener">31 | Guarded Suspension模式：等待唤醒机制的规范实现</a><br>[5] <a href="https://time.geekbang.org/column/article/94604" target="_blank" rel="noopener">32 | Balking模式：再谈线程安全的单例模式</a><br>[6] <a href="https://time.geekbang.org/column/article/95098" target="_blank" rel="noopener">33 | Thread-Per-Message模式：最简单实用的分工方法</a><br>[7] <a href="https://time.geekbang.org/column/article/95525" target="_blank" rel="noopener">34 | Worker Thread模式：如何避免重复创建线程？</a><br>[8] <a href="https://time.geekbang.org/column/article/95847" target="_blank" rel="noopener">35 | 两阶段终止模式：如何优雅地终止线程？</a><br>[9] <a href="https://time.geekbang.org/column/article/96168" target="_blank" rel="noopener">36 | 生产者-消费者模式：用流水线思想提高效率</a><br>[10] <a href="https://time.geekbang.org/column/article/96736" target="_blank" rel="noopener">37 | 设计模式模块热点问题答疑</a><br>[11] 《图解 Java 多线程设计模式》 </p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 多线程设计模式是前人解决并发问题的经验总结，当我们试图解决一个并发问题时，首选方案往往是使用匹配的设计模式，这样能避免走弯路。&lt;br&gt; 大家都熟悉设计模式，所以使用设计模式还能提升方案和代码的可理解性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;避免共享的设计模式&lt;br&gt;&lt;code&gt;Immutability 模式&lt;/code&gt;、&lt;code&gt;Copy-on-Write 模式&lt;/code&gt; 和 &lt;code&gt;线程本地存储模式&lt;/code&gt; 本质上都是为了避免共享，只是实现手段不同而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 多线程版本IF的设计模式&lt;br&gt; &lt;code&gt;Guarded Suspension 模式&lt;/code&gt; 和 &lt;code&gt;Balking 模式&lt;/code&gt; 都可以简单地理解为“多线程版本的 if”，但它们的区别在于前者会等待 if 条件变为真，而后者则不需要等待。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 三种最简单的分工模式&lt;br&gt; &lt;code&gt;Thread-Per-Message模式&lt;/code&gt; 、 &lt;code&gt;Worker Thread 模式&lt;/code&gt; 和 &lt;code&gt;生产者-消费者模式&lt;/code&gt; 是三种最简单实用的多线程分工方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-Immutability-Pattern-不变性模式&quot;&gt;&lt;a href=&quot;#1-Immutability-Pattern-不变性模式&quot; class=&quot;headerlink&quot; title=&quot;(1) Immutability Pattern 不变性模式&quot;&gt;&lt;/a&gt;(1) Immutability Pattern 不变性模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 解决并发问题，其实最简单的办法就是让共享变量只有读操作，而没有写操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 不变性（Immutability）模式。所谓不变性，简单来讲，就是对象一旦被创建之后，状态就不再发生变化。换句话说，就是变量一旦被赋值，就不允许修改了（没有写操作）；没有修改操作，也就是保持了不变性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Java SDK 里很多类都具备不可变性。例如经常用到的 String 和 Long、Integer、Double 等基础类型的包装类都具备不可变性，这些对象的线程安全性都是靠不可变性来保证的。仔细翻看这些类的声明、属性和方法，你会发现它们都严格遵守不可变类的三点要求：类和属性都是 final 的，所有方法均是只读的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Java所有的基础类型的包装类都不适合做锁，因为它们内部用到了享元模式，这会导致看上去私有的锁，其实是共有的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 使用 Immutability 模式的注意事项在使用 Immutability 模式的时候，需要注意以下两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对象的所有属性都是 final 的，并不能保证不可变性；&lt;/li&gt;
&lt;li&gt;不可变对象也需要正确发布。 &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 在使用 Immutability 模式的时候一定要确认保持不变性的边界在哪里，是否要求属性对象也具备不可变性。&lt;br&gt; Foo对象是不变的，但是Foo对象的属性是可以变化的&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; name=&lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bar&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Foo foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo.age=a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://weikeqin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://weikeqin.com/tags/java/"/>
    
      <category term="pattern" scheme="http://weikeqin.com/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>java-thread</title>
    <link href="http://weikeqin.com/2020/06/06/java-thread/"/>
    <id>http://weikeqin.com/2020/06/06/java-thread/</id>
    <published>2020-06-06T09:40:31.000Z</published>
    <updated>2020-06-13T11:23:20.755Z</updated>
    
    <content type="html"><![CDATA[<p>  在Java中，创建对象，仅仅是在 JVM 的堆里分配一块内存，而创建一个线程，需要调用操作系统内核的 API，然后操作系统要为线程分配一系列的资源，成本很高，所以线程是一个重量级的对象，应该避免频繁创建和销毁。</p><a id="more"></a><p> Java 语言里，Java 线程是和操作系统线程一一对应的，这种做法本质上是将 Java 线程的调度权完全委托给操作系统，而操作系统在这方面非常成熟，所以这种做法的好处是稳定、可靠，但是也继承了操作系统线程的缺点：创建成本高。为了解决这个缺点，Java 并发包里提供了线程池等工具类。</p><p> 轻量级线程。这个方案在 Java 领域知名度并不高，但是在其他编程语言里却叫得很响，例如 Go 语言、Lua 语言里的协程，本质上就是一种轻量级的线程。轻量级的线程，创建的成本很低，基本上和创建一个普通对象的成本相似；并且创建的速度和内存占用相比操作系统线程至少有一个数量级的提升，</p><p> Java 语言目前也已经意识到轻量级线程的重要性了，OpenJDK 有个 Loom 项目，就是要解决 Java 语言的轻量级线程问题，在这个项目中，轻量级线程被叫做 Fiber。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://time.geekbang.org/column/article/90771" target="_blank" rel="noopener">22 | Executor与线程池：如何创建正确的线程池？</a><br>[2] <a href="https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/Thread.html" target="_blank" rel="noopener">java-14-Thread</a><br>[3] <a href="https://blog.csdn.net/qq_27035123/article/details/77651534" target="_blank" rel="noopener">Java线程与内核线程</a><br>[4] <a href="https://www.cnblogs.com/zhangxiaoguang/p/java_os_thread.html" target="_blank" rel="noopener">Java与线程</a><br>[5] <a href="https://zhuanlan.zhihu.com/p/61892830" target="_blank" rel="noopener">深入了解JVM—-线程实现的三种方式</a><br>[6] <a href="https://time.geekbang.org/column/article/95098" target="_blank" rel="noopener">33 | Thread-Per-Message模式：最简单实用的分工方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  在Java中，创建对象，仅仅是在 JVM 的堆里分配一块内存，而创建一个线程，需要调用操作系统内核的 API，然后操作系统要为线程分配一系列的资源，成本很高，所以线程是一个重量级的对象，应该避免频繁创建和销毁。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://weikeqin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://weikeqin.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>lock</title>
    <link href="http://weikeqin.com/2020/06/06/lock/"/>
    <id>http://weikeqin.com/2020/06/06/lock/</id>
    <published>2020-06-06T01:48:36.000Z</published>
    <updated>2020-06-14T15:35:34.884Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

      
    
    </summary>
    
      <category term="lock" scheme="http://weikeqin.com/categories/lock/"/>
    
    
      <category term="lock" scheme="http://weikeqin.com/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>读写锁</title>
    <link href="http://weikeqin.com/2020/06/06/read-write-lock/"/>
    <id>http://weikeqin.com/2020/06/06/read-write-lock/</id>
    <published>2020-06-06T01:44:46.000Z</published>
    <updated>2020-06-06T01:47:36.996Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 读写锁，是一个广为使用的通用技术，无论是操作系统、数据库、编程语言、应用 等都有用到 </p></blockquote><blockquote><p> 所有的读写锁都遵守以下三条基本原则：</p><ol><li>允许多个线程同时读共享变量；</li><li>只允许一个线程写共享变量；</li><li>如果一个写线程正在执行写操作，此时禁止读线程读共享变量。</li></ol></blockquote><blockquote><p> 读写锁与互斥锁的一个重要区别就是读写锁允许多个线程同时读共享变量，而互斥锁是不允许的，这是读写锁在读多写少场景下性能优于互斥锁的关键。但读写锁的写操作是互斥的，当一个线程在写共享变量的时候，是不允许其他线程执行写操作和读操作。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 读写锁，是一个广为使用的通用技术，无论是操作系统、数据库、编程语言、应用 等都有用到 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 所有的读写锁都遵守以下三条基本原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;允许多个线程同时读共享变
      
    
    </summary>
    
      <category term="lock" scheme="http://weikeqin.com/categories/lock/"/>
    
    
      <category term="lock" scheme="http://weikeqin.com/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>redis高性能分析</title>
    <link href="http://weikeqin.com/2020/05/28/redis-high-performance-analysis/"/>
    <id>http://weikeqin.com/2020/05/28/redis-high-performance-analysis/</id>
    <published>2020-05-28T05:09:58.000Z</published>
    <updated>2020-06-06T00:21:53.538Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> redis高性能分析</p></blockquote><a id="more"></a><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://redis.io/documentation" target="_blank" rel="noopener">redis.io/documentation</a><br>[1] <a href="https://redis.io/topics/data-types" target="_blank" rel="noopener">redis.io/topics/data-types</a><br>[2] <a href="https://redis.io/topics/data-types-intro" target="_blank" rel="noopener">redis.io/topics/data-types-intr</a><br>[3] <a href="https://github.com/antirez/redis-doc" target="_blank" rel="noopener">redis-doc</a><br>[4] <a href="https://mp.weixin.qq.com/s/U7I5mW-dueVSFUS7LW3ziQ" target="_blank" rel="noopener">10万+QPS 真的只是因为单线程和基于内存？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; redis高性能分析&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="redis" scheme="http://weikeqin.com/categories/redis/"/>
    
    
      <category term="cache" scheme="http://weikeqin.com/tags/cache/"/>
    
      <category term="redis" scheme="http://weikeqin.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis高性能实践</title>
    <link href="http://weikeqin.com/2020/05/26/redis-high-performance-practice/"/>
    <id>http://weikeqin.com/2020/05/26/redis-high-performance-practice/</id>
    <published>2020-05-26T02:28:15.000Z</published>
    <updated>2020-06-07T01:59:51.585Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 在压测的时候看了一下缓存监控，看到监控上的数字震惊了，单分片每秒的出流量172MB。从来没想到过性能可以这么高。(优化前的)<br> 分享一些高性能的知识点吧。</p></blockquote><h1 id="1-大多数情况存储的时候推荐使用byte"><a href="#1-大多数情况存储的时候推荐使用byte" class="headerlink" title="(1) 大多数情况存储的时候推荐使用byte"></a>(1) 大多数情况存储的时候推荐使用byte</h1><p>  <a href="https://redis.io/topics/data-types" target="_blank" rel="noopener">redis-data-types</a><br>  <a href="https://stackoverflow.com/questions/51306134/redis-value-as-byte-vs-plain-string" target="_blank" rel="noopener">redis-value-as-byte-vs-plain-string</a><br>  <a href="https://github.com/eishay/jvm-serializers/wiki" target="_blank" rel="noopener">jvm-serializers</a></p><blockquote><p>string类型 redis底层存储的都是二进制，所以redis是二进制安全的(binary safe)<br> 看代码的话你会发现redis存储的时候用的都是 byte[]<br> Redis Strings are binary safe, this means that a Redis string can contain any kind of data, for instance a JPEG image or a serialized Ruby object.</p></blockquote><p>  对于存取对象，大多数情况建议使用 <code>set(final byte[] key, final byte[] value)</code>  <code>get(final byte[] key)</code><br>  对于直接存储字符串的，建议直接使用 <code>set(final String key, final String value)</code>  <code>get(final String key)</code></p><h1 id="2-使用mset-mget"><a href="#2-使用mset-mget" class="headerlink" title="(2) 使用mset mget"></a>(2) 使用mset mget</h1><p> <a href="https://redis.io/commands/mset" target="_blank" rel="noopener">mset</a><br> <a href="https://redis.io/commands/mget" target="_blank" rel="noopener">mget</a></p><h1 id="3-批量处理时优化成一次请求"><a href="#3-批量处理时优化成一次请求" class="headerlink" title="(3) 批量处理时优化成一次请求"></a>(3) 批量处理时优化成一次请求</h1><blockquote><p> 批处理时可以使用 Pipeline 一次处理，减少网络开销</p></blockquote><a id="more"></a><!--<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param map</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public List&lt;Object&gt; batchSet(Map&lt;String, String&gt; map) &#123;</span><br><span class="line">    Pipeline pipeline = jedis.pipelined();</span><br><span class="line">    for (Map.Entry&lt;String, String&gt; e : map.entrySet()) &#123;</span><br><span class="line">        pipeline.set(e.getKey(), e.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    return pipeline.syncAndReturnAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param keys</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public List&lt;String&gt; batchGet(List&lt;String&gt; keys) &#123;</span><br><span class="line">    List&lt;String&gt; result = new ArrayList&lt;&gt;(keys.size());</span><br><span class="line">    List&lt;Response&lt;String&gt;&gt; responses = new ArrayList&lt;&gt;(keys.size());</span><br><span class="line"></span><br><span class="line">    Pipeline pipeline = jedis.pipelined();</span><br><span class="line">    for (String key : keys) &#123;</span><br><span class="line">        responses.add(pipeline.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">    pipeline.sync();</span><br><span class="line"></span><br><span class="line">    for (Response&lt;String&gt; resp : responses) &#123;</span><br><span class="line">        result.add(resp.get());</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–&gt;</p><h1 id="4-合理设计每一对Key的Value大小"><a href="#4-合理设计每一对Key的Value大小" class="headerlink" title="(4) 合理设计每一对Key的Value大小"></a>(4) 合理设计每一对Key的Value大小</h1><blockquote><p> 合理设计每一对Key的Value大小，原则是让每次网络包控制在一定大小，减少通信次数。<br> 这个需要根据具体的情况去设置。</p></blockquote><h1 id="5"><a href="#5" class="headerlink" title="(5)"></a>(5)</h1><p>  info可以看到所有库的key数量</p><p>  dbsize则是当前库key的数量</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://redis.io/documentation">redis.io/documentation</a><br>[1] <a href="https://redis.io/topics/data-types">redis.io/topics/data-types</a><br>[2] <a href="https://redis.io/topics/data-types-intro">redis.io/topics/data-types-intr</a><br>[3] <a href="https://github.com/antirez/redis-doc">redis-doc</a><br>[4] <a href="https://redis.io/topics/ldb">Redis Lua scripts debugger</a><br>[5] <a href="https://mp.weixin.qq.com/s/Yzv88PCDBstFFj0qIzTkJA">掌握这些 Redis 技巧，百亿数据量不在话下！</a><br>[6] <a href="https://blog.csdn.net/eng63538505/article/details/74670902">redis的两种存储方式string和byte对比</a><br>[7] <a href="https://mp.weixin.qq.com/s/6G3iuEtBOxvp-gVi_OZe9g">Redis规范你应该了解一下</a></p>-->]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 在压测的时候看了一下缓存监控，看到监控上的数字震惊了，单分片每秒的出流量172MB。从来没想到过性能可以这么高。(优化前的)&lt;br&gt; 分享一些高性能的知识点吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-大多数情况存储的时候推荐使用byte&quot;&gt;&lt;a href=&quot;#1-大多数情况存储的时候推荐使用byte&quot; class=&quot;headerlink&quot; title=&quot;(1) 大多数情况存储的时候推荐使用byte&quot;&gt;&lt;/a&gt;(1) 大多数情况存储的时候推荐使用byte&lt;/h1&gt;&lt;p&gt;  &lt;a href=&quot;https://redis.io/topics/data-types&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redis-data-types&lt;/a&gt;&lt;br&gt;  &lt;a href=&quot;https://stackoverflow.com/questions/51306134/redis-value-as-byte-vs-plain-string&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redis-value-as-byte-vs-plain-string&lt;/a&gt;&lt;br&gt;  &lt;a href=&quot;https://github.com/eishay/jvm-serializers/wiki&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jvm-serializers&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;string类型 redis底层存储的都是二进制，所以redis是二进制安全的(binary safe)&lt;br&gt; 看代码的话你会发现redis存储的时候用的都是 byte[]&lt;br&gt; Redis Strings are binary safe, this means that a Redis string can contain any kind of data, for instance a JPEG image or a serialized Ruby object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  对于存取对象，大多数情况建议使用 &lt;code&gt;set(final byte[] key, final byte[] value)&lt;/code&gt;  &lt;code&gt;get(final byte[] key)&lt;/code&gt;&lt;br&gt;  对于直接存储字符串的，建议直接使用 &lt;code&gt;set(final String key, final String value)&lt;/code&gt;  &lt;code&gt;get(final String key)&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-使用mset-mget&quot;&gt;&lt;a href=&quot;#2-使用mset-mget&quot; class=&quot;headerlink&quot; title=&quot;(2) 使用mset mget&quot;&gt;&lt;/a&gt;(2) 使用mset mget&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://redis.io/commands/mset&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mset&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://redis.io/commands/mget&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mget&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-批量处理时优化成一次请求&quot;&gt;&lt;a href=&quot;#3-批量处理时优化成一次请求&quot; class=&quot;headerlink&quot; title=&quot;(3) 批量处理时优化成一次请求&quot;&gt;&lt;/a&gt;(3) 批量处理时优化成一次请求&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 批处理时可以使用 Pipeline 一次处理，减少网络开销&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="redis" scheme="http://weikeqin.com/categories/redis/"/>
    
    
      <category term="cache" scheme="http://weikeqin.com/tags/cache/"/>
    
      <category term="redis" scheme="http://weikeqin.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis数据类型</title>
    <link href="http://weikeqin.com/2020/05/25/redis-data-types/"/>
    <id>http://weikeqin.com/2020/05/25/redis-data-types/</id>
    <published>2020-05-25T06:25:03.000Z</published>
    <updated>2020-06-05T15:31:49.009Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> Redis is not a plain key-value store, it is actually a data structures server, supporting different kinds of values. What this means is that, while in traditional key-value stores you associate string keys to string values, in Redis the value is not limited to a simple string, but can also hold more complex data structures. The following is the list of all the data structures supported by Redis, which will be covered separately in this tutorial:</p></blockquote><h1 id="redis-data-types"><a href="#redis-data-types" class="headerlink" title="redis data types"></a>redis data types</h1><blockquote><p> Binary-safe strings.<br> Lists: collections of string elements sorted according to the order of insertion. They are basically linked lists.<br> Sets: collections of unique, unsorted string elements.<br> Sorted sets, similar to Sets but where every string element is associated to a floating number value, called score. The elements are always taken sorted by their score, so unlike Sets it is possible to retrieve a range of elements (for example you may ask: give me the top 10, or the bottom 10).<br> Hashes, which are maps composed of fields associated with values. Both the field and the value are strings. This is very similar to Ruby or Python hashes.<br> Bit arrays (or simply bitmaps): it is possible, using special commands, to handle String values like an array of bits: you can set and clear individual bits, count all the bits set to 1, find the first set or unset bit, and so forth.<br> HyperLogLogs: this is a probabilistic data structure which is used in order to estimate the cardinality of a set. Don’t be scared, it is simpler than it seems… See later in the HyperLogLog section of this tutorial.<br> Streams: append-only collections of map-like entries that provide an abstract log data type. They are covered in depth in the Introduction to Redis Streams.</p></blockquote><h1 id="Redis-keys"><a href="#Redis-keys" class="headerlink" title="Redis keys"></a>Redis keys</h1><blockquote><p> Redis的key可以是任意类型，可以是字符串，还可以是图片，还可以是空字符串<br> Redis的key是二进制安全的，底层存储用的byte[]<br> 建议key不要太大<br> 建议key不要太小，太小会比较省内存，但是可读性、可维护性较差。<br> 尝试坚持一个模式。 建议使用 object-type:id，比如 <code>user:1000</code><br> redis允许最大的key大小为 512MB</p></blockquote><a id="more"></a><blockquote><p> 官方原文如下:<br> Redis keys are binary safe, this means that you can use any binary sequence as a key, from a string like “foo” to the content of a JPEG file. The empty string is also a valid key.<br> A few other rules about keys:<br> Very long keys are not a good idea. For instance a key of 1024 bytes is a bad idea not only memory-wise, but also because the lookup of the key in the dataset may require several costly key-comparisons. Even when the task at hand is to match the existence of a large value, hashing it (for example with SHA1) is a better idea, especially from the perspective of memory and bandwidth.<br> Very short keys are often not a good idea. There is little point in writing “u1000flw” as a key if you can instead write “user:1000:followers”. The latter is more readable and the added space is minor compared to the space used by the key object itself and the value object. While short keys will obviously consume a bit less memory, your job is to find the right balance.<br> Try to stick with a schema. For instance “object-type:id” is a good idea, as in “user:1000”. Dots or dashes are often used for multi-word fields, as in “comment:1234:reply.to” or “comment:1234:reply-to”.<br> The maximum allowed key size is 512 MB.</p></blockquote><h1 id="Redis-Strings"><a href="#Redis-Strings" class="headerlink" title="Redis Strings"></a>Redis Strings</h1><blockquote><p> Values can be strings (including binary data) of every kind, for instance you can store a jpeg image inside a value. A value can’t be bigger than 512 MB.</p></blockquote><p> string 可以用 set get 命令 </p><blockquote><p> set k v<br> get k </p></blockquote><blockquote><p> set counter 100<br> incr counter<br> incrby counter 50<br> decr counter 1<br> decrby counter 10 </p></blockquote><blockquote><p> incr 是原子性的<br> What does it mean that INCR is atomic? That even multiple clients issuing INCR against the same key will never enter into a race condition. </p></blockquote><blockquote><p> getset mycount “0”<br> mset a 10 b 20 c 30<br> mget a b c</p></blockquote><blockquote><p> set myKey wkq<br> exit myKey<br> type myKey<br> del myKey </p></blockquote><blockquote><p> set key wkq<br> expire key 5</p></blockquote><h1 id="Redis-Lists"><a href="#Redis-Lists" class="headerlink" title="Redis Lists"></a>Redis Lists</h1><blockquote><p> Redis lists are implemented via Linked Lists.<br> Redis Lists are implemented with linked lists because for a database system it is crucial to be able to add elements to a very long list in a very fast way. Another strong advantage, as you’ll see in a moment, is that Redis Lists can be taken at constant length in constant time.</p></blockquote><h1 id="Redis-expires"><a href="#Redis-expires" class="headerlink" title="Redis expires"></a>Redis expires</h1><p> <a href="https://redis.io/commands/expire" target="_blank" rel="noopener">EXPIRE key seconds</a></p><blockquote><p> Set a timeout on key. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is often said to be volatile in Redis terminology.<br> The timeout will only be cleared by commands that delete or overwrite the contents of the key, including DEL, SET, GETSET and all the *STORE commands. This means that all the operations that conceptually alter the value stored at the key without replacing it with a new one will leave the timeout untouched. For instance, incrementing the value of a key with INCR, pushing a new value into a list with LPUSH, or altering the field value of a hash with HSET are all operations that will leave the timeout untouched.<br> The timeout can also be cleared, turning the key back into a persistent key, using the PERSIST command.<br> If a key is renamed with RENAME, the associated time to live is transferred to the new key name.</p></blockquote><p>Expire accuracy<br>In Redis 2.4 the expire might not be pin-point accurate, and it could be between zero to one seconds out.<br>Since Redis 2.6 the expire error is from 0 to 1 milliseconds.</p><p>Expires and persistence<br>Keys expiring information is stored as absolute Unix timestamps (in milliseconds in case of Redis version 2.6 or greater). This means that the time is flowing even when the Redis instance is not active.<br>For expires to work well, the computer time must be taken stable. If you move an RDB file from two computers with a big desync in their clocks, funny things may happen (like all the keys loaded to be expired at loading time).<br>Even running instances will always check the computer clock, so for instance if you set a key with a time to live of 1000 seconds, and then set your computer time 2000 seconds in the future, the key will be expired immediately, instead of lasting for 1000 seconds.</p><p>How Redis expires keys<br>Redis keys are expired in two ways: a passive way, and an active way.</p><p>A key is passively expired simply when some client tries to access it, and the key is found to be timed out.</p><p>Of course this is not enough as there are expired keys that will never be accessed again. These keys should be expired anyway, so periodically Redis tests a few keys at random among keys with an expire set. All the keys that are already expired are deleted from the keyspace.</p><p>Specifically this is what Redis does 10 times per second:</p><p>Test 20 random keys from the set of keys with an associated expire.<br>Delete all the keys found expired.<br>If more than 25% of keys were expired, start again from step 1.<br>This is a trivial probabilistic algorithm, basically the assumption is that our sample is representative of the whole key space, and we continue to expire until the percentage of keys that are likely to be expired is under 25%</p><p>This means that at any given moment the maximum amount of keys already expired that are using memory is at max equal to max amount of write operations per second divided by 4.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://redis.io/documentation" target="_blank" rel="noopener">redis.io/documentation</a><br>[2] <a href="https://redis.io/topics/data-types-intro" target="_blank" rel="noopener">redis.io/topics/data-types-intro</a><br>[3] <a href="https://redis.io/topics/data-types" target="_blank" rel="noopener">redis.io/topics/data-types</a><br>[4] <a href="https://redis.io/commands/#string" target="_blank" rel="noopener">commands/#string</a><br>[5] <a href="https://redis.io/commands#list" target="_blank" rel="noopener">commands#list</a><br>[6] <a href="https://redis.io/commands#set" target="_blank" rel="noopener">commands#set</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; Redis is not a plain key-value store, it is actually a data structures server, supporting different kinds of values. What this means is that, while in traditional key-value stores you associate string keys to string values, in Redis the value is not limited to a simple string, but can also hold more complex data structures. The following is the list of all the data structures supported by Redis, which will be covered separately in this tutorial:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;redis-data-types&quot;&gt;&lt;a href=&quot;#redis-data-types&quot; class=&quot;headerlink&quot; title=&quot;redis data types&quot;&gt;&lt;/a&gt;redis data types&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; Binary-safe strings.&lt;br&gt; Lists: collections of string elements sorted according to the order of insertion. They are basically linked lists.&lt;br&gt; Sets: collections of unique, unsorted string elements.&lt;br&gt; Sorted sets, similar to Sets but where every string element is associated to a floating number value, called score. The elements are always taken sorted by their score, so unlike Sets it is possible to retrieve a range of elements (for example you may ask: give me the top 10, or the bottom 10).&lt;br&gt; Hashes, which are maps composed of fields associated with values. Both the field and the value are strings. This is very similar to Ruby or Python hashes.&lt;br&gt; Bit arrays (or simply bitmaps): it is possible, using special commands, to handle String values like an array of bits: you can set and clear individual bits, count all the bits set to 1, find the first set or unset bit, and so forth.&lt;br&gt; HyperLogLogs: this is a probabilistic data structure which is used in order to estimate the cardinality of a set. Don’t be scared, it is simpler than it seems… See later in the HyperLogLog section of this tutorial.&lt;br&gt; Streams: append-only collections of map-like entries that provide an abstract log data type. They are covered in depth in the Introduction to Redis Streams.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Redis-keys&quot;&gt;&lt;a href=&quot;#Redis-keys&quot; class=&quot;headerlink&quot; title=&quot;Redis keys&quot;&gt;&lt;/a&gt;Redis keys&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; Redis的key可以是任意类型，可以是字符串，还可以是图片，还可以是空字符串&lt;br&gt; Redis的key是二进制安全的，底层存储用的byte[]&lt;br&gt; 建议key不要太大&lt;br&gt; 建议key不要太小，太小会比较省内存，但是可读性、可维护性较差。&lt;br&gt; 尝试坚持一个模式。 建议使用 object-type:id，比如 &lt;code&gt;user:1000&lt;/code&gt;&lt;br&gt; redis允许最大的key大小为 512MB&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="redis" scheme="http://weikeqin.com/categories/redis/"/>
    
    
      <category term="redis" scheme="http://weikeqin.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch配置</title>
    <link href="http://weikeqin.com/2020/05/16/elasticsearch-setup/"/>
    <id>http://weikeqin.com/2020/05/16/elasticsearch-setup/</id>
    <published>2020-05-16T09:08:13.000Z</published>
    <updated>2020-06-05T14:36:07.785Z</updated>
    
    <content type="html"><![CDATA[<p>  elasticsearch 配置笔记</p><p>Elasticsearch has three configuration files:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch.yml for configuring Elasticsearch</span><br><span class="line">jvm.options for configuring Elasticsearch JVM settings</span><br><span class="line">log4j2.properties for configuring Elasticsearch logging</span><br></pre></td></tr></table></figure></p><h1 id="ES-Server-配置"><a href="#ES-Server-配置" class="headerlink" title="ES Server 配置"></a>ES Server 配置</h1><h2 id="ES-配置"><a href="#ES-配置" class="headerlink" title="ES 配置"></a>ES 配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#自动创建索引</span><br><span class="line">action.auto_create_index: .monitoring*,.watches,.triggered_watches,.watcher-history*,.ml*</span><br></pre></td></tr></table></figure><blockquote><p>可重新加载配置<br> Just like the settings values in elasticsearch.yml, changes to the keystore contents are not automatically applied to the running Elasticsearch node. Re-reading settings requires a node restart. However, certain secure settings are marked as reloadable. </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST _nodes/reload_secure_settings</span><br><span class="line">POST _nodes/&lt;node_id&gt;/reload_secure_settings</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;localhost:9200/_nodes/reload_secure_settings?pretty&quot; -H &apos;Content-Type: application/json&apos; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;secure_settings_password&quot;: &quot;s3cr3t&quot; </span><br><span class="line">&#125;</span><br><span class="line">&apos;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="jvm配置"><a href="#jvm配置" class="headerlink" title="jvm配置"></a>jvm配置</h2><p>  可以通过配置 <code>jvm.options文件 或</code>ES_JAVA_OPTS`环境变量配置es jvm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xmx16g</span><br><span class="line">8-9:-Xmx20g</span><br></pre></td></tr></table></figure><h2 id="ES日志配置"><a href="#ES日志配置" class="headerlink" title="ES日志配置"></a>ES日志配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">######## Server JSON ############################</span><br><span class="line">appender.rolling.type = RollingFile </span><br><span class="line">appender.rolling.name = rolling</span><br><span class="line">appender.rolling.fileName = $&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs.cluster_name&#125;_server.json </span><br><span class="line">appender.rolling.layout.type = ESJsonLayout </span><br><span class="line">appender.rolling.layout.type_name = server </span><br><span class="line">appender.rolling.filePattern = $&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs.cluster_name&#125;-%d&#123;yyyy-MM-dd&#125;-%i.json.gz </span><br><span class="line">appender.rolling.policies.type = Policies</span><br><span class="line">appender.rolling.policies.time.type = TimeBasedTriggeringPolicy </span><br><span class="line">appender.rolling.policies.time.interval = 1 </span><br><span class="line">appender.rolling.policies.time.modulate = true </span><br><span class="line">appender.rolling.policies.size.type = SizeBasedTriggeringPolicy </span><br><span class="line">appender.rolling.policies.size.size = 256MB </span><br><span class="line">appender.rolling.strategy.type = DefaultRolloverStrategy</span><br><span class="line">appender.rolling.strategy.fileIndex = nomax</span><br><span class="line">appender.rolling.strategy.action.type = Delete </span><br><span class="line">appender.rolling.strategy.action.basepath = $&#123;sys:es.logs.base_path&#125;</span><br><span class="line">appender.rolling.strategy.action.condition.type = IfFileName </span><br><span class="line">appender.rolling.strategy.action.condition.glob = $&#123;sys:es.logs.cluster_name&#125;-* </span><br><span class="line">appender.rolling.strategy.action.condition.nested_condition.type = IfAccumulatedFileSize </span><br><span class="line">appender.rolling.strategy.action.condition.nested_condition.exceeds = 2GB </span><br><span class="line">################################################</span><br></pre></td></tr></table></figure><blockquote><p> 设置ES log级别</p><ol><li><code>-E logger.org.elasticsearch.transport=trace</code>  debug in single node </li><li>修改 <code>elasticsearch.yml</code>  <code>logger.org.elasticsearch.transport: info</code>  es未启动时配置</li><li>动态修改日志级别  dynamically need to adjust a logging level on an actively-running cluster.</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /_cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  &quot;transient&quot;: &#123;</span><br><span class="line">    &quot;logger.org.elasticsearch.transport&quot;: &quot;trace&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>修改 <code>log4j2.properties</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logger.transport.name = org.elasticsearch.transport</span><br><span class="line">logger.transport.level = trace</span><br></pre></td></tr></table></figure></li></ol></blockquote><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/setup.html</a><br>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html</a><br>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html</a><br>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/jvm-options.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/jvm-options.html</a><br>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/secure-settings.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/secure-settings.html</a><br>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/logging.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/logging.html</a><br>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/auditing-settings.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/auditing-settings.html</a><br>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-settings.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-settings.html</a><br>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-settings.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-settings.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  elasticsearch 配置笔记&lt;/p&gt;
&lt;p&gt;Elasticsearch has three configuration files:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;elasticsearch.yml for configuring Elasticsearch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jvm.options for configuring Elasticsearch JVM settings&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log4j2.properties for configuring Elasticsearch logging&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;ES-Server-配置&quot;&gt;&lt;a href=&quot;#ES-Server-配置&quot; class=&quot;headerlink&quot; title=&quot;ES Server 配置&quot;&gt;&lt;/a&gt;ES Server 配置&lt;/h1&gt;&lt;h2 id=&quot;ES-配置&quot;&gt;&lt;a href=&quot;#ES-配置&quot; class=&quot;headerlink&quot; title=&quot;ES 配置&quot;&gt;&lt;/a&gt;ES 配置&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#自动创建索引&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;action.auto_create_index: .monitoring*,.watches,.triggered_watches,.watcher-history*,.ml*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;可重新加载配置&lt;br&gt; Just like the settings values in elasticsearch.yml, changes to the keystore contents are not automatically applied to the running Elasticsearch node. Re-reading settings requires a node restart. However, certain secure settings are marked as reloadable. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;POST _nodes/reload_secure_settings&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POST _nodes/&amp;lt;node_id&amp;gt;/reload_secure_settings&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -X POST &amp;quot;localhost:9200/_nodes/reload_secure_settings?pretty&amp;quot; -H &amp;apos;Content-Type: application/json&amp;apos; -d&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;secure_settings_password&amp;quot;: &amp;quot;s3cr3t&amp;quot; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://weikeqin.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://weikeqin.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch Logstash Kibana 笔记</title>
    <link href="http://weikeqin.com/2020/05/16/elk-notes/"/>
    <id>http://weikeqin.com/2020/05/16/elk-notes/</id>
    <published>2020-05-16T08:21:23.000Z</published>
    <updated>2020-05-17T15:31:40.565Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> Elastic Stack 是适用于数据采集、充实、存储、分析和可视化的一组开源工具。人们通常将 Elastic Stack 称为 ELK Stack（代指 Elasticsearch、Logstash 和 Kibana）</p></blockquote><blockquote><p> Elasticsearch 是一个分布式的开源搜索和分析引擎，适用于所有类型的数据，包括文本、数字、地理空间、结构化和非结构化数据。  类似于MySQL，用来存储和分析数据。<br> Logstash可用来对数据进行聚合和处理，并将数据发送到 Elasticsearch。Logstash 是一个开源的服务器端数据处理管道，允许您在将数据索引到 Elasticsearch 之前同时从多个来源采集数据，并对数据进行充实和转换。 类似于程序，抽取解析数据并储存到ES<br> Kibana 是一款适用于 Elasticsearch 的数据可视化和管理工具。类似于使用MySQL时用的Navicat</p></blockquote><blockquote><p> 简单的说，LogStash用来收取解析日志并发消息写入ES，Elasticsearch用来存储和分析查询，Kibana用来查看</p></blockquote><p>  es下载地址 <a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a><br>  logstash下载地址 <a href="https://www.elastic.co/cn/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/logstash</a><br>  kibana下载地址  <a href="https://www.elastic.co/cn/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/kibana</a><br>  filebeats</p><a id="more"></a>  <!--    es下载 https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.7.0-linux-x86_64.tar.gz  logstash下载  https://artifacts.elastic.co/downloads/logstash/logstash-7.7.0.tar.gz  kibana下载 https://artifacts.elastic.co/downloads/kibana/kibana-7.7.0-linux-x86_64.tar.gz--><p> elasticsearch-7.x 要求JDK版本大于等于11<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ZBMAC-C02PGMT0F:~ weikeqin1$ java -version</span><br><span class="line">java version &quot;14&quot; 2020-03-17</span><br><span class="line">Java(TM) SE Runtime Environment (build 14+36-1461)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 14+36-1461, mixed mode, sharing)</span><br><span class="line">ZBMAC-C02PGMT0F:~ weikeqin1$</span><br></pre></td></tr></table></figure></p><h1 id="elasticsearch安装配置启动"><a href="#elasticsearch安装配置启动" class="headerlink" title="elasticsearch安装配置启动"></a>elasticsearch安装配置启动</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.7.0-linux-x86_64.tar.gz</span><br><span class="line">tar -xzf elasticsearch-7.7.0-linux-x86_64.tar.gz</span><br><span class="line">cd elasticsearch-7.7.0/</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p> 修改 <code>elasticsearch-7.7.0/config/elasticsearch.yml</code> </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">action.destructive_requires_name: true</span><br><span class="line">xpack.ml.enabled: true</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd elasticsearch-7.7.0/</span><br><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure><blockquote><p> 后台启动可以用 <code>./bin/elasticsearch -d</code></p></blockquote><h2 id="验证是否启动成功"><a href="#验证是否启动成功" class="headerlink" title="验证是否启动成功"></a>验证是否启动成功</h2><blockquote><p> 在浏览器里输入  <a href="http://localhost:9200/?pretty" target="_blank" rel="noopener">http://localhost:9200/?pretty</a>  或者用 <code>curl &#39;http://localhost:9200/?pretty&#39;</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;192.168.0.110&quot;,</span><br><span class="line">    &quot;cluster_name&quot;: &quot;elasticsearch&quot;,</span><br><span class="line">    &quot;cluster_uuid&quot;: &quot;aHsnglvYQvSrJeoFR70mCQ&quot;,</span><br><span class="line">    &quot;version&quot;: &#123;</span><br><span class="line">        &quot;number&quot;: &quot;7.7.0&quot;,</span><br><span class="line">        &quot;build_flavor&quot;: &quot;default&quot;,</span><br><span class="line">        &quot;build_type&quot;: &quot;tar&quot;,</span><br><span class="line">        &quot;build_hash&quot;: &quot;81a1e9eda8e6183f5237786246f6dced26a10eaf&quot;,</span><br><span class="line">        &quot;build_date&quot;: &quot;2020-05-16T02:01:37.602180Z&quot;,</span><br><span class="line">        &quot;build_snapshot&quot;: false,</span><br><span class="line">        &quot;lucene_version&quot;: &quot;8.5.1&quot;,</span><br><span class="line">        &quot;minimum_wire_compatibility_version&quot;: &quot;6.8.0&quot;,</span><br><span class="line">        &quot;minimum_index_compatibility_version&quot;: &quot;6.0.0-beta1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;tagline&quot;: &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 看到类似以上结果说明es启动成功。  </p></blockquote><p><br></p><h1 id="kibana安装配置启动"><a href="#kibana安装配置启动" class="headerlink" title="kibana安装配置启动"></a>kibana安装配置启动</h1><h2 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-7.7.0-linux-x86_64.tar.gz </span><br><span class="line">tar -zxf kibana-7.7.0-linux-x86_64.tar.gz </span><br><span class="line">cd kibana-7.7.0-linux-x86_64</span><br></pre></td></tr></table></figure><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><blockquote><p> 修改 <code>kibana-7.7.0-darwin-x86_64/config/kibana.yml</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Kibana is served by a back end server. This setting specifies the port to use.</span><br><span class="line">server.port: 5601</span><br><span class="line"></span><br><span class="line"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span><br><span class="line"># The default is &apos;localhost&apos;, which usually means remote machines will not be able to connect.</span><br><span class="line"># To allow connections from remote users, set this parameter to a non-loopback address.</span><br><span class="line">server.host: &quot;localhost&quot;</span><br><span class="line"></span><br><span class="line"># The URLs of the Elasticsearch instances to use for all your queries.</span><br><span class="line">elasticsearch.hosts: [&quot;http://localhost:9200&quot;]</span><br></pre></td></tr></table></figure><h2 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd kibana-7.7.0-linux-x86_64/</span><br><span class="line">./bin/kinana</span><br></pre></td></tr></table></figure><blockquote><p>后台运行可以用 <code>./bin/kinana &amp;</code></p></blockquote><h2 id="验证是否启动成功-1"><a href="#验证是否启动成功-1" class="headerlink" title="验证是否启动成功"></a>验证是否启动成功</h2><blockquote><p> 浏览器里输入 <a href="http://127.0.0.1:5601/" target="_blank" rel="noopener">http://127.0.0.1:5601/</a> 如果可以打开页面说明启动成功</p></blockquote><p><br></p><h1 id="logstash安装配置启动"><a href="#logstash安装配置启动" class="headerlink" title="logstash安装配置启动"></a>logstash安装配置启动</h1><h2 id="下载-2"><a href="#下载-2" class="headerlink" title="下载"></a>下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-7.7.0.tar.gz</span><br><span class="line">tar -zxf logstash-7.7.0.tar.gz</span><br><span class="line">cd logstash-7.7.0</span><br></pre></td></tr></table></figure><h2 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h2><blockquote><p>在 config 目录下新建配置 <code>logstash-wkq-test.conf</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># Sample Logstash configuration for creating a simple</span><br><span class="line"># file -&gt; Logstash -&gt; Elasticsearch pipeline.</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [ &quot;/Users/weikeqin1/WorkSpaces/java/springboot-test/logs/entrance.log&quot;, &quot;/Users/weikeqin1/WorkSpaces/java/springboot-test/logs/*.log&quot; ]</span><br><span class="line">    type =&gt; &quot;entrance&quot;</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [ &quot;/Users/weikeqin1/WorkSpaces/java/springboot-test/logs/error*.log&quot; ]</span><br><span class="line">    type =&gt; &quot;error&quot;</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; &quot;/var/log/apache/access.log&quot;</span><br><span class="line">    type =&gt; &quot;apache&quot;</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  if [path] =~ &quot;entrance&quot; &#123;</span><br><span class="line">    mutate &#123; replace =&gt; &#123; &quot;type&quot; =&gt; &quot;entrance_log&quot; &#125; &#125;</span><br><span class="line">    grok &#123;</span><br><span class="line">      match =&gt; &#123; &quot;msg&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else if [path] =~ &quot;error&quot; &#123;</span><br><span class="line">    mutate &#123; replace =&gt; &#123; type =&gt; &quot;error_log&quot; &#125; &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  date &#123;</span><br><span class="line">    match =&gt; [ &quot;timestamp&quot; , &quot;yyyy-MM-dd HH:mm:ss&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;http://localhost:9200&quot;]</span><br><span class="line">    index =&gt; &quot;log-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    #user =&gt; &quot;elastic&quot;</span><br><span class="line">    #password =&gt; &quot;changeme&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 配置文件中的 grok 对应解析日志的字段<br> 日志样例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-05-17 11:14:22.887 INFO [XNIO-1 task-9] cn.wkq.controller.TestController.test|&#123;&quot;_traceId&quot;:&quot;1589685262886CY74&quot;,&quot;_method&quot;:&quot;test&quot;,&quot;param&quot;:&#123;&quot;appKey&quot;:&quot;wkq&quot;&#125;&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>解析规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%&#123;DATA:logDate&#125; %&#123;DATA:logTime&#125; %&#123;DATA:logLevel&#125; \[%&#123;DATA:thread&#125;\]%&#123;DATA:classnameMethod&#125;\|\&#123;%&#123;DATA:msg&#125;\&#125; </span><br><span class="line"></span><br><span class="line">%&#123;DATA:logDate&#125; %&#123;DATA:logTime&#125; %&#123;DATA:logLevel&#125; \[%&#123;DATA:thread&#125;\] %&#123;DATA:classnameMethod&#125;\|\&#123;\&quot;_traceId\&quot;:\&quot;%&#123;DATA:traceId&#125;\&quot;\,\&quot;_method\&quot;:\&quot;%&#123;DATA:method&#125;\&quot;,\&quot;param\&quot;\:\&#123;%&#123;DATA:param&#125;\&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p> 可以在kibana <a href="http://127.0.0.1:5601/app/kibana#/dev_tools/grokdebugger" target="_blank" rel="noopener">http://127.0.0.1:5601/app/kibana#/dev_tools/grokdebugger</a> 调试  </p></blockquote><h2 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/logstash -f ./config/logstash-wkq-test.conf</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><blockquote><p> 用压测工具压测程序，会生成很多日志，压测的时候看监控，程序才占用75M内存，logstash就占1000m内存，实际使用500m左右，elasticsearch用的默认配置，也占1000m内存，实际使用750m左右<br> logstash太占内存了 </p></blockquote><h1 id="filebeat"><a href="#filebeat" class="headerlink" title="filebeat"></a>filebeat</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.7.0-linux-x86_64.tar.gz</span><br><span class="line">tar xzvf filebeat-7.7.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#=========================== Filebeat inputs =============================</span><br><span class="line"></span><br><span class="line">filebeat.inputs:</span><br><span class="line"></span><br><span class="line"># Each - is an input. Most options can be set at the input level, so</span><br><span class="line"># you can use different inputs for various configurations.</span><br><span class="line"># Below are the input specific configurations.</span><br><span class="line"></span><br><span class="line">- type: log</span><br><span class="line"></span><br><span class="line">  # Change to true to enable this input configuration.</span><br><span class="line">  enabled: true</span><br><span class="line"></span><br><span class="line">  # Paths that should be crawled and fetched. Glob based paths.</span><br><span class="line">  paths:</span><br><span class="line">    - /Users/weikeqin1/WorkSpaces/java/springboot-test/logs/*.log</span><br><span class="line">    #- c:\programdata\elasticsearch\logs\*</span><br><span class="line"></span><br><span class="line">#-------------------------- Elasticsearch output ------------------------------</span><br><span class="line">#output.elasticsearch:</span><br><span class="line">  # Array of hosts to connect to.</span><br><span class="line">  #hosts: [&quot;localhost:9200&quot;]</span><br><span class="line"></span><br><span class="line">  # Protocol - either `http` (default) or `https`.</span><br><span class="line">  #protocol: &quot;https&quot;</span><br><span class="line"></span><br><span class="line">  # Authentication credentials - either API key or username/password.</span><br><span class="line">  #api_key: &quot;id:api_key&quot;</span><br><span class="line">  #username: &quot;elastic&quot;</span><br><span class="line">  #password: &quot;changeme&quot;</span><br><span class="line"></span><br><span class="line">#----------------------------- Logstash output --------------------------------</span><br><span class="line">output.logstash:</span><br><span class="line">  # The Logstash hosts</span><br><span class="line">  hosts: [&quot;localhost:5044&quot;]</span><br><span class="line"></span><br><span class="line">  # Optional SSL. By default is off.</span><br><span class="line">  # List of root certificates for HTTPS server verifications</span><br><span class="line">  #ssl.certificate_authorities: [&quot;/etc/pki/root/ca.pem&quot;]</span><br><span class="line"></span><br><span class="line">  # Certificate for SSL client authentication</span><br><span class="line">  #ssl.certificate: &quot;/etc/pki/client/cert.pem&quot;</span><br><span class="line"></span><br><span class="line">  # Client Certificate Key</span><br><span class="line">  #ssl.key: &quot;/etc/pki/client/cert.key&quot;</span><br></pre></td></tr></table></figure><h2 id="启动-3"><a href="#启动-3" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd filebeat-7.7.0-linux-x86_64</span><br><span class="line">sudo ./filebeat -e</span><br></pre></td></tr></table></figure><h1 id="在kibana查看日志"><a href="#在kibana查看日志" class="headerlink" title="在kibana查看日志"></a>在kibana查看日志</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;filebeat-7.7.0-2020.05.17&quot;,</span><br><span class="line">  &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;y42gIHIBU4Je81Q8Jaun&quot;,</span><br><span class="line">  &quot;_score&quot; : null,</span><br><span class="line">  &quot;_source&quot; : &#123;</span><br><span class="line">    &quot;log&quot; : &#123;</span><br><span class="line">      &quot;file&quot; : &#123;</span><br><span class="line">        &quot;path&quot; : &quot;/Users/weikeqin1/WorkSpaces/java/springboot-test/logs/springboot-test.2020-05-17_0.log&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;offset&quot; : 371432</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;tags&quot; : [</span><br><span class="line">      &quot;beats_input_codec_plain_applied&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;host&quot; : &#123;</span><br><span class="line">      &quot;architecture&quot; : &quot;x86_64&quot;,</span><br><span class="line">      &quot;id&quot; : &quot;DAA105AB-C93E-5E37-AFBF-A747032048AF&quot;,</span><br><span class="line">      &quot;ip&quot; : [</span><br><span class="line">        &quot;xx::xx:xx:xx:xx&quot;,</span><br><span class="line">        &quot;192.168.0.110&quot;,</span><br><span class="line">        &quot;xx::xx:xx:xx:xx&quot;,</span><br><span class="line">        &quot;xx::xx:xx:xx:xx&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;name&quot; : &quot;192.168.0.110&quot;,</span><br><span class="line">      &quot;mac&quot; : [</span><br><span class="line">        &quot;xx:xx:xx:xx:xx:xx&quot;,</span><br><span class="line">        &quot;xx:xx:xx:xx:xx:xx&quot;,</span><br><span class="line">        &quot;xx:xx:xx:xx:xx:xx&quot;,</span><br><span class="line">        &quot;xx:xx:xx:xx:xx:xx&quot;,</span><br><span class="line">        &quot;xx:xx:xx:xx:xx:xx&quot;,</span><br><span class="line">        &quot;xx:xx:xx:xx:xx:xx&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;os&quot; : &#123;</span><br><span class="line">        &quot;version&quot; : &quot;10.13.6&quot;,</span><br><span class="line">        &quot;build&quot; : &quot;17G8030&quot;,</span><br><span class="line">        &quot;kernel&quot; : &quot;17.7.0&quot;,</span><br><span class="line">        &quot;name&quot; : &quot;Mac OS X&quot;,</span><br><span class="line">        &quot;family&quot; : &quot;darwin&quot;,</span><br><span class="line">        &quot;platform&quot; : &quot;darwin&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;hostname&quot; : &quot;192.168.0.110&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;ecs&quot; : &#123;</span><br><span class="line">      &quot;version&quot; : &quot;1.5.0&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;agent&quot; : &#123;</span><br><span class="line">      &quot;id&quot; : &quot;1dcf526f-dc97-4a59-bccc-4751954962e6&quot;,</span><br><span class="line">      &quot;type&quot; : &quot;filebeat&quot;,</span><br><span class="line">      &quot;version&quot; : &quot;7.7.0&quot;,</span><br><span class="line">      &quot;ephemeral_id&quot; : &quot;810f6da6-b38a-4071-8d2f-9c45dee14440&quot;,</span><br><span class="line">      &quot;hostname&quot; : &quot;192.168.0.110&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;@version&quot; : &quot;1&quot;,</span><br><span class="line">    &quot;@timestamp&quot; : &quot;2020-05-17T03:14:23.865Z&quot;,</span><br><span class="line">    &quot;input&quot; : &#123;</span><br><span class="line">      &quot;type&quot; : &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;message&quot; : &quot;&quot;&quot;2020-05-17 11:14:22.879 [http-nio-11011-exec-20] INFO  [cn.wkq.controller.TestController] [32] - &#123;&quot;_traceId&quot;:&quot;15896852628794XZ3&quot;,&quot;_method&quot;:&quot;TestController#test#1589685262879#&quot;&#125;&quot;&quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot; : [</span><br><span class="line">    1589685263865</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://www.elastic.co/" target="_blank" rel="noopener">elastic官网</a><br>[2] <a href="https://www.elastic.co/cn/elasticsearch" target="_blank" rel="noopener">elasticsearch官网中文简介</a><br>[3] <a href="https://www.elastic.co/cn/logstash" target="_blank" rel="noopener">elasticsearch官网logstash中文简介</a><br>[4] <a href="https://www.elastic.co/cn/kibana" target="_blank" rel="noopener">elasticsearch官网kibana中文简介</a><br>[5] <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup.html" target="_blank" rel="noopener">elasticsearch下载安装启动及配置</a><br>[6] <a href="https://www.elastic.co/guide/en/logstash/current/configuration.html" target="_blank" rel="noopener">logstash-configuration</a><br>[7] <a href="https://www.elastic.co/guide/en/kibana/current/getting-started.html" target="_blank" rel="noopener">kibana-getting-started</a><br>[8] <a href="https://www.elastic.co/guide/en/beats/libbeat/current/getting-started.html" target="_blank" rel="noopener">beats-getting-started</a><br>[9] <a href="https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns" target="_blank" rel="noopener">logstash-patterns</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; Elastic Stack 是适用于数据采集、充实、存储、分析和可视化的一组开源工具。人们通常将 Elastic Stack 称为 ELK Stack（代指 Elasticsearch、Logstash 和 Kibana）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; Elasticsearch 是一个分布式的开源搜索和分析引擎，适用于所有类型的数据，包括文本、数字、地理空间、结构化和非结构化数据。  类似于MySQL，用来存储和分析数据。&lt;br&gt; Logstash可用来对数据进行聚合和处理，并将数据发送到 Elasticsearch。Logstash 是一个开源的服务器端数据处理管道，允许您在将数据索引到 Elasticsearch 之前同时从多个来源采集数据，并对数据进行充实和转换。 类似于程序，抽取解析数据并储存到ES&lt;br&gt; Kibana 是一款适用于 Elasticsearch 的数据可视化和管理工具。类似于使用MySQL时用的Navicat&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 简单的说，LogStash用来收取解析日志并发消息写入ES，Elasticsearch用来存储和分析查询，Kibana用来查看&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  es下载地址 &lt;a href=&quot;https://www.elastic.co/cn/downloads/elasticsearch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/cn/downloads/elasticsearch&lt;/a&gt;&lt;br&gt;  logstash下载地址 &lt;a href=&quot;https://www.elastic.co/cn/downloads/logstash&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/cn/downloads/logstash&lt;/a&gt;&lt;br&gt;  kibana下载地址  &lt;a href=&quot;https://www.elastic.co/cn/downloads/kibana&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/cn/downloads/kibana&lt;/a&gt;&lt;br&gt;  filebeats&lt;/p&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://weikeqin.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://weikeqin.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>jdk javac 使用笔记</title>
    <link href="http://weikeqin.com/2020/05/14/javac-notes/"/>
    <id>http://weikeqin.com/2020/05/14/javac-notes/</id>
    <published>2020-05-14T02:27:20.000Z</published>
    <updated>2020-05-17T15:31:53.614Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 最近有一个需求，需要测试一下新数据库(mysql优化版)某个表的写入速度和查询速度，需要从我们的测试环境数据库查数据，插入到新的测试环境的新数据库。<br> 本地连不上测试的数据库<br> 有很多应用服务器，但是所有的服务器不能连外网，只能访问公司内网。<br> 测试环境的应用可以连测试的数据库<br> 想写个python脚本，但是服务器上python是2.7的，而且很多包没有。<br> 想了想，应用服务器部署了java程序，java的包都有，想写一个java脚本来测试。(没错是java脚本)</p></blockquote><blockquote><p> 测试环境数据库     db_test_old  192.168.1.10<br> 新测试环境新数据库  db_test_new  192.168.2.11<br> 测试环境应用       test-java    192.168.3.12</p></blockquote><blockquote><p> 在idea里写完脚本，运行没问题，然后在 terminal 运行，被啪啪的打脸</p></blockquote><a id="more"></a><h1 id="1-想象中运行java文件的样子"><a href="#1-想象中运行java文件的样子" class="headerlink" title="(1) 想象中运行java文件的样子"></a>(1) 想象中运行java文件的样子</h1><h2 id="1-1-查看jdk版本"><a href="#1-1-查看jdk版本" class="headerlink" title="(1.1) 查看jdk版本"></a>(1.1) 查看jdk版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ java -version</span><br><span class="line">java version &quot;1.8.0_172&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_172-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.172-b11, mixed mode)</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h2 id="1-2-新建一个HelloWord-java文件测试"><a href="#1-2-新建一个HelloWord-java文件测试" class="headerlink" title="(1.2) 新建一个HelloWord.java文件测试"></a>(1.2) 新建一个HelloWord.java文件测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos java_test]$ pwd</span><br><span class="line">/home/wkq/workspaces/java_test</span><br><span class="line">vi HelloWorld.java</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWorld&#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">System.out.println(&quot;Hello, World!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-编译HelloWorld-java"><a href="#1-3-编译HelloWorld-java" class="headerlink" title="(1.3) 编译HelloWorld.java"></a>(1.3) 编译HelloWorld.java</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos java_test]$ javac HelloWorld.java</span><br><span class="line"></span><br><span class="line">[wkq@VM_77_25_centos java_test]$</span><br></pre></td></tr></table></figure><h2 id="1-4-运行HelloWorld"><a href="#1-4-运行HelloWorld" class="headerlink" title="(1.4) 运行HelloWorld"></a>(1.4) 运行HelloWorld</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos java_test]$ pwd</span><br><span class="line">/home/wkq/workspaces/java_test</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ ll</span><br><span class="line">total 8</span><br><span class="line">-rw-rw-r-- 1 wkq wkq 427 May 17 18:48 HelloWorld.class</span><br><span class="line">-rw-rw-r-- 1 wkq wkq 112 May 17 18:47 HelloWorld.java</span><br><span class="line">[wkq@VM_77_25_centos java_test]$</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ java HelloWorld</span><br><span class="line">Hello, World!</span><br><span class="line">[wkq@VM_77_25_centos java_test]$</span><br></pre></td></tr></table></figure><blockquote><p> 没问题，很完美</p></blockquote><h2 id="1-5-被打脸的一幕"><a href="#1-5-被打脸的一幕" class="headerlink" title="(1.5) 被打脸的一幕"></a>(1.5) 被打脸的一幕</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos java_test]$ java HelloWorld.class</span><br><span class="line">Error: Could not find or load main class HelloWorld.class</span><br><span class="line">[wkq@VM_77_25_centos java_test]$</span><br></pre></td></tr></table></figure><blockquote><p> 竟然不能运行 class文件<br> 被打脸后才明白，java的参数，传入的是main函数所在的类的名字，而不是class文件；java会根据类名自动去找class文件。</p></blockquote><p><br></p><h1 id="2-复盘"><a href="#2-复盘" class="headerlink" title="(2) 复盘"></a>(2) 复盘</h1><h2 id="2-1-查看jdk版本"><a href="#2-1-查看jdk版本" class="headerlink" title="(2.1) 查看jdk版本"></a>(2.1) 查看jdk版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ java -version</span><br><span class="line">java version &quot;1.8.0_172&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_172-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.172-b11, mixed mode)</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h2 id="2-2-新建MysqlLoadDataTest-java"><a href="#2-2-新建MysqlLoadDataTest-java" class="headerlink" title="(2.2) 新建MysqlLoadDataTest.java"></a>(2.2) 新建MysqlLoadDataTest.java</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi MySqlLoadDataTest.java</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package cn.wkq.java.test;</span><br><span class="line"></span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * MySqlLoadDataTest</span><br><span class="line"> *</span><br><span class="line"> * @author: weikeqin.cn@gmail.com</span><br><span class="line"> * @date: 2020-05-13 20:06</span><br><span class="line"> **/</span><br><span class="line">public class MySqlLoadDataTest &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param args</span><br><span class="line">     */</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MySqlLoadDataTest t = new MySqlLoadDataTest();</span><br><span class="line">        t.loadData();</span><br><span class="line">        System.out.println(&quot;执行完了。&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">    public void loadData() &#123;</span><br><span class="line"></span><br><span class="line">        int batchSize = 100;</span><br><span class="line">        // </span><br><span class="line">        String driverClassName = &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            Class.forName(driverClassName);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 省略其它逻辑</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-编译"><a href="#2-3-编译" class="headerlink" title="(2.3) 编译"></a>(2.3) 编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos java_test]$ pwd</span><br><span class="line">/home/wkq/workspaces/java_test</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ javac -encoding &quot;utf-8&quot; MySqlLoadDataTest.java</span><br><span class="line">[wkq@VM_77_25_centos java_test]$</span><br></pre></td></tr></table></figure><h2 id="2-4-运行"><a href="#2-4-运行" class="headerlink" title="(2.4) 运行"></a>(2.4) 运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos java_test]$ java MySqlLoadDataTest</span><br><span class="line">Error: Could not find or load main class MySqlLoadDataTest</span><br><span class="line">[wkq@VM_77_25_centos java_test]$</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ java cn.wkq.java.test.MySqlLoadDataTest</span><br><span class="line">Error: Could not find or load main class cn.wkq.java.test.MySqlLoadDataTest</span><br><span class="line">[wkq@VM_77_25_centos java_test]$</span><br></pre></td></tr></table></figure><h2 id="2-5-注释掉第一行包名重新运行"><a href="#2-5-注释掉第一行包名重新运行" class="headerlink" title="(2.5) 注释掉第一行包名重新运行"></a>(2.5) 注释掉第一行包名重新运行</h2><blockquote><p> 如果把 文件的第一行注释掉，重新编译运行会出现 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos java_test]$ vi MySqlLoadDataTest.java</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ </span><br><span class="line">[wkq@VM_77_25_centos java_test]$ javac -encoding &quot;utf-8&quot; MySqlLoadDataTest.java</span><br><span class="line">[wkq@VM_77_25_centos java_test]$</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ java MySqlLoadDataTest</span><br><span class="line">java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</span><br><span class="line">at java.net.URLClassLoader.findClass(URLClassLoader.java:381)</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:424)</span><br><span class="line">at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class="line">at java.lang.Class.forName0(Native Method)</span><br><span class="line">at java.lang.Class.forName(Class.java:264)</span><br><span class="line">at MySqlLoadDataTest.loadData(MySqlLoadDataTest.java:35)</span><br><span class="line">at MySqlLoadDataTest.main(MySqlLoadDataTest.java:20)</span><br><span class="line">?????</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos java_test]$ pwd</span><br><span class="line">/home/wkq/workspaces/java_test</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ cd /home/wkq/lib/</span><br><span class="line">[wkq@VM_77_25_centos lib]$ wget &quot;https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar&quot;</span><br><span class="line">--2020-05-17 21:59:08--  https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar</span><br><span class="line">Resolving repo1.maven.org (repo1.maven.org)... 151.101.24.209</span><br><span class="line">Connecting to repo1.maven.org (repo1.maven.org)|151.101.24.209|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 1007502 (984K) [application/java-archive]</span><br><span class="line">Saving to: &apos;mysql-connector-java-5.1.47.jar&apos;</span><br><span class="line"></span><br><span class="line">100%[=====================================================================================&gt;] 1,007,502   10.1KB/s   in 85s</span><br><span class="line"></span><br><span class="line">2020-05-17 22:00:34 (11.6 KB/s) - &apos;mysql-connector-java-5.1.47.jar&apos; saved [1007502/1007502]</span><br><span class="line"></span><br><span class="line">[wkq@VM_77_25_centos lib]$</span><br><span class="line">[wkq@VM_77_25_centos lib]$ ll</span><br><span class="line">total 988</span><br><span class="line">-rw-rw-r-- 1 wkq wkq 1007502 Aug  7  2018 mysql-connector-java-5.1.47.jar</span><br><span class="line">[wkq@VM_77_25_centos lib]$ pwd</span><br><span class="line">/home/wkq/lib</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ java -Dfile.encoding=UTF-8 -classpath /home/wkq/lib/mysql-connector-java-5.1.47.jar:/home/wkq/workspaces/java_test MySqlLoadDataTest</span><br><span class="line">执行完了。</span><br><span class="line">[wkq@VM_77_25_centos java_test]$</span><br></pre></td></tr></table></figure><blockquote><p> 在注释了第一行包路径后，重新编译<br> 指定了classpath后就可以运行成功。<br> 但是现在还有一个问题，测试的时候可以写一个java文件，但是实际开发的时候肯定不能不带包名</p></blockquote><h2 id="2-6-不注释第一行包名，把MySqlLoadDataTest-class换个目录"><a href="#2-6-不注释第一行包名，把MySqlLoadDataTest-class换个目录" class="headerlink" title="(2.6) 不注释第一行包名，把MySqlLoadDataTest.class换个目录"></a>(2.6) 不注释第一行包名，把MySqlLoadDataTest.class换个目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos java_test]$ ll</span><br><span class="line">total 16</span><br><span class="line">-rw-rw-r-- 1 wkq wkq  427 May 17 18:48 HelloWorld.class</span><br><span class="line">-rw-rw-r-- 1 wkq wkq  112 May 17 18:47 HelloWorld.java</span><br><span class="line">-rw-rw-r-- 1 wkq wkq  752 May 17 22:17 MySqlLoadDataTest.java</span><br><span class="line">drwxrwxr-x 3 wkq wkq 4096 May 17 22:17 cn</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ pwd</span><br><span class="line">/home/wkq/workspaces/java_test</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ java cn.wkq.java.test.MySqlLoadDataTest</span><br><span class="line">java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</span><br><span class="line">at java.net.URLClassLoader.findClass(URLClassLoader.java:381)</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:424)</span><br><span class="line">at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class="line">at java.lang.Class.forName0(Native Method)</span><br><span class="line">at java.lang.Class.forName(Class.java:264)</span><br><span class="line">at cn.wkq.java.test.MySqlLoadDataTest.loadData(MySqlLoadDataTest.java:35)</span><br><span class="line">at cn.wkq.java.test.MySqlLoadDataTest.main(MySqlLoadDataTest.java:20)</span><br><span class="line">?????</span><br><span class="line">[wkq@VM_77_25_centos java_test]$</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ java -Dfile.encoding=UTF-8 -classpath /home/wkq/lib/mysql-connector-java-5.1.47.jar cn.wkq.java.test.MySqlLoadDataTest</span><br><span class="line">Error: Could not find or load main class cn.wkq.java.test.MySqlLoadDataTest</span><br><span class="line">[wkq@VM_77_25_centos java_test]$</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ java -Dfile.encoding=UTF-8 -classpath /home/wkq/lib/mysql-connector-java-5.1.47.jar:/home/wkq/workspaces/java_test cn.wkq.java.test.MySqlLoadDataTest</span><br><span class="line">执行完了。</span><br><span class="line">[wkq@VM_77_25_centos java_test]$</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">&gt;  可以看到，运行成功了，果然是加了包名以后，编译的main方法放到了对应目录下。</span><br><span class="line">&gt;  终于用教训理解了全限定类名</span><br><span class="line">&gt;  用教训理解了 Java 会根据包名对应出目录结构，并从class path搜索该目录去找class文件。 (默认是当前目录，如果运行时不在当前目录需要指定 classpath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## (2.7) 不注释第一行包名，不换目录 </span><br><span class="line"></span><br><span class="line">&gt;  正常情况下，我们写完java代码，直接编译后就可以运行，不可能再对每个文件创建目录。所以得换个办法。</span><br><span class="line"></span><br><span class="line">```log</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ rm -rf cn/</span><br><span class="line">[wkq@VM_77_25_centos java_test]$</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ javac -Dfile.encoding=UTF-8 -d MySqlLoadDataTest.java</span><br><span class="line">javac: invalid flag: -Dfile.encoding=UTF-8</span><br><span class="line">Usage: javac &lt;options&gt; &lt;source files&gt;</span><br><span class="line">use -help for a list of possible options</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ javac -Dfile.encoding=UTF-8 -d . MySqlLoadDataTest.java</span><br><span class="line">javac: invalid flag: -Dfile.encoding=UTF-8</span><br><span class="line">Usage: javac &lt;options&gt; &lt;source files&gt;</span><br><span class="line">use -help for a list of possible options</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ javac -encoding &quot;utf-8&quot; -d . MySqlLoadDataTest.java</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ ll</span><br><span class="line">total 16</span><br><span class="line">-rw-rw-r-- 1 wkq wkq  427 May 17 18:48 HelloWorld.class</span><br><span class="line">-rw-rw-r-- 1 wkq wkq  112 May 17 18:47 HelloWorld.java</span><br><span class="line">-rw-rw-r-- 1 wkq wkq  752 May 17 22:17 MySqlLoadDataTest.java</span><br><span class="line">drwxrwxr-x 3 wkq wkq 4096 May 17 22:29 cn</span><br><span class="line">[wkq@VM_77_25_centos java_test]$</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ java -Dfile.encoding=UTF-8 -classpath /home/wkq/lib/mysql-connector-java-5.1.47.jar:/home/wkq/workspaces/java_test cn.wkq.java.test.MySqlLoadDataTest</span><br><span class="line">执行完了。</span><br><span class="line">[wkq@VM_77_25_centos java_test]$</span><br></pre></td></tr></table></figure><blockquote><p> 果然可以运行</p></blockquote><h2 id="编译java文件到指定目录"><a href="#编译java文件到指定目录" class="headerlink" title="编译java文件到指定目录"></a>编译java文件到指定目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos java_test]$ javac -encoding &quot;utf-8&quot; -d /home/wkq/workspaces/test_target/ MySqlLoadDataTest.java</span><br><span class="line">[wkq@VM_77_25_centos java_test]$</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ ll</span><br><span class="line">total 16</span><br><span class="line">-rw-rw-r-- 1 wkq wkq  427 May 17 18:48 HelloWorld.class</span><br><span class="line">-rw-rw-r-- 1 wkq wkq  112 May 17 18:47 HelloWorld.java</span><br><span class="line">-rw-rw-r-- 1 wkq wkq  752 May 17 22:17 MySqlLoadDataTest.java</span><br><span class="line">drwxrwxr-x 3 wkq wkq 4096 May 17 22:29 cn</span><br><span class="line">[wkq@VM_77_25_centos java_test]$ cd /home/wkq/workspaces/test_target/</span><br><span class="line">[wkq@VM_77_25_centos test_target]$ ll</span><br><span class="line">total 4</span><br><span class="line">drwxrwxr-x 3 wkq wkq 4096 May 17 22:32 cn</span><br><span class="line">[wkq@VM_77_25_centos test_target]$</span><br><span class="line">[wkq@VM_77_25_centos test_target]$ java -Dfile.encoding=UTF-8 -classpath /home/wkq/lib/mysql-connector-java-5.1.47.jar:/home/wkq/workspaces/java_test cn.wkq.java.test.MySqlLoadDataTest</span><br><span class="line">执行完了。</span><br><span class="line">[wkq@VM_77_25_centos test_target]$</span><br></pre></td></tr></table></figure><h2 id="开发工具idea是怎么编译代码的"><a href="#开发工具idea是怎么编译代码的" class="headerlink" title="开发工具idea是怎么编译代码的"></a>开发工具idea是怎么编译代码的</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -d target src/cn/wkq/java/test/*.java</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/wkq/software/jdk1.8.0_172/bin/javac -encoding &quot;utf-8&quot; -d /home/wkq/workspaces/java_test/target/ /home/wkq/workspaces/java_test/src/*.java</span><br></pre></td></tr></table></figure><blockquote><p>jdk目录 /home/wkq/software/jdk1.8.0_172/bin/<br>java代码目录  /home/wkq/workspaces/java_test/src/<br>编译后存放目录 /home/wkq/workspaces/java_test/target/</p></blockquote><h2 id="开发工具idea是怎么运行代码的"><a href="#开发工具idea是怎么运行代码的" class="headerlink" title="开发工具idea是怎么运行代码的"></a>开发工具idea是怎么运行代码的</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/wkq/software/jdk1.8.0_172/bin/java -Dfile.encoding=UTF-8 -classpath /home/wkq/lib/mysql-connector-java-5.1.47.jar:/home/wkq/workspaces/java_test cn.wkq.java.test.MySqlLoadDataTest</span><br></pre></td></tr></table></figure><blockquote><p>jdk目录 /home/wkq/software/jdk1.8.0_172/bin/<br>指定 classpath目录 -classpath /home/wkq/lib/mysql-connector-java-5.1.47.jar:/home/wkq/workspaces/java_test<br>运行main方法 cn.wkq.java.test.MySqlLoadDataTest</p></blockquote><h1 id="javac命令"><a href="#javac命令" class="headerlink" title="javac命令"></a>javac命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ /home/wkq/software/jdk1.8.0_172/bin/javac</span><br><span class="line">Usage: javac &lt;options&gt; &lt;source files&gt;</span><br><span class="line">where possible options include:</span><br><span class="line">  -g                         Generate all debugging info</span><br><span class="line">  -g:none                    Generate no debugging info</span><br><span class="line">  -g:&#123;lines,vars,source&#125;     Generate only some debugging info</span><br><span class="line">  -nowarn                    Generate no warnings</span><br><span class="line">  -verbose                   Output messages about what the compiler is doing</span><br><span class="line">  -deprecation               Output source locations where deprecated APIs are used</span><br><span class="line">  -classpath &lt;path&gt;          Specify where to find user class files and annotation processors</span><br><span class="line">  -cp &lt;path&gt;                 Specify where to find user class files and annotation processors</span><br><span class="line">  -sourcepath &lt;path&gt;         Specify where to find input source files</span><br><span class="line">  -bootclasspath &lt;path&gt;      Override location of bootstrap class files</span><br><span class="line">  -extdirs &lt;dirs&gt;            Override location of installed extensions</span><br><span class="line">  -endorseddirs &lt;dirs&gt;       Override location of endorsed standards path</span><br><span class="line">  -proc:&#123;none,only&#125;          Control whether annotation processing and/or compilation is done.</span><br><span class="line">  -processor &lt;class1&gt;[,&lt;class2&gt;,&lt;class3&gt;...] Names of the annotation processors to run; bypasses default discovery process</span><br><span class="line">  -processorpath &lt;path&gt;      Specify where to find annotation processors</span><br><span class="line">  -parameters                Generate metadata for reflection on method parameters</span><br><span class="line">  -d &lt;directory&gt;             Specify where to place generated class files</span><br><span class="line">  -s &lt;directory&gt;             Specify where to place generated source files</span><br><span class="line">  -h &lt;directory&gt;             Specify where to place generated native header files</span><br><span class="line">  -implicit:&#123;none,class&#125;     Specify whether or not to generate class files for implicitly referenced files</span><br><span class="line">  -encoding &lt;encoding&gt;       Specify character encoding used by source files</span><br><span class="line">  -source &lt;release&gt;          Provide source compatibility with specified release</span><br><span class="line">  -target &lt;release&gt;          Generate class files for specific VM version</span><br><span class="line">  -profile &lt;profile&gt;         Check that API used is available in the specified profile</span><br><span class="line">  -version                   Version information</span><br><span class="line">  -help                      Print a synopsis of standard options</span><br><span class="line">  -Akey[=value]              Options to pass to annotation processors</span><br><span class="line">  -X                         Print a synopsis of nonstandard options</span><br><span class="line">  -J&lt;flag&gt;                   Pass &lt;flag&gt; directly to the runtime system</span><br><span class="line">  -Werror                    Terminate compilation if warnings occur</span><br><span class="line">  @&lt;filename&gt;                Read options and filenames from file</span><br><span class="line"></span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h1 id="java命令"><a href="#java命令" class="headerlink" title="java命令"></a>java命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ /home/wkq/software/jdk1.8.0_172/bin/java</span><br><span class="line">Usage: java [-options] class [args...]</span><br><span class="line">           (to execute a class)</span><br><span class="line">   or  java [-options] -jar jarfile [args...]</span><br><span class="line">           (to execute a jar file)</span><br><span class="line">where options include:</span><br><span class="line">    -d32  use a 32-bit data model if available</span><br><span class="line">    -d64  use a 64-bit data model if available</span><br><span class="line">    -server  to select the &quot;server&quot; VM</span><br><span class="line">                  The default VM is server.</span><br><span class="line"></span><br><span class="line">    -cp &lt;class search path of directories and zip/jar files&gt;</span><br><span class="line">    -classpath &lt;class search path of directories and zip/jar files&gt;</span><br><span class="line">                  A : separated list of directories, JAR archives,</span><br><span class="line">                  and ZIP archives to search for class files.</span><br><span class="line">    -D&lt;name&gt;=&lt;value&gt;</span><br><span class="line">                  set a system property</span><br><span class="line">    -verbose:[class|gc|jni]</span><br><span class="line">                  enable verbose output</span><br><span class="line">    -version      print product version and exit</span><br><span class="line">    -version:&lt;value&gt;</span><br><span class="line">                  Warning: this feature is deprecated and will be removed</span><br><span class="line">                  in a future release.</span><br><span class="line">                  require the specified version to run</span><br><span class="line">    -showversion  print product version and continue</span><br><span class="line">    -jre-restrict-search | -no-jre-restrict-search</span><br><span class="line">                  Warning: this feature is deprecated and will be removed</span><br><span class="line">                  in a future release.</span><br><span class="line">                  include/exclude user private JREs in the version search</span><br><span class="line">    -? -help      print this help message</span><br><span class="line">    -X            print help on non-standard options</span><br><span class="line">    -ea[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">    -enableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">                  enable assertions with specified granularity</span><br><span class="line">    -da[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">    -disableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">                  disable assertions with specified granularity</span><br><span class="line">    -esa | -enablesystemassertions</span><br><span class="line">                  enable system assertions</span><br><span class="line">    -dsa | -disablesystemassertions</span><br><span class="line">                  disable system assertions</span><br><span class="line">    -agentlib:&lt;libname&gt;[=&lt;options&gt;]</span><br><span class="line">                  load native agent library &lt;libname&gt;, e.g. -agentlib:hprof</span><br><span class="line">                  see also, -agentlib:jdwp=help and -agentlib:hprof=help</span><br><span class="line">    -agentpath:&lt;pathname&gt;[=&lt;options&gt;]</span><br><span class="line">                  load native agent library by full pathname</span><br><span class="line">    -javaagent:&lt;jarpath&gt;[=&lt;options&gt;]</span><br><span class="line">                  load Java programming language agent, see java.lang.instrument</span><br><span class="line">    -splash:&lt;imagepath&gt;</span><br><span class="line">                  show splash screen with specified image</span><br><span class="line">See http://www.oracle.com/technetwork/java/javase/documentation/index.html for more details.</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html" target="_blank" rel="noopener">javac</a><br>[2] <a href="https://imshuai.com/using-javac" target="_blank" rel="noopener">第1期：抛开IDE，了解一下javac如何编译</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 最近有一个需求，需要测试一下新数据库(mysql优化版)某个表的写入速度和查询速度，需要从我们的测试环境数据库查数据，插入到新的测试环境的新数据库。&lt;br&gt; 本地连不上测试的数据库&lt;br&gt; 有很多应用服务器，但是所有的服务器不能连外网，只能访问公司内网。&lt;br&gt; 测试环境的应用可以连测试的数据库&lt;br&gt; 想写个python脚本，但是服务器上python是2.7的，而且很多包没有。&lt;br&gt; 想了想，应用服务器部署了java程序，java的包都有，想写一个java脚本来测试。(没错是java脚本)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 测试环境数据库     db_test_old  192.168.1.10&lt;br&gt; 新测试环境新数据库  db_test_new  192.168.2.11&lt;br&gt; 测试环境应用       test-java    192.168.3.12&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 在idea里写完脚本，运行没问题，然后在 terminal 运行，被啪啪的打脸&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://weikeqin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://weikeqin.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>guava缓存</title>
    <link href="http://weikeqin.com/2020/05/13/guava-cache/"/>
    <id>http://weikeqin.com/2020/05/13/guava-cache/</id>
    <published>2020-05-13T01:19:36.000Z</published>
    <updated>2020-06-06T10:54:35.871Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> google guava-cache</p></blockquote><blockquote><p> redis做缓存很快，但是还有网络IO，在并发量大要求耗时低的情况下还是不满足需求，所以想试试本地缓存。</p><p> 发现guava缓存不错，想试试 </p><p> 在本地demo测试的时候发现更新缓存时有毛刺出现</p></blockquote><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wkq.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.CacheBuilder;</span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.CacheLoader;</span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.LoadingCache;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LocalCache</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: weikeqin.cn@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020-05-10 17:08</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalCache</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(LocalCache.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LoadingCache&lt;String, Object&gt; cache = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">1</span> &lt;&lt; <span class="number">20</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">102400</span>; i++) &#123;</span><br><span class="line">            sb.append(i);</span><br><span class="line">        &#125;</span><br><span class="line">        String testString = sb.toString();</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, testString.length());</span><br><span class="line"></span><br><span class="line">        cache = CacheBuilder.newBuilder()</span><br><span class="line">                <span class="comment">//设置并发级别为8，并发级别是指可以同时写缓存的线程数</span></span><br><span class="line">                .concurrencyLevel(<span class="number">8</span>)</span><br><span class="line">                <span class="comment">//设置缓存容器的初始容量为10</span></span><br><span class="line">                .initialCapacity(<span class="number">10</span>)</span><br><span class="line">                <span class="comment">//设置缓存最大容量为100，超过100之后就会按照LRU最近虽少使用算法来移除缓存项</span></span><br><span class="line">                .maximumSize(<span class="number">100</span>)</span><br><span class="line">                <span class="comment">//是否需要统计缓存情况,该操作消耗一定的性能,生产环境应该去除</span></span><br><span class="line">                .recordStats()</span><br><span class="line">                <span class="comment">//设置写缓存后n秒钟过期</span></span><br><span class="line">                .expireAfterWrite(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">                <span class="comment">//设置读写缓存后n秒钟过期,实际很少用到,类似于expireAfterWrite</span></span><br><span class="line">                <span class="comment">//.expireAfterAccess(17, TimeUnit.SECONDS)</span></span><br><span class="line">                <span class="comment">//只阻塞当前数据加载线程，其他线程返回旧值</span></span><br><span class="line">                .refreshAfterWrite(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">                <span class="comment">//设置缓存的移除通知</span></span><br><span class="line">                .removalListener(notification -&gt; &#123;</span><br><span class="line">                    log.info(<span class="string">" 本地缓存key:&#123;&#125; 被移除，原因:&#123;&#125;  "</span>, notification.getKey(), notification.getCause());</span><br><span class="line">                    <span class="comment">//log.info(" 本地缓存key:&#123;&#125; 被移除，原因:&#123;&#125;   对应值:&#123;&#125;", notification.getKey(), notification.getCause(), notification.getValue());</span></span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">//build方法中可以指定CacheLoader，在缓存不存在时通过CacheLoader的实现自动加载缓存</span></span><br><span class="line">                .build(<span class="keyword">new</span> CacheLoader&lt;String, Object&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">load</span><span class="params">(String key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        log.info(<span class="string">"重新查库"</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">"获取的缓存的值"</span> + testString;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacheTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">4</span>, <span class="number">8</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line"></span><br><span class="line">        String key = <span class="string">"1"</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">100000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            executor.execute(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">long</span> t1 = System.currentTimeMillis();</span><br><span class="line">                Object value = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    value = cache.get(key);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                    log.error(<span class="string">""</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">long</span> t2 = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">                log.info(<span class="string">" &#123;&#125;  cost &#123;&#125; ms "</span>, finalI, t2 - t1);</span><br><span class="line">                <span class="comment">//log.info("&#123;&#125; 根据 &#123;&#125; 获取到的值 &#123;&#125; ", Thread.currentThread().getName(), key, ((String) value).length());</span></span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                Thread.sleep(1);</span></span><br><span class="line"><span class="comment">//            &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                log.error("", e);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executor.shutdown();</span><br><span class="line">        log.info(<span class="string">"线程池关闭。"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!executor.isTerminated()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                log.info(<span class="string">"线程池中线程数目：&#123;&#125;，队列中等待执行的任务数目：&#123;&#125;，已执行玩别的任务数目：&#123;&#125;"</span>, executor.getPoolSize(), executor.getQueue().size(), executor.getCompletedTaskCount());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                log.error(<span class="string">""</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">"还有线程未执行完成"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//缓存状态查看</span></span><br><span class="line">        log.info(cache.stats().toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 少了网络IO，整体 TP99 比redis好了不少<br> 但是在压测时发现毛刺更严重</p></blockquote><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://github.com/google/guava/wiki/CachesExplained" target="_blank" rel="noopener">google/guava/wiki/CachesExplained</a><br>[2] <a href="http://ifeve.com/google-guava-cachesexplained/" target="_blank" rel="noopener">[Google Guava] 3-缓存 并发编程网 - ifeve.com</a><br>[3] <a href="https://zhuanlan.zhihu.com/p/44380897" target="_blank" rel="noopener">缓存篇 : Guava cache 之全面剖析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; google guava-cache&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; redis做缓存很快，但是还有网络IO，在并发量大要求耗时低的情况下还是不满足需求，所以想试试本地缓存。&lt;/p&gt;
&lt;p&gt; 发现guava缓存不错，想试试 &lt;/p&gt;
&lt;p&gt; 在本地demo测试的时候发现更新缓存时有毛刺出现&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="cache" scheme="http://weikeqin.com/categories/cache/"/>
    
    
      <category term="cache" scheme="http://weikeqin.com/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>vim笔记</title>
    <link href="http://weikeqin.com/2020/04/18/vim-notes/"/>
    <id>http://weikeqin.com/2020/04/18/vim-notes/</id>
    <published>2020-04-18T06:49:16.000Z</published>
    <updated>2020-06-05T15:32:36.681Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> vim有三种模式，一般模式、编辑模式、命令模式。<br> 一般模式下只能 查看文件。  (输入 <code>ESC</code> 可以进入一般模式。)<br> 编辑模式下可以对文件进行 新增、修改、删除。  (输入 <code>i</code> 可以进入编辑模式。进入后左下角可以看到 <code>INSERT</code> 标识)<br> 命令模式下可以对文件进行 保存、退出 等操作。  (输入 <code>ESC</code> + <code>:</code> 可以进入命令模式。)</p></blockquote><blockquote><p> 输入<code>ESC</code>+<code>:</code>进入命令模式后，输入<code>q!</code>可以退出文件并且不保存修改。<br> 输入<code>ESC</code>+<code>:</code>进入命令模式后，输入<code>qw</code>可以退出文件并且保存修改。</p></blockquote><a id="more"></a><p> <img src="/img/linux/vim/vim_cheatsheat.jpeg" alt="vin_charset"></p><h1 id="1-一般模式"><a href="#1-一般模式" class="headerlink" title="(1) 一般模式"></a>(1) 一般模式</h1><blockquote><p> 一般模式下只能查看。</p></blockquote><h2 id="1-1-移动光标"><a href="#1-1-移动光标" class="headerlink" title="(1.1) 移动光标"></a>(1.1) 移动光标</h2><table><thead><tr><th>命令</th><th>对应结果</th></tr></thead><tbody><tr><td>← 或 h</td><td>光标向左移动一个字符</td></tr><tr><td>↓ 或 j</td><td>光标向下移动一个字符</td></tr><tr><td>↑ 或 k</td><td>光标向上移动一个字符</td></tr><tr><td>→ 或 l</td><td>光标向右移动一个字符</td></tr><tr><td>Ctrl + f</td><td>屏幕 向下 移动一页，相当于 Page Down按键</td></tr><tr><td>Ctrl + b</td><td>屏幕 向上 移动一页，相当于 Page Up 按键</td></tr><tr><td>Ctrl + d</td><td>屏幕 向下 移动半页 (常用)</td></tr><tr><td>Ctrl + u</td><td>屏幕 向上 移动半页 (常用)</td></tr><tr><td>+</td><td>光标移动到非空格符的下一行</td></tr><tr><td>-</td><td>光标移动到非空格符的上一行</td></tr><tr><td>n<space></space></td><td>那个 n 表示数字，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。 <br> 例如 20n 则光标会向后面移动 20 个字符距离。</td></tr><tr><td>0 或 功能键Home</td><td>这是数字 0 ：移动到这一行的最前面字符处 (常用)</td></tr><tr><td>$ 或 功能键End</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td>H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td>M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td>L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td>G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td>nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td>gg</td><td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td></tr><tr><td>n<enter></enter></td><td>n 为数字。光标向下移动 n 行(常用)</td></tr></tbody></table><p><br></p><h2 id="1-2-搜索替换"><a href="#1-2-搜索替换" class="headerlink" title="(1.2) 搜索替换"></a>(1.2) 搜索替换</h2><table><thead><tr><th>命令</th><th>对应结果</th></tr></thead><tbody><tr><td>/word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)</td></tr><tr><td>?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td>n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td>N</td><td>这个 N 是英文按键。与 n 刚好相反，为反向进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示向上搜寻 vbird 。</td></tr><tr><td>使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</td><td></td></tr><tr><td>:n1,n2s/word1/word2/g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！(常用) <br> 　　例如，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD ： :100,200s/vbird/VBIRD/g</td></tr><tr><td>:1,$s/word1/word2/g 或 :%s/word1/word2/g</td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td></tr><tr><td>:1,$s/word1/word2/gc 或 :%s/word1/word2/gc</td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr></tbody></table><p><br></p><h2 id="1-3-复制、粘贴、删除"><a href="#1-3-复制、粘贴、删除" class="headerlink" title="(1.3) 复制、粘贴、删除"></a>(1.3) 复制、粘贴、删除</h2><table><thead><tr><th>命令</th><th>对应结果</th></tr></thead><tbody><tr><td>yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td>nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td>y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td>yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td>y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td>y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td>p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td></tr><tr><td>J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td>x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td>nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 10x。</td></tr><tr><td>dd</td><td>删除游标所在的那一整行(常用)</td></tr><tr><td>ndd</td><td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td>d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td>dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td>d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td>d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td>c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td>u</td><td>复原前一个动作。(常用)</td></tr><tr><td>[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td>.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点.就好了！ (常用)</td></tr></tbody></table><p><br></p><h1 id="2-编辑模式"><a href="#2-编辑模式" class="headerlink" title="(2) 编辑模式"></a>(2) 编辑模式</h1><blockquote><p> 从一般模式进入编辑模式的方式。</p></blockquote><table><thead><tr><th>命令</th><th>对应结果</th></tr></thead><tbody><tr><td>i, I</td><td>进入输入模式(Insert mode)：  <br>　　i 为从目前光标所在处输入， I 为在目前所在行的第一个非空格符处开始输入。 (常用)</td></tr><tr><td>a, A</td><td>进入输入模式(Insert mode)：  <br>　　a 为从目前光标所在的下一个字符处开始输入， A 为从光标所在行的最后一个字符处开始输入。(常用)</td></tr><tr><td>o, O</td><td>进入输入模式(Insert mode)：  <br>　　o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在处的上一行输入新的一行！(常用)</td></tr><tr><td>r, R</td><td>进入取代模式(Replace mode)： <br>　　r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td>[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><h1 id="3-命令模式"><a href="#3-命令模式" class="headerlink" title="(3) 命令模式"></a>(3) 命令模式</h1><table><thead><tr><th>命令</th><th>对应结果</th></tr></thead><tbody><tr><td>:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td>:w!</td><td>若文件属性为只读时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td>:q</td><td>离开 vi (常用)</td></tr><tr><td>:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td>注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有强制的意思</td><td></td></tr><tr><td>:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td>ZZ</td><td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td></tr><tr><td>:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td>:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 filename 这个档案内容加到游标所在行后面</td></tr><tr><td>:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td>:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！<br> 例如 :! ls /home即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td></tr></tbody></table><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">Linux vi/vim</a><br>[2] <a href="https://www.jianshu.com/p/ba8adedf1e00" target="_blank" rel="noopener">vim 命令详解</a><br>[3] <a href="http://www.vim.org/" target="_blank" rel="noopener">vim.org</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; vim有三种模式，一般模式、编辑模式、命令模式。&lt;br&gt; 一般模式下只能 查看文件。  (输入 &lt;code&gt;ESC&lt;/code&gt; 可以进入一般模式。)&lt;br&gt; 编辑模式下可以对文件进行 新增、修改、删除。  (输入 &lt;code&gt;i&lt;/code&gt; 可以进入编辑模式。进入后左下角可以看到 &lt;code&gt;INSERT&lt;/code&gt; 标识)&lt;br&gt; 命令模式下可以对文件进行 保存、退出 等操作。  (输入 &lt;code&gt;ESC&lt;/code&gt; + &lt;code&gt;:&lt;/code&gt; 可以进入命令模式。)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 输入&lt;code&gt;ESC&lt;/code&gt;+&lt;code&gt;:&lt;/code&gt;进入命令模式后，输入&lt;code&gt;q!&lt;/code&gt;可以退出文件并且不保存修改。&lt;br&gt; 输入&lt;code&gt;ESC&lt;/code&gt;+&lt;code&gt;:&lt;/code&gt;进入命令模式后，输入&lt;code&gt;qw&lt;/code&gt;可以退出文件并且保存修改。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="tools" scheme="http://weikeqin.com/categories/tools/"/>
    
    
      <category term="tools" scheme="http://weikeqin.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>vs-code-notes</title>
    <link href="http://weikeqin.com/2020/04/18/vs-code-notes/"/>
    <id>http://weikeqin.com/2020/04/18/vs-code-notes/</id>
    <published>2020-04-18T06:49:06.000Z</published>
    <updated>2020-05-29T06:14:59.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-vs-code-设置语言"><a href="#1-vs-code-设置语言" class="headerlink" title="(1) vs-code 设置语言"></a>(1) vs-code 设置语言</h1><p>  打开命令面板 ，输入 <code>configure display language</code>，设置语言为 <code>zh-cn</code> </p><p>  备注：打开命令面板快捷键  mac <code>Shift + Command + P</code>    Windows <code>Ctrl + Shift + p</code></p><h1 id="2-vs-code-设置背景豆沙绿"><a href="#2-vs-code-设置背景豆沙绿" class="headerlink" title="(2) vs-code 设置背景豆沙绿"></a>(2) vs-code 设置背景豆沙绿</h1><p>  修改配置文件 <code>~/Library/Application Support/Code/User/settings.json</code><br>  把  <code>&quot;editor.background&quot;</code> 设置成 <code>&quot;#C7EDCC&quot;</code>，具体如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"workbench.colorTheme"</span>: <span class="string">"Default Light+"</span>,</span><br><span class="line">    <span class="attr">"workbench.colorCustomizations"</span>: &#123;</span><br><span class="line">        <span class="attr">"editor.background"</span>: <span class="string">"#C7EDCC"</span></span><br><span class="line">        //设置用户选中代码段的颜色 </span><br><span class="line">        //<span class="string">"editor.selectionBackground"</span>: <span class="string">"#2f00ff"</span>,</span><br><span class="line">        //搜索匹配的背景色</span><br><span class="line">        //"editor.findMatchBackground": "#ff0000",</span><br><span class="line">        //"editor.findMatchHighlightBackground": "#ff00ff",</span><br><span class="line">        //"editor.findRangeHighlightBackground": "#ff9900"</span><br><span class="line">    </span><br><span class="line">    &#125;,</span><br><span class="line">    "editor.fontSize": 16,</span><br><span class="line">    "window.openFoldersInNewWindow": "off",</span><br><span class="line">    "window.openWithoutArgumentsInNewWindow": "on",</span><br><span class="line">    "editor.largeFileOptimizations": false,</span><br><span class="line">    "editor.suggestSelection": "first",</span><br><span class="line">    "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",</span><br><span class="line">    "java.configuration.checkProjectSettingsExclusions": false,</span><br><span class="line">    "extensions.autoUpdate": false,</span><br><span class="line">    "window.zoomLevel": 0,</span><br><span class="line">    "update.mode": "none"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://code.visualstudio.com/docs" target="_blank" rel="noopener">vscode-docs</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-vs-code-设置语言&quot;&gt;&lt;a href=&quot;#1-vs-code-设置语言&quot; class=&quot;headerlink&quot; title=&quot;(1) vs-code 设置语言&quot;&gt;&lt;/a&gt;(1) vs-code 设置语言&lt;/h1&gt;&lt;p&gt;  打开命令面板 ，输入 &lt;code&gt;configure display language&lt;/code&gt;，设置语言为 &lt;code&gt;zh-cn&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;  备注：打开命令面板快捷键  mac &lt;code&gt;Shift + Command + P&lt;/code&gt;    Windows &lt;code&gt;Ctrl + Shift + p&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-vs-code-设置背景豆沙绿&quot;&gt;&lt;a href=&quot;#2-vs-code-设置背景豆沙绿&quot; class=&quot;headerlink&quot; title=&quot;(2) vs-code 设置背景豆沙绿&quot;&gt;&lt;/a&gt;(2) vs-code 设置背景豆沙绿&lt;/h1&gt;&lt;p&gt;  修改配置文件 &lt;code&gt;~/Library/Application Support/Code/User/settings.json&lt;/code&gt;&lt;br&gt;  把  &lt;code&gt;&amp;quot;editor.background&amp;quot;&lt;/code&gt; 设置成 &lt;code&gt;&amp;quot;#C7EDCC&amp;quot;&lt;/code&gt;，具体如下：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;workbench.colorTheme&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Default Light+&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;workbench.colorCustomizations&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;editor.background&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;#C7EDCC&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //设置用户选中代码段的颜色 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //&lt;span class=&quot;string&quot;&gt;&quot;editor.selectionBackground&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;#2f00ff&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //搜索匹配的背景色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //&quot;editor.findMatchBackground&quot;: &quot;#ff0000&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //&quot;editor.findMatchHighlightBackground&quot;: &quot;#ff00ff&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //&quot;editor.findRangeHighlightBackground&quot;: &quot;#ff9900&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;editor.fontSize&quot;: 16,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;window.openFoldersInNewWindow&quot;: &quot;off&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;window.openWithoutArgumentsInNewWindow&quot;: &quot;on&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;editor.largeFileOptimizations&quot;: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;editor.suggestSelection&quot;: &quot;first&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;vsintellicode.modify.editor.suggestSelection&quot;: &quot;automaticallyOverrodeDefaultValue&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;java.configuration.checkProjectSettingsExclusions&quot;: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;extensions.autoUpdate&quot;: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;window.zoomLevel&quot;: 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;update.mode&quot;: &quot;none&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="tools" scheme="http://weikeqin.com/categories/tools/"/>
    
    
      <category term="tools" scheme="http://weikeqin.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>cache笔记</title>
    <link href="http://weikeqin.com/2020/04/06/cache-notes/"/>
    <id>http://weikeqin.com/2020/04/06/cache-notes/</id>
    <published>2020-04-06T01:22:49.000Z</published>
    <updated>2020-06-05T15:44:44.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://blog.csdn.net/zeb_perfect/article/details/54135506" target="_blank" rel="noopener">缓存穿透，缓存击穿，缓存雪崩解决方案分析</a><br>[2] <a href="https://blog.csdn.net/xlgen157387/article/details/79530877" target="_blank" rel="noopener">缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级等问题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;p&gt;[1] &lt;a href=&quot;https://blog.csdn.net/zeb
      
    
    </summary>
    
      <category term="cache" scheme="http://weikeqin.com/categories/cache/"/>
    
    
      <category term="cache" scheme="http://weikeqin.com/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>JVM性能调优监控工具 jps jstat jinfo jmap jhat jstack</title>
    <link href="http://weikeqin.com/2020/03/28/jvm-performance-tuning-monitoring-tool/"/>
    <id>http://weikeqin.com/2020/03/28/jvm-performance-tuning-monitoring-tool/</id>
    <published>2020-03-28T02:16:25.000Z</published>
    <updated>2020-03-30T15:37:10.124Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 最近测试环境总是莫名的出问题，然后部署服务的容器里除了服务打印的日志，没有其它信息，想看看是什么原因导致服务很卡，是不是有哪块代码占用内存高。<br> 代码执行缓慢、OutOfMemoryError，内存不足、内存泄露、线程死锁、锁争用（Lock Contention）、Java进程消耗CPU过高 都可以使用JDK的命令行工具排查。</p></blockquote><p><br></p><h1 id="1-JDK的命令行工具"><a href="#1-JDK的命令行工具" class="headerlink" title="(1) JDK的命令行工具"></a>(1) JDK的命令行工具</h1><blockquote><p> jps、jstat、jinfo、jmap、jhat、jstack、hprof<br>jps : 虚拟机进程状况工具<br>jstat : 虚拟机统计信息监视工具<br>jinfo : Java 配置信息工具<br>jmap : Java 内存映像工具<br>jhat : 虚拟机堆转储快照分析工具<br>jstack : Java 堆栈跟踪工具</p></blockquote><blockquote><p> jps将打印所有正在运行的 Java 进程。<br> jstat允许用户查看目标 Java 进程的类加载、即时编译以及垃圾回收相关的信息。它常用于检测垃圾回收问题以及内存泄漏问题。<br> jmap允许用户统计目标 Java 进程的堆中存放的 Java 对象，并将它们导出成二进制文件。<br> jinfo将打印目标 Java 进程的配置参数，并能够改动其中 manageabe 的参数。<br> jstack将打印目标 Java 进程中各个线程的栈轨迹、线程状态、锁状况等信息。它还将自动检测死锁。<br> jcmd则是一把瑞士军刀，可以用来实现前面除了jstat之外所有命令的功能。</p></blockquote><p>Java虚拟机的监控及诊断工具-GUI</p><blockquote><p>JConsole : Java 监视与管理控制台<br>VisualVM : 多合一故障处理工具<br>eclipse MAT<br>JMC<br>JITWatch</p></blockquote><p><br></p><h1 id="2-虚拟机进程状况工具-jps-JVM-Process-Status-Tool"><a href="#2-虚拟机进程状况工具-jps-JVM-Process-Status-Tool" class="headerlink" title="(2) 虚拟机进程状况工具 jps (JVM Process Status Tool)"></a>(2) 虚拟机进程状况工具 jps (JVM Process Status Tool)</h1><blockquote><p> jps主要用来输出JVM中运行的进程状态信息。<br> jps命令使用Java启动器来查找传递给main方法的类名和参数。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jps -help</span><br><span class="line">usage: jps [-help]</span><br><span class="line">       jps [-q] [-mlvV] [&lt;hostid&gt;]</span><br><span class="line"></span><br><span class="line">Definitions:</span><br><span class="line">    &lt;hostid&gt;:      &lt;hostname&gt;[:&lt;port&gt;]</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h2 id="2-1-jps命令"><a href="#2-1-jps命令" class="headerlink" title="(2.1) jps命令"></a>(2.1) jps命令</h2><blockquote><p>jps命令用于输出JVM中运行的进程状态信息。可以获取到进程的pid、全限定名、传入main方法的参数、传入JVM的参数 等。</p></blockquote><blockquote><p>语法格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps [ options ] [ hostid ]</span><br></pre></td></tr></table></figure></p></blockquote><p>  如果不指定hostid就默认为当前主机或服务器。</p><p>  详细信息见 <code>man jps</code></p><h3 id="2-1-1-jps-不加参数"><a href="#2-1-1-jps-不加参数" class="headerlink" title="(2.1.1) jps 不加参数"></a>(2.1.1) jps 不加参数</h3><blockquote><p> 在本地主机上搜索检测到的JVM。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jps</span><br><span class="line">14916 Jps</span><br><span class="line">13050 Elasticsearch</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-1-2-jps-q"><a href="#2-1-2-jps-q" class="headerlink" title="(2.1.2) jps -q"></a>(2.1.2) jps -q</h3><blockquote><p>不输出类名、Jar名和传入main方法的参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jps -q</span><br><span class="line">15059</span><br><span class="line">13050</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="2-1-3-jps-m"><a href="#2-1-3-jps-m" class="headerlink" title="(2.1.3) jps -m"></a>(2.1.3) jps -m</h3><blockquote><p>显示传递给main方法的参数。对于嵌入式JVM，输出可能为null。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jps -m</span><br><span class="line">15092 Jps -m</span><br><span class="line">13050 Elasticsearch -d</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="2-1-4-jps-l"><a href="#2-1-4-jps-l" class="headerlink" title="(2.1.4) jps -l"></a>(2.1.4) jps -l</h3><blockquote><p>输出main类或Jar的全限定名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jps -l</span><br><span class="line">15139 sun.tools.jps.Jps</span><br><span class="line">13050 org.elasticsearch.bootstrap.Elasticsearch</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="2-1-5-jps-v"><a href="#2-1-5-jps-v" class="headerlink" title="(2.1.5) jps -v"></a>(2.1.5) jps -v</h3><blockquote><p>显示传递给JVM的参数。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jps -v</span><br><span class="line">15157 Jps -Denv.class.path=.:/home/wkq/software/jdk1.8.0_172/lib/dt.jar:/home/wkq/software/jdk1.8.0_172/lib/tools.jar -Dapplication.home=/home/wkq/software/jdk1.8.0_172 -Xms8m</span><br><span class="line">13050 Elasticsearch -Xms1g -Xmx1g -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -Des.networkaddress.cache.ttl=60 -Des.networkaddress.cache.negative.ttl=10 -XX:+AlwaysPreTouch -Xss1m -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djna.nosys=true -XX:-OmitStackTraceInFastThrow -Dio.netty.noUnsafe=true -Dio.netty.noKeySetOptimization=true -Dio.netty.recycler.maxCapacityPerThread=0 -Dlog4j.shutdownHookEnabled=false -Dlog4j2.disable.jmx=true -Djava.io.tmpdir=/tmp/elasticsearch-5035355569386013893 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=data -XX:ErrorFile=logs/hs_err_pid%p.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:logs/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=32 -XX:GCLogFileSize=64m -Des.path.home=/home/wkq/software/elasticsearch-6.6.2 -Des.path.conf=/home/wkq/software/elasticsearch-6.6.2/config -Des.distribution.flavor=default -Des.distribution.type=tar</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="2-1-6-jps-V"><a href="#2-1-6-jps-V" class="headerlink" title="(2.1.6) jps -V"></a>(2.1.6) jps -V</h3><blockquote><p>禁止输出类名，JAR全限定名和传递给main方法的参数的输出，从而产生仅本地JVM标识符的列表。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jps -V</span><br><span class="line">15204 Jps</span><br><span class="line">13050 Elasticsearch</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h2 id="2-2-常用jps命令"><a href="#2-2-常用jps命令" class="headerlink" title="(2.2) 常用jps命令"></a>(2.2) 常用jps命令</h2><h3 id="2-2-1-jps-lm"><a href="#2-2-1-jps-lm" class="headerlink" title="(2.2.1) jps -lm"></a>(2.2.1) jps -lm</h3><blockquote><p>显示 pid、全限定名、传递给main方法的参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jps -lm</span><br><span class="line">17539 sun.tools.jps.Jps -lm</span><br><span class="line">13050 org.elasticsearch.bootstrap.Elasticsearch -d</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="2-2-2-jps-lvm"><a href="#2-2-2-jps-lvm" class="headerlink" title="(2.2.2) jps -lvm"></a>(2.2.2) jps -lvm</h3><blockquote><p>显示 pid、全限定名、传递给main方法的参数、传递给JVM的参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jps -lvm</span><br><span class="line">13050 org.elasticsearch.bootstrap.Elasticsearch -d -Xms1g -Xmx1g -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -Des.networkaddress.cache.ttl=60 -Des.networkaddress.cache.negative.ttl=10 -XX:+AlwaysPreTouch -Xss1m -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djna.nosys=true -XX:-OmitStackTraceInFastThrow -Dio.netty.noUnsafe=true -Dio.netty.noKeySetOptimization=true -Dio.netty.recycler.maxCapacityPerThread=0 -Dlog4j.shutdownHookEnabled=false -Dlog4j2.disable.jmx=true -Djava.io.tmpdir=/tmp/elasticsearch-5035355569386013893 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=data -XX:ErrorFile=logs/hs_err_pid%p.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:logs/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=32 -XX:GCLogFileSize=64m -Des.path.home=/home/wkq/software/elasticsearch-6.6.2 -Des.path.conf=/home/wkq/software/elasticsearch-6.6.2/config -Des.distribution.flavor=default -Des.distribution.type=tar</span><br><span class="line">17567 sun.tools.jps.Jps -lvm -Denv.class.path=.:/home/wkq/software/jdk1.8.0_172/lib/dt.jar:/home/wkq/software/jdk1.8.0_172/lib/tools.jar -Dapplication.home=/home/wkq/software/jdk1.8.0_172 -Xms8m</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><p><br></p><h1 id="3-虚拟机统计信息监视工具-jstat-JVM-Statics-Monitoring-Tool"><a href="#3-虚拟机统计信息监视工具-jstat-JVM-Statics-Monitoring-Tool" class="headerlink" title="(3) 虚拟机统计信息监视工具 jstat (JVM Statics Monitoring Tool)"></a>(3) 虚拟机统计信息监视工具 jstat (JVM Statics Monitoring Tool)</h1><blockquote><p> jstat是用于监视虚拟机各种运行状态信息的命令行工具。</p></blockquote><h2 id="3-1-jstat命令"><a href="#3-1-jstat命令" class="headerlink" title="(3.1) jstat命令"></a>(3.1) jstat命令</h2><blockquote><p> 语法格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat [ generalOption | outputOptions vmid [ interval[s|ms] [ count ] ]</span><br></pre></td></tr></table></figure></p></blockquote><p>  详细信息见 <code>man jstat</code></p><h3 id="3-1-1-jstat命令"><a href="#3-1-1-jstat命令" class="headerlink" title="(3.1.1) jstat命令"></a>(3.1.1) jstat命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstat -help</span><br><span class="line">Usage: jstat -help|-options</span><br><span class="line">       jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br><span class="line"></span><br><span class="line">Definitions:</span><br><span class="line">  &lt;option&gt;      An option reported by the -options option</span><br><span class="line">  &lt;vmid&gt;        Virtual Machine Identifier. A vmid takes the following form:</span><br><span class="line">                     &lt;lvmid&gt;[@&lt;hostname&gt;[:&lt;port&gt;]]</span><br><span class="line">                Where &lt;lvmid&gt; is the local vm identifier for the target</span><br><span class="line">                Java virtual machine, typically a process id; &lt;hostname&gt; is</span><br><span class="line">                the name of the host running the target Java virtual machine;</span><br><span class="line">                and &lt;port&gt; is the port number for the rmiregistry on the</span><br><span class="line">                target host. See the jvmstat documentation for a more complete</span><br><span class="line">                description of the Virtual Machine Identifier.</span><br><span class="line">  &lt;lines&gt;       Number of samples between header lines.</span><br><span class="line">  &lt;interval&gt;    Sampling interval. The following forms are allowed:</span><br><span class="line">                    &lt;n&gt;[&quot;ms&quot;|&quot;s&quot;]</span><br><span class="line">                Where &lt;n&gt; is an integer and the suffix specifies the units as</span><br><span class="line">                milliseconds(&quot;ms&quot;) or seconds(&quot;s&quot;). The default units are &quot;ms&quot;.</span><br><span class="line">  &lt;count&gt;       Number of samples to take before terminating.</span><br><span class="line">  -J&lt;flag&gt;      Pass &lt;flag&gt; directly to the runtime system.</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstat -options</span><br><span class="line">-class</span><br><span class="line">-compiler</span><br><span class="line">-gc</span><br><span class="line">-gccapacity</span><br><span class="line">-gccause</span><br><span class="line">-gcmetacapacity</span><br><span class="line">-gcnew</span><br><span class="line">-gcnewcapacity</span><br><span class="line">-gcold</span><br><span class="line">-gcoldcapacity</span><br><span class="line">-gcutil</span><br><span class="line">-printcompilation</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><p><br></p><h3 id="3-1-1-jstat-class-13050"><a href="#3-1-1-jstat-class-13050" class="headerlink" title="(3.1.1) jstat -class 13050"></a>(3.1.1) jstat -class 13050</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstat -class 13050</span><br><span class="line">Loaded  Bytes  Unloaded  Bytes     Time</span><br><span class="line"> 15177 27005.8       41    49.7      24.44</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="3-1-2-jstat-compiler-13050"><a href="#3-1-2-jstat-compiler-13050" class="headerlink" title="(3.1.2) jstat -compiler 13050"></a>(3.1.2) jstat -compiler 13050</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$  jstat -compiler 13050</span><br><span class="line">Compiled Failed Invalid   Time   FailedType FailedMethod</span><br><span class="line">    7469      0       0    43.18          0</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="3-1-3-jstat-gc-13050"><a href="#3-1-3-jstat-gc-13050" class="headerlink" title="(3.1.3) jstat -gc 13050"></a>(3.1.3) jstat -gc 13050</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstat -gc 13050</span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">8512.0 8512.0  0.0    24.5  68160.0   6380.0   963392.0   61694.4   77732.0 71385.7 11984.0 9862.8     69    2.112   6      0.286    2.397</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>原文</th></tr></thead><tbody><tr><td>S0C</td><td>年轻代中第一个survivor 的容量  (kB)</td><td>Current survivor space 0 capacity (kB).</td></tr><tr><td>S1C</td><td>年轻代中第二个survivor 的容量  (kB)</td><td>Current survivor space 1 capacity (kB).</td></tr><tr><td>S0U</td><td>年轻代中第一个survivor 已使用空间   (kB)</td><td>Survivor space 0 utilization (kB).</td></tr><tr><td>S1U</td><td>年轻代中第二个survivor已使用空间   (kB)</td><td>Survivor space 1 utilization (kB).</td></tr><tr><td>EC</td><td>年轻代中 Eden space 的容量  (kB)</td><td>Current eden space capacity (kB).</td></tr><tr><td>EU</td><td>年轻代中Eden space 目前已使用空间  (kB)</td><td>Eden space utilization (kB).</td></tr><tr><td>OC</td><td>Old space的容量  (kB)</td><td>Current old space capacity (kB).</td></tr><tr><td>OU</td><td>Old space 已使用空间  (kB)</td><td>Old space utilization (kB).</td></tr><tr><td>MC</td><td>Metaspace 的容量  (kB)</td><td>Metaspace capacity (kB).</td></tr><tr><td>MU</td><td>Metaspace 已使用空间  (kB)</td><td>Metacspace utilization (kB).</td></tr><tr><td>CCSC</td><td>Compressed class spcage 容量 (kB)</td><td>Compressed class space capacity (kB).</td></tr><tr><td>CCSU</td><td>Compressed class spcage 已使用空间 (kB)</td><td>Compressed class space used (kB).</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td><td>Number of young generation garbage collection events.</td></tr><tr><td>YGCT</td><td>从应用程序启动到采样时年轻代中gc所用时间 (s)</td><td>Young generation garbage collection time.</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代 (全gc) gc次数</td><td>Number of full GC events.</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代 (全gc) gc所用时间 (s)</td><td>Full garbage collection time.</td></tr><tr><td>GCT</td><td>从应用程序启动到采样时gc用的总时间 (s)</td><td>Total garbage collection time.</td></tr></tbody></table><h3 id="3-1-4-jstat-gccapacity-13050"><a href="#3-1-4-jstat-gccapacity-13050" class="headerlink" title="(3.1.4) jstat -gccapacity 13050"></a>(3.1.4) jstat -gccapacity 13050</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstat -gccapacity 13050</span><br><span class="line"> NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC</span><br><span class="line"> 85184.0  85184.0  85184.0 8512.0 8512.0  68160.0   963392.0   963392.0   963392.0   963392.0      0.0 1116160.0  77732.0      0.0 1048576.0  11984.0     69     6</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="3-1-5-jstat-gccause-13050"><a href="#3-1-5-jstat-gccause-13050" class="headerlink" title="(3.1.5) jstat -gccause 13050"></a>(3.1.5) jstat -gccause 13050</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstat -gccause 13050</span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC</span><br><span class="line">  0.00   0.29  11.90   6.40  91.84  82.30     69    2.112     6    0.286    2.397 Allocation Failure   No GC</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="3-1-6-jstat-gcmetacapacity-13050"><a href="#3-1-6-jstat-gcmetacapacity-13050" class="headerlink" title="(3.1.6) jstat -gcmetacapacity 13050"></a>(3.1.6) jstat -gcmetacapacity 13050</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstat -gcmetacapacity 13050</span><br><span class="line">   MCMN       MCMX        MC       CCSMN      CCSMX       CCSC     YGC   FGC    FGCT     GCT</span><br><span class="line">       0.0  1116160.0    77732.0        0.0  1048576.0    11984.0    69     6    0.286    2.397</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="3-1-7-jstat-gcnew-13050"><a href="#3-1-7-jstat-gcnew-13050" class="headerlink" title="(3.1.7) jstat -gcnew 13050"></a>(3.1.7) jstat -gcnew 13050</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstat -gcnew 13050</span><br><span class="line"> S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT</span><br><span class="line">8512.0 8512.0    0.0   24.5  6   6 4256.0  68160.0  13229.3     69    2.112</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="3-1-8-jstat-gcnewcapacity-13050"><a href="#3-1-8-jstat-gcnewcapacity-13050" class="headerlink" title="(3.1.8) jstat -gcnewcapacity 13050"></a>(3.1.8) jstat -gcnewcapacity 13050</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstat -gcnewcapacity 13050</span><br><span class="line">  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC</span><br><span class="line">   85184.0    85184.0    85184.0   8512.0   8512.0   8512.0   8512.0    68160.0    68160.0    69     6</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="3-1-9-jstat-gcold-13050"><a href="#3-1-9-jstat-gcold-13050" class="headerlink" title="(3.1.9) jstat -gcold 13050"></a>(3.1.9) jstat -gcold 13050</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstat -gcold 13050</span><br><span class="line">   MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT</span><br><span class="line"> 77732.0  71385.7  11984.0   9862.8    963392.0     61694.4     69     6    0.286    2.397</span><br></pre></td></tr></table></figure><h3 id="3-1-10-jstat-gcoldcapacity-13050"><a href="#3-1-10-jstat-gcoldcapacity-13050" class="headerlink" title="(3.1.10) jstat -gcoldcapacity 13050"></a>(3.1.10) jstat -gcoldcapacity 13050</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstat -gcoldcapacity 13050</span><br><span class="line">   OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT</span><br><span class="line">   963392.0    963392.0    963392.0    963392.0    69     6    0.286    2.397</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="3-1-11-jstat-gcutil-13050"><a href="#3-1-11-jstat-gcutil-13050" class="headerlink" title="(3.1.11) jstat -gcutil 13050"></a>(3.1.11) jstat -gcutil 13050</h3><blockquote><p>垃圾回收状态摘要</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstat -gcutil 13050</span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">  0.00   0.29  24.37   6.40  91.84  82.30     69    2.112     6    0.286    2.397</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>原文</th></tr></thead><tbody><tr><td>S0</td><td>年轻代中第一个survivor 已使用的占当前容量百分比</td><td>Survivor space 0 utilization as a percentage of the space’s current capacity.</td></tr><tr><td>S1</td><td>年轻代中第二个survivor 已使用的占当前容量百分比</td><td>Survivor space 1 utilization as a percentage of the space’s current capacity.</td></tr><tr><td>E</td><td>Eden space 中Eden 已使用的占当前容量百分比</td><td>Eden space utilization as a percentage of the space’s current capacity.</td></tr><tr><td>O</td><td>Old space  已使用的占当前容量百分比</td><td>Old space utilization as a percentage of the space’s current capacity.</td></tr><tr><td>M</td><td>Metaspace 已使用的占当前容量百分比</td><td>Metaspace utilization as a percentage of the space’s current capacity.</td></tr><tr><td>CCS</td><td>Compressed class  空间利用率</td><td>Compressed class space utilization as a percentage.</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时 young generation gc次数</td><td>Number of young generation GC events.</td></tr><tr><td>YGCT</td><td>从应用程序启动到采样时Young gc所用时间(s)</td><td>Young generation garbage collection time.</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时Full gc次数</td><td>Number of full GC events.</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时Full gc所用时间(s)</td><td>Full garbage collection time.</td></tr><tr><td>GCT</td><td>从应用程序启动到采样时gc用的总时间(s)</td><td>Total garbage collection time.</td></tr></tbody></table><h3 id="3-1-12-jstat-printcompilation-13050"><a href="#3-1-12-jstat-printcompilation-13050" class="headerlink" title="(3.1.12) jstat -printcompilation 13050"></a>(3.1.12) jstat -printcompilation 13050</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstat -printcompilation 13050</span><br><span class="line">Compiled  Size  Type Method</span><br><span class="line">    7469     63    1 org/apache/logging/log4j/spi/AbstractLogger trace</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><p><br></p><h2 id="3-2-常用jstat命令"><a href="#3-2-常用jstat命令" class="headerlink" title="(3.2) 常用jstat命令"></a>(3.2) 常用jstat命令</h2><h3 id="3-2-1-jstat-gc-h5-t-13050-1000-10"><a href="#3-2-1-jstat-gc-h5-t-13050-1000-10" class="headerlink" title="(3.2.1) jstat -gc -h5 -t 13050  1000 10"></a>(3.2.1) jstat -gc -h5 -t 13050  1000 10</h3><blockquote><p>分析进程id为13050的gc情况，每隔1000ms打印一次记录，打印10次停止，每5行后打印指标头部<br>-gc 查看gc情况<br>-h5 每5行后打印指标头部<br>-t 进程启动时间<br>13050 进程id 也就是linux的pid<br>1000 每隔1000ms打印一次<br>10 共打印10行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstat -gc -h5 -t 13050  1000 10</span><br><span class="line">Timestamp        S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">       217492.5 8512.0 8512.0  0.0    77.3  68160.0  13154.8   963392.0   60728.2   77732.0 71386.5 11984.0 9862.9    133    2.921   8      0.947    3.868</span><br><span class="line">       217493.7 8512.0 8512.0  0.0    77.3  68160.0  13154.8   963392.0   60728.2   77732.0 71386.5 11984.0 9862.9    133    2.921   8      0.947    3.868</span><br><span class="line">       217494.7 8512.0 8512.0  0.0    77.3  68160.0  14055.9   963392.0   60728.2   77732.0 71386.5 11984.0 9862.9    133    2.921   8      0.947    3.868</span><br><span class="line">       217495.7 8512.0 8512.0  0.0    77.3  68160.0  14055.9   963392.0   60728.2   77732.0 71386.5 11984.0 9862.9    133    2.921   8      0.947    3.868</span><br><span class="line">       217496.7 8512.0 8512.0  0.0    77.3  68160.0  14055.9   963392.0   60728.2   77732.0 71386.5 11984.0 9862.9    133    2.921   8      0.947    3.868</span><br><span class="line">Timestamp        S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">       217497.7 8512.0 8512.0  0.0    77.3  68160.0  14055.9   963392.0   60728.2   77732.0 71386.5 11984.0 9862.9    133    2.921   8      0.947    3.868</span><br><span class="line">       217498.7 8512.0 8512.0  0.0    77.3  68160.0  14055.9   963392.0   60728.2   77732.0 71386.5 11984.0 9862.9    133    2.921   8      0.947    3.868</span><br><span class="line">       217499.7 8512.0 8512.0  0.0    77.3  68160.0  14055.9   963392.0   60728.2   77732.0 71386.5 11984.0 9862.9    133    2.921   8      0.947    3.868</span><br><span class="line">       217500.7 8512.0 8512.0  0.0    77.3  68160.0  14055.9   963392.0   60728.2   77732.0 71386.5 11984.0 9862.9    133    2.921   8      0.947    3.868</span><br><span class="line">       217501.7 8512.0 8512.0  0.0    77.3  68160.0  14068.0   963392.0   60728.2   77732.0 71386.5 11984.0 9862.9    133    2.921   8      0.947    3.868</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><blockquote><p> 我们可以比较 Java 进程的启动时间以及总 GC 时间（GCT 列），或者两次测量的间隔时间以及总 GC 时间的增量，来得出 GC 时间占运行时间的比例。如果该比例超过 20%，则说明目前堆的压力较大；如果该比例超过 90%，则说明堆里几乎没有可用空间，随时都可能抛出 OOM 异常。</p></blockquote><h3 id="3-2-2-jstat-gcutil-h5-t-13050-1000-10"><a href="#3-2-2-jstat-gcutil-h5-t-13050-1000-10" class="headerlink" title="(3.2.2) jstat -gcutil -h5 -t 13050  1000 10"></a>(3.2.2) jstat -gcutil -h5 -t 13050  1000 10</h3><blockquote><p>分析进程id为13050的gcutil情况，每隔1000ms打印一次记录，打印15次停止，每5行后打印指标头部<br>-gcutil 查看gcutil情况<br>-h5 每5行后打印指标头部<br>-t 进程启动时间<br>13050 进程id 也就是linux的pid<br>1000 每隔1000ms打印一次<br>10 共打印10行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstat -gcutil -h5 -t 13050  1000 10</span><br><span class="line">Timestamp         S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">       217569.9   0.00   0.91  23.55   6.30  91.84  82.30    133    2.921     8    0.947    3.868</span><br><span class="line">       217570.9   0.00   0.91  23.55   6.30  91.84  82.30    133    2.921     8    0.947    3.868</span><br><span class="line">       217571.9   0.00   0.91  23.55   6.30  91.84  82.30    133    2.921     8    0.947    3.868</span><br><span class="line">       217572.9   0.00   0.91  23.55   6.30  91.84  82.30    133    2.921     8    0.947    3.868</span><br><span class="line">       217573.9   0.00   0.91  23.55   6.30  91.84  82.30    133    2.921     8    0.947    3.868</span><br><span class="line">Timestamp         S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">       217574.9   0.00   0.91  23.55   6.30  91.84  82.30    133    2.921     8    0.947    3.868</span><br><span class="line">       217575.9   0.00   0.91  23.55   6.30  91.84  82.30    133    2.921     8    0.947    3.868</span><br><span class="line">       217576.9   0.00   0.91  23.55   6.30  91.84  82.30    133    2.921     8    0.947    3.868</span><br><span class="line">       217577.9   0.00   0.91  23.55   6.30  91.84  82.30    133    2.921     8    0.947    3.868</span><br><span class="line">       217578.9   0.00   0.91  23.55   6.30  91.84  82.30    133    2.921     8    0.947    3.868</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="4-Java配置信息工具-jinfo-Java-Configuration-Info"><a href="#4-Java配置信息工具-jinfo-Java-Configuration-Info" class="headerlink" title="(4) Java配置信息工具 jinfo (Java Configuration Info )"></a>(4) Java配置信息工具 jinfo (Java Configuration Info )</h1><blockquote><p>jinfo是实时查看和调整虚拟机各项参数的工具</p></blockquote><h2 id="4-1-jinfo命令"><a href="#4-1-jinfo命令" class="headerlink" title="(4.1) jinfo命令"></a>(4.1) jinfo命令</h2><p>语法格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jinfo [ option ] pid</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jinfo -help</span><br><span class="line">Usage:</span><br><span class="line">    jinfo [option] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jinfo [option] &lt;executable &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jinfo [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to remote debug server)</span><br><span class="line"></span><br><span class="line">where &lt;option&gt; is one of:</span><br><span class="line">    -flag &lt;name&gt;         to print the value of the named VM flag</span><br><span class="line">    -flag [+|-]&lt;name&gt;    to enable or disable the named VM flag</span><br><span class="line">    -flag &lt;name&gt;=&lt;value&gt; to set the named VM flag to the given value</span><br><span class="line">    -flags               to print VM flags</span><br><span class="line">    -sysprops            to print Java system properties</span><br><span class="line">    &lt;no option&gt;          to print both of the above</span><br><span class="line">    -h | -help           to print this help message</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jinfo -option</span><br><span class="line">Usage:</span><br><span class="line">    jinfo [option] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jinfo [option] &lt;executable &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jinfo [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to remote debug server)</span><br><span class="line"></span><br><span class="line">where &lt;option&gt; is one of:</span><br><span class="line">    -flag &lt;name&gt;         to print the value of the named VM flag</span><br><span class="line">    -flag [+|-]&lt;name&gt;    to enable or disable the named VM flag</span><br><span class="line">    -flag &lt;name&gt;=&lt;value&gt; to set the named VM flag to the given value</span><br><span class="line">    -flags               to print VM flags</span><br><span class="line">    -sysprops            to print Java system properties</span><br><span class="line">    &lt;no option&gt;          to print both of the above</span><br><span class="line">    -h | -help           to print this help message</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><p>  如果遇到 <code>Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can&#39;t attach to the process: ptrace(PTRACE_ATTACH, ..) failed for : Operation not permitted</code>，执行 <code>echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope</code>命令即可</p><h3 id="4-1-1-jinfo-pid"><a href="#4-1-1-jinfo-pid" class="headerlink" title="(4.1.1) jinfo pid"></a>(4.1.1) jinfo pid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jinfo 13050</span><br><span class="line">Attaching to process ID 13050, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.172-b11</span><br><span class="line">Java System Properties:</span><br><span class="line"></span><br><span class="line">jna.platform.library.path = /usr/lib64:/lib64:/usr/lib:/lib:/usr/lib64/dyninst:/usr/lib64/mysql</span><br><span class="line">java.runtime.name = Java(TM) SE Runtime Environment</span><br><span class="line">sun.boot.library.path = /home/wkq/software/jdk1.8.0_172/jre/lib/amd64</span><br><span class="line">java.vm.version = 25.172-b11</span><br><span class="line">es.path.home = /home/wkq/software/elasticsearch-6.6.2</span><br><span class="line">log4j.shutdownHookEnabled = false</span><br><span class="line">java.vendor.url = http://java.oracle.com/</span><br><span class="line">java.vm.vendor = Oracle Corporation</span><br><span class="line">path.separator = :</span><br><span class="line">file.encoding.pkg = sun.io</span><br><span class="line">java.vm.name = Java HotSpot(TM) 64-Bit Server VM</span><br><span class="line">jna.loaded = true</span><br><span class="line">sun.os.patch.level = unknown</span><br><span class="line">user.country = US</span><br><span class="line">sun.java.launcher = SUN_STANDARD</span><br><span class="line">es.networkaddress.cache.negative.ttl = 10</span><br><span class="line">jna.nosys = true</span><br><span class="line">java.vm.specification.name = Java Virtual Machine Specification</span><br><span class="line">user.dir = /home/wkq/software/elasticsearch-6.6.2</span><br><span class="line">java.runtime.version = 1.8.0_172-b11</span><br><span class="line">java.awt.graphicsenv = sun.awt.X11GraphicsEnvironment</span><br><span class="line">java.endorsed.dirs = /home/wkq/software/jdk1.8.0_172/jre/lib/endorsed</span><br><span class="line">os.arch = amd64</span><br><span class="line">java.io.tmpdir = /tmp/elasticsearch-5035355569386013893</span><br><span class="line">line.separator =</span><br><span class="line"></span><br><span class="line">es.networkaddress.cache.ttl = 60</span><br><span class="line">es.logs.node_name = elasticsearch_001_data</span><br><span class="line">java.vm.specification.vendor = Oracle Corporation</span><br><span class="line">os.name = Linux</span><br><span class="line">io.netty.noKeySetOptimization = true</span><br><span class="line">sun.jnu.encoding = ANSI_X3.4-1968</span><br><span class="line">jnidispatch.path = /tmp/elasticsearch-5035355569386013893/jna-117789/jna8829728915470247279.tmp</span><br><span class="line">java.library.path = /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class="line">sun.nio.ch.bugLevel =</span><br><span class="line">es.logs.cluster_name = elasticsearch_test</span><br><span class="line">java.specification.name = Java Platform API Specification</span><br><span class="line">java.class.version = 52.0</span><br><span class="line">sun.management.compiler = HotSpot 64-Bit Tiered Compilers</span><br><span class="line">os.version = 3.10.0-957.21.3.el7.x86_64</span><br><span class="line">user.home = /home/wkq</span><br><span class="line">user.timezone = Asia/Shanghai</span><br><span class="line">java.awt.printerjob = sun.print.PSPrinterJob</span><br><span class="line">file.encoding = UTF-8</span><br><span class="line">java.specification.version = 1.8</span><br><span class="line">es.distribution.type = tar</span><br><span class="line">io.netty.recycler.maxCapacityPerThread = 0</span><br><span class="line">user.name = wkq</span><br><span class="line">es.logs.base_path = /home/wkq/software/elasticsearch-6.6.2/logs</span><br><span class="line">java.class.path =  </span><br><span class="line">es.path.conf = /home/wkq/software/elasticsearch-6.6.2/config</span><br><span class="line">java.vm.specification.version = 1.8</span><br><span class="line">java.home = /home/wkq/software/jdk1.8.0_172/jre</span><br><span class="line">sun.java.command = org.elasticsearch.bootstrap.Elasticsearch -d</span><br><span class="line">sun.arch.data.model = 64</span><br><span class="line">io.netty.noUnsafe = true</span><br><span class="line">user.language = en</span><br><span class="line">java.specification.vendor = Oracle Corporation</span><br><span class="line">awt.toolkit = sun.awt.X11.XToolkit</span><br><span class="line">java.vm.info = mixed mode</span><br><span class="line">java.version = 1.8.0_172</span><br><span class="line">java.ext.dirs = /home/wkq/software/jdk1.8.0_172/jre/lib/ext:/usr/java/packages/lib/ext</span><br><span class="line">sun.boot.class.path =  </span><br><span class="line">java.awt.headless = true</span><br><span class="line">java.vendor = Oracle Corporation</span><br><span class="line">file.separator = /</span><br><span class="line">java.vendor.url.bug = http://bugreport.sun.com/bugreport/</span><br><span class="line">es.distribution.flavor = default</span><br><span class="line">sun.io.unicode.encoding = UnicodeLittle</span><br><span class="line">sun.cpu.endian = little</span><br><span class="line">log4j2.disable.jmx = true</span><br><span class="line">sun.cpu.isalist =</span><br><span class="line"></span><br><span class="line">VM Flags:</span><br><span class="line">Non-default VM flags: -XX:+AlwaysPreTouch -XX:CICompilerCount=2 -XX:CMSInitiatingOccupancyFraction=75 -XX:ErrorFile=null -XX:GCLogFileSize=67108864 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=null -XX:InitialHeapSize=1073741824 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=87228416 -XX:MaxTenuringThreshold=6 -XX:MinHeapDeltaBytes=196608 -XX:NewSize=87228416 -XX:NumberOfGCLogFiles=32 -XX:OldPLABSize=16 -XX:OldSize=986513408 -XX:-OmitStackTraceInFastThrow -XX:+PrintGC -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution -XX:ThreadStackSize=1024 -XX:+UseCMSInitiatingOccupancyOnly -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:+UseGCLogFileRotation -XX:+UseParNewGC</span><br><span class="line">Command line:  -Xms1g -Xmx1g -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -Des.networkaddress.cache.ttl=60 -Des.networkaddress.cache.negative.ttl=10 -XX:+AlwaysPreTouch -Xss1m -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djna.nosys=true -XX:-OmitStackTraceInFastThrow -Dio.netty.noUnsafe=true -Dio.netty.noKeySetOptimization=true -Dio.netty.recycler.maxCapacityPerThread=0 -Dlog4j.shutdownHookEnabled=false -Dlog4j2.disable.jmx=true -Djava.io.tmpdir=/tmp/elasticsearch-5035355569386013893 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=data -XX:ErrorFile=logs/hs_err_pid%p.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:logs/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=32 -XX:GCLogFileSize=64m -Des.path.home=/home/wkq/software/elasticsearch-6.6.2 -Des.path.conf=/home/wkq/software/elasticsearch-6.6.2/config -Des.distribution.flavor=default -Des.distribution.type=tar</span><br><span class="line"></span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="4-1-2-jinfo-flag-MaxMetaspaceSize-pid"><a href="#4-1-2-jinfo-flag-MaxMetaspaceSize-pid" class="headerlink" title="(4.1.2) jinfo -flag MaxMetaspaceSize pid"></a>(4.1.2) jinfo -flag MaxMetaspaceSize pid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jinfo -flag MaxMetaspaceSize 13050</span><br><span class="line">-XX:MaxMetaspaceSize=18446744073709547520</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="4-1-3-jinfo-flag-ThreadStackSize-pid"><a href="#4-1-3-jinfo-flag-ThreadStackSize-pid" class="headerlink" title="(4.1.3) jinfo -flag ThreadStackSize pid"></a>(4.1.3) jinfo -flag ThreadStackSize pid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jinfo -flag ThreadStackSize 13050</span><br><span class="line">-XX:ThreadStackSize=1024</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="4-1-4-jinfo-flag-MaxNewSize-pid"><a href="#4-1-4-jinfo-flag-MaxNewSize-pid" class="headerlink" title="(4.1.4) jinfo -flag MaxNewSize pid"></a>(4.1.4) jinfo -flag MaxNewSize pid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jinfo -flag MaxNewSize 13050</span><br><span class="line">-XX:MaxNewSize=87228416</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="4-1-5-jinfo-flag-CMSInitiatingOccupancyFraction-pid"><a href="#4-1-5-jinfo-flag-CMSInitiatingOccupancyFraction-pid" class="headerlink" title="(4.1.5) jinfo -flag CMSInitiatingOccupancyFraction pid"></a>(4.1.5) jinfo -flag CMSInitiatingOccupancyFraction pid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jinfo -flag CMSInitiatingOccupancyFraction 13050</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=75</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="4-1-6-查看所有JVM参数-java-XX-PrintFlagsInitial"><a href="#4-1-6-查看所有JVM参数-java-XX-PrintFlagsInitial" class="headerlink" title="(4.1.6) 查看所有JVM参数 java -XX:+PrintFlagsInitial"></a>(4.1.6) 查看所有JVM参数 java -XX:+PrintFlagsInitial</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ java -XX:+PrintFlagsInitial</span><br><span class="line">[Global flags]</span><br><span class="line">    uintx AdaptiveSizeDecrementScaleFactor          = 4                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizeMajorGCDecayTimeScale         = 10                                  &#123;product&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">     intx WorkAroundNPTLTimedWaitHang               = 1                                   &#123;product&#125;</span><br><span class="line">    uintx YoungGenerationSizeIncrement              = 20                                  &#123;product&#125;</span><br><span class="line">    uintx YoungGenerationSizeSupplement             = 80                                  &#123;product&#125;</span><br><span class="line">    uintx YoungGenerationSizeSupplementDecay        = 8                                   &#123;product&#125;</span><br><span class="line">    uintx YoungPLABSize                             = 4096                                &#123;product&#125;</span><br><span class="line">     bool ZeroTLAB                                  = false                               &#123;product&#125;</span><br><span class="line">     intx hashCode                                  = 5                                   &#123;product&#125;</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="4-1-7-查看所有支持动态修改的JVM参数-java-XX-PrintFlagsInitial-grep-manageable"><a href="#4-1-7-查看所有支持动态修改的JVM参数-java-XX-PrintFlagsInitial-grep-manageable" class="headerlink" title="(4.1.7) 查看所有支持动态修改的JVM参数 java -XX:+PrintFlagsInitial | grep manageable"></a>(4.1.7) 查看所有支持动态修改的JVM参数 java -XX:+PrintFlagsInitial | grep manageable</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ java -XX:+PrintFlagsInitial | grep manageable</span><br><span class="line">     intx CMSAbortablePrecleanWaitMillis            = 100                                 &#123;manageable&#125;</span><br><span class="line">     intx CMSTriggerInterval                        = -1                                  &#123;manageable&#125;</span><br><span class="line">     intx CMSWaitDuration                           = 2000                                &#123;manageable&#125;</span><br><span class="line">     bool HeapDumpAfterFullGC                       = false                               &#123;manageable&#125;</span><br><span class="line">     bool HeapDumpBeforeFullGC                      = false                               &#123;manageable&#125;</span><br><span class="line">     bool HeapDumpOnOutOfMemoryError                = false                               &#123;manageable&#125;</span><br><span class="line">    ccstr HeapDumpPath                              =                                     &#123;manageable&#125;</span><br><span class="line">    uintx MaxHeapFreeRatio                          = 70                                  &#123;manageable&#125;</span><br><span class="line">    uintx MinHeapFreeRatio                          = 40                                  &#123;manageable&#125;</span><br><span class="line">     bool PrintClassHistogram                       = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintClassHistogramAfterFullGC            = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintClassHistogramBeforeFullGC           = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintConcurrentLocks                      = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGC                                   = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGCDateStamps                         = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGCDetails                            = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGCID                                 = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGCTimeStamps                         = false                               &#123;manageable&#125;</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="4-1-7-调整JVM参数-布尔类型"><a href="#4-1-7-调整JVM参数-布尔类型" class="headerlink" title="(4.1.7) 调整JVM参数-布尔类型"></a>(4.1.7) 调整JVM参数-布尔类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flag [+|-]&lt;name&gt; PID</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jinfo -flag +PrintGC 13050</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br><span class="line">[wkq@VM_77_25_centos ~]$ jinfo -flag +PrintGCDetails 13050</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><blockquote><p>如果没报错则代表生效，加完以后可以通过 <code>jinfo -flags 13050</code> 验证</p></blockquote><h3 id="4-1-8-调整JVM参数-数字-字符串类型"><a href="#4-1-8-调整JVM参数-数字-字符串类型" class="headerlink" title="(4.1.8) 调整JVM参数-数字/字符串类型"></a>(4.1.8) 调整JVM参数-数字/字符串类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flag &lt;name&gt;=&lt;value&gt; PID</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jinfo -flag MaxHeapFreeRatio=65 13050</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><blockquote><p>没报错相当于修改成功，但是怎么验证是否生效，可以通过 <code>jinfo -flags 13050</code> 验证  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jinfo -flags 13050</span><br><span class="line">Attaching to process ID 13050, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.172-b11</span><br><span class="line">Non-default VM flags: -XX:+AlwaysPreTouch -XX:CICompilerCount=2 -XX:CMSInitiatingOccupancyFraction=75 -XX:ErrorFile=null -XX:GCLogFileSize=67108864 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=null -XX:InitialHeapSize=1073741824 -XX:MaxHeapFreeRatio=65 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=87228416 -XX:MaxTenuringThreshold=6 -XX:MinHeapDeltaBytes=196608 -XX:NewSize=87228416 -XX:NumberOfGCLogFiles=32 -XX:OldPLABSize=16 -XX:OldSize=986513408 -XX:-OmitStackTraceInFastThrow -XX:+PrintGC -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution -XX:ThreadStackSize=1024 -XX:+UseCMSInitiatingOccupancyOnly -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:+UseGCLogFileRotation -XX:+UseParNewGC</span><br><span class="line">Command line:  -Xms1g -Xmx1g -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -Des.networkaddress.cache.ttl=60 -Des.networkaddress.cache.negative.ttl=10 -XX:+AlwaysPreTouch -Xss1m -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djna.nosys=true -XX:-OmitStackTraceInFastThrow -Dio.netty.noUnsafe=true -Dio.netty.noKeySetOptimization=true -Dio.netty.recycler.maxCapacityPerThread=0 -Dlog4j.shutdownHookEnabled=false -Dlog4j2.disable.jmx=true -Djava.io.tmpdir=/tmp/elasticsearch-5035355569386013893 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=data -XX:ErrorFile=logs/hs_err_pid%p.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:logs/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=32 -XX:GCLogFileSize=64m -Des.path.home=/home/wkq/software/elasticsearch-6.6.2 -Des.path.conf=/home/wkq/software/elasticsearch-6.6.2/config -Des.distribution.flavor=default -Des.distribution.type=tar</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><p>  通过 <code>jinfo -flags 13050</code> 获取的结果可以看到 </p><blockquote><p>出现 Command failed in target VM 则表示这个flag参数不支持<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jinfo -flag ErrorFile=/home/wkq/es_error_file 13050</span><br><span class="line">Exception in thread &quot;main&quot; com.sun.tools.attach.AttachOperationFailedException: flag &apos;ErrorFile&apos; cannot be changed</span><br><span class="line"></span><br><span class="line">at sun.tools.attach.LinuxVirtualMachine.execute(LinuxVirtualMachine.java:229)</span><br><span class="line">at sun.tools.attach.HotSpotVirtualMachine.executeCommand(HotSpotVirtualMachine.java:261)</span><br><span class="line">at sun.tools.attach.HotSpotVirtualMachine.setFlag(HotSpotVirtualMachine.java:234)</span><br><span class="line">at sun.tools.jinfo.JInfo.flag(JInfo.java:134)</span><br><span class="line">at sun.tools.jinfo.JInfo.main(JInfo.java:81)</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure></p></blockquote><p><br><br><br></p><h1 id="5-Java内存映像工具-jmap"><a href="#5-Java内存映像工具-jmap" class="headerlink" title="(5) Java内存映像工具 jmap"></a>(5) Java内存映像工具 jmap</h1><blockquote><p> Jmap是一个可以输出所有内存中对象的工具，甚至可以将VM 中的heap，以二进制输出成文本。打印出某个java进程（使用pid）内存内的，所有‘对象’的情况（如：产生那些对象，及其数量）。</p></blockquote><h2 id="5-1-jmap命令"><a href="#5-1-jmap命令" class="headerlink" title="(5.1) jmap命令"></a>(5.1) jmap命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jmap -help</span><br><span class="line">Usage:</span><br><span class="line">    jmap [option] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jmap [option] &lt;executable &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jmap [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to remote debug server)</span><br><span class="line"></span><br><span class="line">where &lt;option&gt; is one of:</span><br><span class="line">    &lt;none&gt;               to print same info as Solaris pmap</span><br><span class="line">    -heap                to print java heap summary</span><br><span class="line">    -histo[:live]        to print histogram of java object heap; if the &quot;live&quot;</span><br><span class="line">                         suboption is specified, only count live objects</span><br><span class="line">    -clstats             to print class loader statistics</span><br><span class="line">    -finalizerinfo       to print information on objects awaiting finalization</span><br><span class="line">    -dump:&lt;dump-options&gt; to dump java heap in hprof binary format</span><br><span class="line">                         dump-options:</span><br><span class="line">                           live         dump only live objects; if not specified,</span><br><span class="line">                                        all objects in the heap are dumped.</span><br><span class="line">                           format=b     binary format</span><br><span class="line">                           file=&lt;file&gt;  dump heap to &lt;file&gt;</span><br><span class="line">                         Example: jmap -dump:live,format=b,file=heap.bin &lt;pid&gt;</span><br><span class="line">    -F                   force. Use with -dump:&lt;dump-options&gt; &lt;pid&gt; or -histo</span><br><span class="line">                         to force a heap dump or histogram when &lt;pid&gt; does not</span><br><span class="line">                         respond. The &quot;live&quot; suboption is not supported</span><br><span class="line">                         in this mode.</span><br><span class="line">    -h | -help           to print this help message</span><br><span class="line">    -J&lt;flag&gt;             to pass &lt;flag&gt; directly to the runtime system</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jmap -options</span><br><span class="line">Usage:</span><br><span class="line">    jmap [option] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jmap [option] &lt;executable &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jmap [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to remote debug server)</span><br><span class="line"></span><br><span class="line">where &lt;option&gt; is one of:</span><br><span class="line">    &lt;none&gt;               to print same info as Solaris pmap</span><br><span class="line">    -heap                to print java heap summary</span><br><span class="line">    -histo[:live]        to print histogram of java object heap; if the &quot;live&quot;</span><br><span class="line">                         suboption is specified, only count live objects</span><br><span class="line">    -clstats             to print class loader statistics</span><br><span class="line">    -finalizerinfo       to print information on objects awaiting finalization</span><br><span class="line">    -dump:&lt;dump-options&gt; to dump java heap in hprof binary format</span><br><span class="line">                         dump-options:</span><br><span class="line">                           live         dump only live objects; if not specified,</span><br><span class="line">                                        all objects in the heap are dumped.</span><br><span class="line">                           format=b     binary format</span><br><span class="line">                           file=&lt;file&gt;  dump heap to &lt;file&gt;</span><br><span class="line">                         Example: jmap -dump:live,format=b,file=heap.bin &lt;pid&gt;</span><br><span class="line">    -F                   force. Use with -dump:&lt;dump-options&gt; &lt;pid&gt; or -histo</span><br><span class="line">                         to force a heap dump or histogram when &lt;pid&gt; does not</span><br><span class="line">                         respond. The &quot;live&quot; suboption is not supported</span><br><span class="line">                         in this mode.</span><br><span class="line">    -h | -help           to print this help message</span><br><span class="line">    -J&lt;flag&gt;             to pass &lt;flag&gt; directly to the runtime system</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><blockquote><p> 更多详细信息参考 <code>man jmap</code></p></blockquote><h3 id="5-1-1-jmap-pid"><a href="#5-1-1-jmap-pid" class="headerlink" title="(5.1.1) jmap pid"></a>(5.1.1) jmap pid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jmap 13050</span><br><span class="line">Attaching to process ID 13050, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.172-b11</span><br><span class="line">0x00000000004000007K/home/wkq/software/jdk1.8.0_172/bin/java</span><br><span class="line">0x00007fb91127100049K/home/wkq/software/jdk1.8.0_172/jre/lib/amd64/libmanagement.so</span><br><span class="line">0x00007fb91167a00086K/usr/lib64/libgcc_s-4.8.5-20150702.so.1</span><br><span class="line">0x00007fb911890000251K/home/wkq/software/jdk1.8.0_172/jre/lib/amd64/libsunec.so</span><br><span class="line">0x00007fb9242c2000112K/home/wkq/software/jdk1.8.0_172/jre/lib/amd64/libnet.so</span><br><span class="line">0x00007fb9244d900091K/home/wkq/software/jdk1.8.0_172/jre/lib/amd64/libnio.so</span><br><span class="line">0x00007fb94065d000125K/home/wkq/software/jdk1.8.0_172/jre/lib/amd64/libzip.so</span><br><span class="line">0x00007fb94087900060K/usr/lib64/libnss_files-2.17.so</span><br><span class="line">0x00007fb940a8c000221K/home/wkq/software/jdk1.8.0_172/jre/lib/amd64/libjava.so</span><br><span class="line">0x00007fb940cb800064K/home/wkq/software/jdk1.8.0_172/jre/lib/amd64/libverify.so</span><br><span class="line">0x00007fb940ec700043K/usr/lib64/librt-2.17.so</span><br><span class="line">0x00007fb9410cf0001115K/usr/lib64/libm-2.17.so</span><br><span class="line">0x00007fb9413d100016667K/home/wkq/software/jdk1.8.0_172/jre/lib/amd64/server/libjvm.so</span><br><span class="line">0x00007fb9423d20002068K/usr/lib64/libc-2.17.so</span><br><span class="line">0x00007fb94279300019K/usr/lib64/libdl-2.17.so</span><br><span class="line">0x00007fb942997000101K/home/wkq/software/jdk1.8.0_172/lib/amd64/jli/libjli.so</span><br><span class="line">0x00007fb942bad000140K/usr/lib64/libpthread-2.17.so</span><br><span class="line">0x00007fb942dc9000155K/usr/lib64/ld-2.17.so</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="5-1-2-jmap-dump-live-format-b-file-file-path"><a href="#5-1-2-jmap-dump-live-format-b-file-file-path" class="headerlink" title="(5.1.2) jmap -dump:[live,] format=b, file=file_path"></a>(5.1.2) jmap -dump:[live,] format=b, file=file_path</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jmap -dump:live,format=b,file=13050.log 13050</span><br><span class="line">Dumping heap to /home/wkq/13050.log ...</span><br><span class="line">Heap dump file created</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="5-1-3-jmap-finalizerinfo-pid"><a href="#5-1-3-jmap-finalizerinfo-pid" class="headerlink" title="(5.1.3) jmap -finalizerinfo pid"></a>(5.1.3) jmap -finalizerinfo pid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jmap -finalizerinfo 13050</span><br><span class="line">Attaching to process ID 13050, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.172-b11</span><br><span class="line">Number of objects pending for finalization: 0</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="5-1-4-jmap-heap-pid"><a href="#5-1-4-jmap-heap-pid" class="headerlink" title="(5.1.4) jmap -heap pid"></a>(5.1.4) jmap -heap pid</h3><blockquote><p> jmap -heap pid<br> jmap-J-d64 -heap pid</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jmap -heap 13050</span><br><span class="line">Attaching to process ID 13050, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.172-b11</span><br><span class="line"></span><br><span class="line">using parallel threads in the new generation.</span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Concurrent Mark-Sweep GC</span><br><span class="line"></span><br><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio         = 40</span><br><span class="line">   MaxHeapFreeRatio         = 70</span><br><span class="line">   MaxHeapSize              = 1073741824 (1024.0MB)</span><br><span class="line">   NewSize                  = 87228416 (83.1875MB)</span><br><span class="line">   MaxNewSize               = 87228416 (83.1875MB)</span><br><span class="line">   OldSize                  = 986513408 (940.8125MB)</span><br><span class="line">   NewRatio                 = 2</span><br><span class="line">   SurvivorRatio            = 8</span><br><span class="line">   MetaspaceSize            = 21807104 (20.796875MB)</span><br><span class="line">   CompressedClassSpaceSize = 1073741824 (1024.0MB)</span><br><span class="line">   MaxMetaspaceSize         = 17592186044415 MB</span><br><span class="line">   G1HeapRegionSize         = 0 (0.0MB)</span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line">New Generation (Eden + 1 Survivor Space):</span><br><span class="line">   capacity = 78512128 (74.875MB)</span><br><span class="line">   used     = 7022576 (6.6972503662109375MB)</span><br><span class="line">   free     = 71489552 (68.17774963378906MB)</span><br><span class="line">   8.94457477958055% used</span><br><span class="line">Eden Space:</span><br><span class="line">   capacity = 69795840 (66.5625MB)</span><br><span class="line">   used     = 7022576 (6.6972503662109375MB)</span><br><span class="line">   free     = 62773264 (59.86524963378906MB)</span><br><span class="line">   10.061596794307512% used</span><br><span class="line">From Space:</span><br><span class="line">   capacity = 8716288 (8.3125MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 8716288 (8.3125MB)</span><br><span class="line">   0.0% used</span><br><span class="line">To Space:</span><br><span class="line">   capacity = 8716288 (8.3125MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 8716288 (8.3125MB)</span><br><span class="line">   0.0% used</span><br><span class="line">concurrent mark-sweep generation:</span><br><span class="line">   capacity = 986513408 (940.8125MB)</span><br><span class="line">   used     = 62168384 (59.28839111328125MB)</span><br><span class="line">   free     = 924345024 (881.5241088867188MB)</span><br><span class="line">   6.301828591061582% used</span><br><span class="line"></span><br><span class="line">22982 interned Strings occupying 3212304 bytes.</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="5-1-5-jmap-histo-pid"><a href="#5-1-5-jmap-histo-pid" class="headerlink" title="(5.1.5) jmap -histo pid"></a>(5.1.5) jmap -histo pid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jmap -histo 13050 | more</span><br><span class="line"></span><br><span class="line"> num     #instances         #bytes  class name</span><br><span class="line">----------------------------------------------</span><br><span class="line">   1:        258021       20550728  [C</span><br><span class="line">   2:        432469       13839008  java.util.HashMap$Node</span><br><span class="line">   3:        228108        5474592  java.lang.String</span><br><span class="line">   4:         38596        4839800  [Ljava.util.HashMap$Node;</span><br><span class="line">   5:         86202        4137696  java.util.HashMap</span><br><span class="line">   6:         21464        2574920  [B</span><br><span class="line">   7:         74456        2382592  java.util.Collections$UnmodifiableMap</span><br><span class="line">   8:         12306        2118456  [I</span><br><span class="line">   9:         30839        1957320  [Ljava.lang.Object;</span><br><span class="line">  10:         15798        1730136  java.lang.Class</span><br><span class="line">  11:         52294        1673408  java.util.concurrent.ConcurrentHashMap$Node</span><br><span class="line">  12:         24594         787008  java.util.AbstractList$Itr</span><br><span class="line">  13:         49038         784608  org.elasticsearch.common.lucene.LoggerInfoStream$$Lambda$3048/931367447</span><br><span class="line">  14:         24519         784608  org.elasticsearch.index.engine.Engine$$Lambda$3100/1060530393</span><br><span class="line">  15:         23576         754432  java.lang.ref.WeakReference</span><br><span class="line">  16:         30639         735336  java.util.Arrays$ArrayList</span><br><span class="line">  17:         24519         588456  [Lorg.elasticsearch.common.lease.Releasable;</span><br><span class="line">  18:         24519         588456  org.elasticsearch.index.engine.Engine$Searcher</span><br><span class="line">  19:          8132         585504  java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask</span><br><span class="line">  20:          9564         535584  java.lang.invoke.MemberName</span><br><span class="line">  21:          6052         532576  java.lang.reflect.Method</span><br><span class="line">  22:         33099         529584  java.lang.Object</span><br></pre></td></tr></table></figure><h3 id="5-1-6-jmap-clstats-pid"><a href="#5-1-6-jmap-clstats-pid" class="headerlink" title="(5.1.6) jmap -clstats pid"></a>(5.1.6) jmap -clstats pid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jmap -clstats 13050</span><br><span class="line">Attaching to process ID 13050, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.172-b11</span><br><span class="line">finding class loader instances ..</span><br><span class="line">done.</span><br><span class="line">computing per loader stat ..done.</span><br><span class="line">please wait.. computing liveness.liveness analysis may be inaccurate ...</span><br><span class="line">class_loaderclassesbytesparent_loaderalive?type</span><br><span class="line"></span><br><span class="line">&lt;bootstrap&gt;23534122324  null  live&lt;internal&gt;</span><br><span class="line">0x00000000c5fa93781714  null  deadorg/elasticsearch/painless/lookup/PainlessLookupBuilder$BridgeLoader@0x00000001003f45d0</span><br><span class="line">0x00000000c5fa98781714  null  deadorg/elasticsearch/painless/lookup/PainlessLookupBuilder$BridgeLoader@0x00000001003f45d0</span><br><span class="line">0x00000000c58b8708000x00000000c544a3d0deadorg/elasticsearch/plugins/ExtendedPluginsClassLoader@0x0000000100263e90</span><br><span class="line">0x00000000c5ab86a8114710x00000000c544a3d0deadsun/reflect/DelegatingClassLoader@0x000000010000a028</span><br><span class="line">0x00000000c5ac4b2811201820x00000000c5c12600deadjava/net/FactoryURLClassLoader@0x0000000100259738</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">total = 861158219740221    N/A    alive=1, dead=85    N/A</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><blockquote><p> 省略部分详细信息</p></blockquote><p><br><br><br></p><h1 id="6-虚拟机堆转储快照分析工具-jhat"><a href="#6-虚拟机堆转储快照分析工具-jhat" class="headerlink" title="(6) 虚拟机堆转储快照分析工具 jhat"></a>(6) 虚拟机堆转储快照分析工具 jhat</h1><p><br><br><br></p><h1 id="7-Java堆栈跟踪工具-jstack-Java-Stack-Trace"><a href="#7-Java堆栈跟踪工具-jstack-Java-Stack-Trace" class="headerlink" title="(7) Java堆栈跟踪工具 jstack (Java Stack Trace)"></a>(7) Java堆栈跟踪工具 jstack (Java Stack Trace)</h1><blockquote><p> jstack主要用来查看某个Java进程内的线程堆栈信息。<br>在实际运行中，往往一次 dump的信息，还不足以确认问题。建议产生三次 dump信息，如果每次 dump都指向同一个问题，我们才确定问题的典型性。 </p></blockquote><h2 id="7-1-jstack命令"><a href="#7-1-jstack命令" class="headerlink" title="(7.1) jstack命令"></a>(7.1) jstack命令</h2><figure class="highlight plain"><figcaption><span>~]$ jstack -help</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">    jstack [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jstack -F [-m] [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to a hung process)</span><br><span class="line">    jstack [-m] [-l] &lt;executable&gt; &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jstack [-m] [-l] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to a remote debug server)</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -F  to force a thread dump. Use when jstack &lt;pid&gt; does not respond (process is hung)</span><br><span class="line">    -m  to print both java and native frames (mixed mode)</span><br><span class="line">    -l  long listing. Prints additional information about locks</span><br><span class="line">    -h or -help to print this help message</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstack -options</span><br><span class="line">Usage:</span><br><span class="line">    jstack [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jstack -F [-m] [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to a hung process)</span><br><span class="line">    jstack [-m] [-l] &lt;executable&gt; &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jstack [-m] [-l] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to a remote debug server)</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -F  to force a thread dump. Use when jstack &lt;pid&gt; does not respond (process is hung)</span><br><span class="line">    -m  to print both java and native frames (mixed mode)</span><br><span class="line">    -l  long listing. Prints additional information about locks</span><br><span class="line">    -h or -help to print this help message</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="7-1-1-jstack-pid"><a href="#7-1-1-jstack-pid" class="headerlink" title="(7.1.1) jstack pid"></a>(7.1.1) jstack pid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstack  13050</span><br><span class="line">2020-03-29 08:55:30</span><br><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.172-b11 mixed mode):</span><br><span class="line"></span><br><span class="line">&quot;Attach Listener&quot; #48 daemon prio=9 os_prio=0 tid=0x00007fb90805b800 nid=0x1c9f waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;elasticsearch[elasticsearch_001_data][flush][T#1]&quot; #47 daemon prio=5 os_prio=0 tid=0x00007fb93c693800 nid=0x376c waiting on condition [0x00007fb8fd520000]</span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">- parking to wait for  &lt;0x00000000c600d388&gt; (a org.elasticsearch.common.util.concurrent.EsExecutors$ExecutorScalingQueue)</span><br><span class="line">...</span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><h3 id="7-1-2-jstack-l-pid"><a href="#7-1-2-jstack-l-pid" class="headerlink" title="(7.1.2) jstack -l pid"></a>(7.1.2) jstack -l pid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[wkq@VM_77_25_centos ~]$ jstack -l 13050</span><br><span class="line">2020-03-29 23:09:50</span><br><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.172-b11 mixed mode):</span><br><span class="line"></span><br><span class="line">&quot;elasticsearch[elasticsearch_001_data][generic][T#8]&quot; #51 daemon prio=5 os_prio=0 tid=0x00007fb93df68000 nid=0x77cf waiting on condition [0x00007fb8ff934000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (parking)</span><br><span class="line">at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">- parking to wait for  &lt;0x00000000c5ed5f70&gt; (a org.elasticsearch.common.util.concurrent.EsExecutors$ExecutorScalingQueue)</span><br><span class="line">at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">- None</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&quot;Attach Listener&quot; #48 daemon prio=9 os_prio=0 tid=0x00007fb90805b800 nid=0x1c9f waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&quot;VM Thread&quot; os_prio=0 tid=0x00007fb93c0b5000 nid=0x32ff runnable</span><br><span class="line"></span><br><span class="line">&quot;Gang worker#0 (Parallel GC Threads)&quot; os_prio=0 tid=0x00007fb93c01d000 nid=0x32fd runnable</span><br><span class="line"></span><br><span class="line">&quot;Concurrent Mark-Sweep GC Thread&quot; os_prio=0 tid=0x00007fb93c040000 nid=0x32fe runnable</span><br><span class="line"></span><br><span class="line">&quot;VM Periodic Task Thread&quot; os_prio=0 tid=0x00007fb93c103800 nid=0x3307 waiting on condition</span><br><span class="line"></span><br><span class="line">JNI global references: 8827</span><br><span class="line"></span><br><span class="line">[wkq@VM_77_25_centos ~]$</span><br></pre></td></tr></table></figure><p><br><br><br></p><h1 id="8-Java监视与管理控制台-JConsole-Java-Monitoring-and-Managerment-Console"><a href="#8-Java监视与管理控制台-JConsole-Java-Monitoring-and-Managerment-Console" class="headerlink" title="(8) Java监视与管理控制台 JConsole (Java Monitoring and Managerment Console)"></a>(8) Java监视与管理控制台 JConsole (Java Monitoring and Managerment Console)</h1><p><br><br><br></p><h1 id="9-多合一故障处理工具-VisuaIVM-All-in-One-Java-Troubleshooting-Tool"><a href="#9-多合一故障处理工具-VisuaIVM-All-in-One-Java-Troubleshooting-Tool" class="headerlink" title="(9) 多合一故障处理工具 VisuaIVM (All-in-One Java Troubleshooting Tool)"></a>(9) 多合一故障处理工具 VisuaIVM (All-in-One Java Troubleshooting Tool)</h1><blockquote><p>VisuaIVM (All-in-One Java Troubleshooting Tool) 是到目前为止随JDK发布的功能最强大的运行监视和故障处理程序。</p></blockquote><p><br><br><br></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] 《深入理解JAVA虚拟机: JVM高级特性与最佳实践》 周志明<br>[2] <a href="https://my.oschina.net/feichexia/blog/196575" target="_blank" rel="noopener">JVM性能调优监控工具jps、jstack、jmap、jhat、jstat、hprof使用详解</a><br>[3] <a href="https://www.cnblogs.com/tulianghui/p/5914535.html" target="_blank" rel="noopener">JAVA JPS 命令详解</a><br>[4] <a href="https://blog.csdn.net/ouyang111222/article/details/53688986" target="_blank" rel="noopener">jstat使用详解（分析JVM的使用情况）</a><br>[5] <a href="https://www.cnblogs.com/duanxz/p/10240899.html" target="_blank" rel="noopener">使用Java监控工具出现 Can’t attach to the process</a><br>[6] <a href="https://my.oschina.net/javamaster/blog/1833908" target="_blank" rel="noopener">JVM系列：jinfo命令详解</a><br>[7] <a href="https://blog.csdn.net/zhaozheng7758/article/details/8623530" target="_blank" rel="noopener">jmap命令详解</a><br>[8] <a href="https://blog.csdn.net/zhaozheng7758/article/details/8623535" target="_blank" rel="noopener">jstack命令详解</a><br>[9] <a href="https://time.geekbang.org/column/article/40520" target="_blank" rel="noopener">深入拆解Java虚拟机 - 30 | Java虚拟机的监控及诊断工具（命令行篇）</a><br>[10] <a href="https://docs.oracle.com/en/java/javase/11/tools/monitoring-tools-and-commands.html" target="_blank" rel="noopener">oracle monitoring-tools-and-commands</a><br>[11] <a href="https://time.geekbang.org/column/article/40821" target="_blank" rel="noopener">深入拆解Java虚拟机 - 31 | Java虚拟机的监控及诊断工具（GUI篇）</a><br>[12] <a href="https://visualvm.github.io/index.html" target="_blank" rel="noopener">visualvm</a><br>[13] <a href="https://github.com/AdoptOpenJDK/jitwatch" target="_blank" rel="noopener">jitwatch</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 最近测试环境总是莫名的出问题，然后部署服务的容器里除了服务打印的日志，没有其它信息，想看看是什么原因导致服务很卡，是不是有哪块代码占用内存高。&lt;br&gt; 代码执行缓慢、OutOfMemoryError，内存不足、内存泄露、线程死锁、锁争用（Lock Contention）、Java进程消耗CPU过高 都可以使用JDK的命令行工具排查。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-JDK的命令行工具&quot;&gt;&lt;a href=&quot;#1-JDK的命令行工具&quot; class=&quot;headerlink&quot; title=&quot;(1) JDK的命令行工具&quot;&gt;&lt;/a&gt;(1) JDK的命令行工具&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; jps、jstat、jinfo、jmap、jhat、jstack、hprof&lt;br&gt;jps : 虚拟机进程状况工具&lt;br&gt;jstat : 虚拟机统计信息监视工具&lt;br&gt;jinfo : Java 配置信息工具&lt;br&gt;jmap : Java 内存映像工具&lt;br&gt;jhat : 虚拟机堆转储快照分析工具&lt;br&gt;jstack : Java 堆栈跟踪工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; jps将打印所有正在运行的 Java 进程。&lt;br&gt; jstat允许用户查看目标 Java 进程的类加载、即时编译以及垃圾回收相关的信息。它常用于检测垃圾回收问题以及内存泄漏问题。&lt;br&gt; jmap允许用户统计目标 Java 进程的堆中存放的 Java 对象，并将它们导出成二进制文件。&lt;br&gt; jinfo将打印目标 Java 进程的配置参数，并能够改动其中 manageabe 的参数。&lt;br&gt; jstack将打印目标 Java 进程中各个线程的栈轨迹、线程状态、锁状况等信息。它还将自动检测死锁。&lt;br&gt; jcmd则是一把瑞士军刀，可以用来实现前面除了jstat之外所有命令的功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Java虚拟机的监控及诊断工具-GUI&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JConsole : Java 监视与管理控制台&lt;br&gt;VisualVM : 多合一故障处理工具&lt;br&gt;eclipse MAT&lt;br&gt;JMC&lt;br&gt;JITWatch&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-虚拟机进程状况工具-jps-JVM-Process-Status-Tool&quot;&gt;&lt;a href=&quot;#2-虚拟机进程状况工具-jps-JVM-Process-Status-Tool&quot; class=&quot;headerlink&quot; title=&quot;(2) 虚拟机进程状况工具 jps (JVM Process Status Tool)&quot;&gt;&lt;/a&gt;(2) 虚拟机进程状况工具 jps (JVM Process Status Tool)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; jps主要用来输出JVM中运行的进程状态信息。&lt;br&gt; jps命令使用Java启动器来查找传递给main方法的类名和参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[wkq@VM_77_25_centos ~]$ jps -help&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;usage: jps [-help]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       jps [-q] [-mlvV] [&amp;lt;hostid&amp;gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Definitions:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;hostid&amp;gt;:      &amp;lt;hostname&amp;gt;[:&amp;lt;port&amp;gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[wkq@VM_77_25_centos ~]$&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-1-jps命令&quot;&gt;&lt;a href=&quot;#2-1-jps命令&quot; class=&quot;headerlink&quot; title=&quot;(2.1) jps命令&quot;&gt;&lt;/a&gt;(2.1) jps命令&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;jps命令用于输出JVM中运行的进程状态信息。可以获取到进程的pid、全限定名、传入main方法的参数、传入JVM的参数 等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;语法格式&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jps [ options ] [ hostid ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  如果不指定hostid就默认为当前主机或服务器。&lt;/p&gt;
&lt;p&gt;  详细信息见 &lt;code&gt;man jps&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-1-1-jps-不加参数&quot;&gt;&lt;a href=&quot;#2-1-1-jps-不加参数&quot; class=&quot;headerlink&quot; title=&quot;(2.1.1) jps 不加参数&quot;&gt;&lt;/a&gt;(2.1.1) jps 不加参数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; 在本地主机上搜索检测到的JVM。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[wkq@VM_77_25_centos ~]$ jps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14916 Jps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13050 Elasticsearch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[wkq@VM_77_25_centos ~]$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[wkq@VM_77_25_centos ~]$&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://weikeqin.com/categories/java/"/>
    
    
      <category term="java" scheme="http://weikeqin.com/tags/java/"/>
    
      <category term="jvm" scheme="http://weikeqin.com/tags/jvm/"/>
    
  </entry>
  
</feed>
